/*
 *  $URL$
 *  $Author$
 *  $Date$
 *  
 *  $Copyright-Start$
 *
 *  Copyright (c) 2013
 *  Sam Corporation
 *  All Rights Reserved
 *
 *  This software is furnished under a corporate license for use on a
 *  single computer system and can be copied (with inclusion of the
 *  above copyright) only for use on such a system.
 *
 *  The information in this document is subject to change without notice
 *  and should not be construed as a commitment by Sam Corporation.
 *
 *  Sam Corporation assumes no responsibility for the use of the
 *  software described in this document on equipment which has not been
 *  supplied or approved by Sam Corporation.
 *
 *  $Copyright-End$
 */

package com.redprairie.moca.applications.traceanalyzer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.redprairie.util.Pair;

/**
 * The TraceAnalysis is generated by the TraceAnalyzer and 
 * gives details around the trace that was parsed/analyzed.
 */
public class TraceAnalysis {
    
    TraceAnalysis(List<CommandExecution> allCommands, List<SqlExecution> allSqlExecutions,
        List<ClientExecution> allClientExecutions, List<RequestExecution> allRequests,
        List<Execution> allExecutions, List<TracePause> allPausesAboveThreshold, long pauseThreshold,
        List<TraceLine> allErrorLines, List<Pair<TraceLine, TraceLine>> allCommandErrorStatusLines) {
        _allCommands = Collections.unmodifiableList(allCommands);
        _allSqlExecutions = Collections.unmodifiableList(allSqlExecutions);
        _allClientExecutions = Collections.unmodifiableList(allClientExecutions);
        _allRequests = Collections.unmodifiableList(allRequests);
        _allExecutions = Collections.unmodifiableList(allExecutions);
        _allPausesAboveThreshold = Collections.unmodifiableList(allPausesAboveThreshold);
        _pauseThreshold = pauseThreshold;
        _allErrorLines = Collections.unmodifiableList(allErrorLines);
        _allCommandErrorStatusLines = Collections.unmodifiableList(allCommandErrorStatusLines);
        
        long tempTime = 0;
        long tempTime2 = 0;
        for (CommandExecution execution : allCommands) {
            tempTime += execution.getSelfTime();
            tempTime2 += execution.getSelfSqlTime();
        }
        _totalCommandAppTime = tempTime;
        _totalCommandSqlTime = tempTime2;
        
        
        tempTime = 0;
        for (RequestExecution exec : allRequests) {
             tempTime += exec.getExecutionTime();
        }
        _totalRequestTimes = tempTime;
        
        tempTime = 0;
        
        for (int i = 1; i < (_allClientExecutions.size() - 1); i++) {
            tempTime += _allClientExecutions.get(i).getExecutionTime();
        }
        _totalDeadTime = tempTime;
        
        tempTime = 0;
        for (SqlExecution sql : allSqlExecutions) {
            tempTime += sql.getExecutionTime();
        }
        _totalSqlExecutionTime = tempTime;
    }
    
    public int getNumberOfIrregularPauses() {
        return _allPausesAboveThreshold.size();
    }
    
    public long getPauseThreshold() {
        return _pauseThreshold;
    }
    
    public List<TracePause> getAllPausesAboveThreshold() {
        return _allPausesAboveThreshold;
    }
    
    public List<CommandExecution> getAllCommandExecutions() {
        return _allCommands;
    }
    
    public long getTotalCommandTime() {
        return _totalCommandAppTime + _totalCommandSqlTime;
    }
    
    public long getTotalCommandAppTime() {
        return _totalCommandAppTime;
    }
    
    public long getTotalCommandSqlTime() {
        return _totalCommandSqlTime;
    }
    
    public int getNumberOfCommandsExecuted() {
        return _allCommands.size();
    }
    
    public List<SqlExecution> getAllSqlExecutions() {
        return _allSqlExecutions;
    }
    
    public List<SqlExecution> getAllSqlExecutions(long aboveThresholdMs) {
        List<SqlExecution> executionsAboveThreshold = new ArrayList<SqlExecution>();
        for (SqlExecution sql : _allSqlExecutions) {
            if (sql.getExecutionTime() >= aboveThresholdMs) {
                executionsAboveThreshold.add(sql);
            }
        }
        
        return Collections.unmodifiableList(executionsAboveThreshold);
    }
    
    public long getTotalSqlExecutionTime() {
        return _totalSqlExecutionTime;
    }
    
    public int getNumberOfSqlExecutions() {
        return _allSqlExecutions.size();
    }
    
    public List<ClientExecution> getAllClientExecutionGaps() {
        return _allClientExecutions;
    }
    
    public long getTotalClientTime() {
        return _totalDeadTime;
    }
    
    public List<RequestExecution> getAllRequests() {
        return _allRequests;
    }
    
    public long getTotalRequestTime() {
        return _totalRequestTimes;
    }
    
    public int getNumerOfRequests() {
        return _allRequests.size();
    }
    
    public List<Execution> getAllExecutions() {
        return _allExecutions;
    }
    
    public List<TraceLine> getAllErrorLines() {
        return _allErrorLines;
    }
    
    public List<Pair<TraceLine, TraceLine>> getAllCommandErrorStatusLines() {
        return _allCommandErrorStatusLines;
    }
    
    private final List<CommandExecution> _allCommands;
    private final List<SqlExecution> _allSqlExecutions;
    private final List<ClientExecution> _allClientExecutions;
    private final List<RequestExecution> _allRequests;
    private final List<Execution> _allExecutions;
    private final List<TracePause> _allPausesAboveThreshold;
    private final List<TraceLine> _allErrorLines;
    private final List<Pair<TraceLine, TraceLine>> _allCommandErrorStatusLines;
    
    private final long _totalCommandAppTime;
    private final long _totalCommandSqlTime;
    private final long _totalRequestTimes;
    private final long _totalDeadTime;
    private final long _totalSqlExecutionTime;
    
    private final long _pauseThreshold;
}

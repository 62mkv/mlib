<?xml version="1.0" encoding= "UTF-8" ?>
<configuration packages="com.redprairie.moca.server.log" monitorInterval="30">
  <appenders>
    <Console name="Console" target="SYSTEM_OUT">
      <!-- %T is a custom pattern converter which prints the thread id instead
           of the thread name.  The implementation can be found at 
           com.redprairie.moca.server.log.pattern.ThreadIdPatternConverter -->
      <!-- %X moca-session and moca-stack-level are placed a custom 
           LoggerConfig which puts the moca session and stack level into
           the ThreadContext before logging.  The implementation that does
           this is com.redprairie.moca.server.log.config.MocaLoggerConfig -->
      <PatternLayout pattern="%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n"/>
    </Console>

    <!-- Almost identical to the RoutingAppender provided by log4j2.  This one
         adds additional functionality to be able to close the appender.  This
         was required due to client tracing having possibly unique names and
         not wanting to run out of file pointers by keeping those files open.
         The implementation can be found at 
         com.redprairie.moca.server.log.MocaRoutingAppender-->
    <MocaRouting name="RoutingAppender">
      <!-- The moca-trace-file context value is set at 2 different times, either
           by setting the trace file option on the command line or if the 
           client/component enables the trace file --> 
      <Routes pattern="$${ctx:moca-trace-file}"> 
        <Route>
          <File name="File-${ctx:moca-trace-file}" fileName="${ctx:moca-trace-file}">		  
            <PatternLayout> 
              <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n</pattern> 
            </PatternLayout> 
          </File>
        </Route> 

		<!-- An example of a custom logger for a task/job. 
		     It matches the key for the file name, then you can specify whichever 
			 kind of appender that you prefer. 
		<Route key="${env:LESDIR}/log/TestTask.log">
		  <RollingFile name="TestTask" fileName="${ctx:moca-trace-file}"
				filePattern="${env:LESDIR}/log/TestTask-%d{MM-dd-yyyy}-%i.log.gz">
		    <PatternLayout> 
              <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n</pattern> 
            </PatternLayout> 
			<Policies>
              <SizeBasedTriggeringPolicy size="20 KB"/>
            </Policies>
          </RollingFile>
		</Route> -->
		
        <!-- By having this set to ${ctx:moca-trace-file} it will match when filename 
             is not set in the context, as in trace file is not enabled --> 
        <Route ref="Console-TraceOnly" key="${ctx:moca-trace-file}"/> 
      </Routes> 
    </MocaRouting>
    
    <!-- This is effectively a Console Appender that will only print messages
         that were printed due to moca trace being enabled.  That is that
         the logger level didn't match the log message's level -->
    <!-- The only reason this is here is because Route doesn't accept a filter
         like a normal appender-ref does -->
    <!-- Seems like this was fixed in beta 6, although not in the way we had thought. 
	     Keeping this around for now, in case it changes in the near future. -->
    <Rewrite name="Console-TraceOnly">
      <appender-ref ref="Console">
        <LogLevelFilter onMatch="DENY" onMismatch="ACCEPT"/>
      </appender-ref>
    </Rewrite>
	
	<!-- This is a definition for our activity appender. This is one option we could 
	     use for it.  Note we use the environment variable to specify the directory.
	<File name="ActivityAppender" fileName="${env:LESDIR}/log/activity.log">
      <PatternLayout>
        <pattern>%d{DEFAULT} %-5p [%-3T %-4.4X{moca-session}] %c{1} [%X{moca-stack-level}] %m []%n</pattern> 
      </PatternLayout>
    </File>-->
  </appenders>
  
  <!--  This is a custom Filter so we can enable only given packages when
        trace is enabled. By default the inner filter is checked first which
        checks that tracing is enabled. For the PackageFilter there are 
        includePackages and excludePackages values that can be configured as a
        comma separated list of package/classnames.  If tracing is enabled and
        the package is found to be included and not excluded then the log message
        will go through. If no includePackages are provided then it will
        include all.  If no excludePackages then it will exclude no packages.  
        If the given package/classname is found to be excluded it will always
        return a NEUTRAL result forcing the log levels defined in <loggers> to be obeyed.
        The implementation can be found at 
        com.redprairie.moca.server.log.filter.PackageFilter-->
  <!--  The moca-trace-level thread value is set in 2 circumstances.  When the
        server is configured to run with tracing (ie. -t* argument) or if the
        client or application code enables tracing for the given thread.
        This is the preferred area to enable logging of 3rd party libraries
        for session tracing since this will only apply when tracing is enabled via
        the above mentioned methods. Changing the <logger> definition (Logger Configuration)
        will apply to the entire server vs this section is only when tracing is explicitly enabled.
        For example, if a client is experiencing what is believed to be a hibernate issue the 
        includesPackages could be changed to "com.redprairie,org.hibernate" - after the configuration 
        change is synced (30 seconds by default) the client can enable session tracing and all
        hibernate log messages (debug, trace, etc.) will be included in the log output for the session.-->
  <PackageFilter includePackages="com.redprairie">
    <ThreadContextMapFilter onMatch="ACCEPT" onMismatch="NEUTRAL">
      <KeyValuePair key="moca-trace-level" value="*"/>
    </ThreadContextMapFilter>
  </PackageFilter>
  
  <loggers>
    <root level="WARN">
      <appender-ref ref="RoutingAppender"/>
	</root>
    <logger name="com.redprairie" level="INFO"/>
    <logger name="org.eclipse" level="INFO"/>
	
	<!-- This is the logger you would enable to get the MOCA
	     activity log into a trace file. You can specify the specific appender.
		 The Moca activity will always be logged as debug in the server trace.
	<logger name="com.redprairie.moca.Activity" level="INFO">
	  <appender-ref ref="ActivityAppender"/>
	</logger>-->
  </loggers>
</configuration>

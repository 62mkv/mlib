/*
 *  $Copyright-Start$
 *
 *  Copyright (c) 2013
 *  RedPrairie Corporation
 *  All Rights Reserved
 *
 *  This software is furnished under a corporate license for use on a
 *  single computer system and can be copied (with inclusion of the
 *  above copyright) only for use on such a system.
 *
 *  The information in this document is subject to change without notice
 *  and should not be construed as a commitment by RedPrairie Corporation.
 *
 *  RedPrairie Corporation assumes no responsibility for the use of the
 *  software described in this document on equipment which has not been
 *  supplied or approved by RedPrairie Corporation.
 *
 *  $Copyright-End$
 */

RP.globals=RP.globals||{};RP.stash.api.beginLoadLib();
Ext.ns("RP.locale");RP.locale.Dispatch=function(){var msgDict={};var localePacksDict={};var urlAppendDict={};var messageKeyEnabled=!Ext.isEmpty(Ext.util.Cookies.get("rp-showmessages"))&&RP.globals.getValue("SERVER_TYPE")!=="production";var defineLocalePack=function(lp,override){logger.logDebug("[Dispatch] Adding locale pack definition: "+lp.name);if(!override&&localePacksDict[lp.name]){return;}
if(override&&urlAppendDict[lp.name]){logger.logTrace("[Dispatch] Clearing 'append' URLs for locale pack '"+lp.name+"'");delete urlAppendDict[lp.name];}
localePacksDict[lp.name]={url:lp.url};};var getLocalePackProperty=function(localePackName,property){var localePackDef=localePacksDict[localePackName];if(!localePackDef){return null;}
return localePackDef[property];};var getLocalePackURLs=function(name){var url=getLocalePackProperty(name,"url");if(!url||url.length===0){return null;}
if(!Ext.isArray(url)){url=[url];}
if(urlAppendDict[name]){url=url.concat(urlAppendDict[name]);}
var urls=[];Ext.each(url,function(u){urls.push(u);});return urls;};return{isMessageKeyEnabled:function(){return messageKeyEnabled;},defineLocalePacks:function(defs,override){if(Ext.isArray(defs)){Ext.each(defs,function(lp){defineLocalePack(lp,override);});}
else{defineLocalePack(defs,override);}},appendLocalePackURL:function(name,urls){var d=urlAppendDict[name];if(!d){d=[];urlAppendDict[name]=d;}
if(!Ext.isArray(urls)){urls=[urls];}
Ext.each(urls,function(url){logger.logTrace("[Dispatch] Adding to 'append' URLs for locale pack '"+name+"': "+url);d.push(url);});},includeLocalePack:function(name,callback,scope){logger.logDebug("[Dispatch] Including locale pack: "+name);var urls=getLocalePackURLs(name);if(Ext.isFunction(callback)){var bindedCallback=Ext.bind(callback,scope);RP.util.ScriptLoader.load(urls,bindedCallback,bindedCallback);}
else{RP.util.ScriptLoader.load(urls,Ext.emptyFn,Ext.emptyFn);}},setMessages:function(nameSpace,messagesObj){if(nameSpace===null){nameSpace="";}
if(nameSpace.length>0&&nameSpace.lastIndexOf('.')!=nameSpace.length-1){nameSpace+=".";}
var value;for(var property in messagesObj){value=messagesObj[property];if(typeof(value)==="string"){msgDict[nameSpace+property]=value;}}},getMessage:function(name){if(typeof msgDict[name]==="undefined"){logger.logError("[Dispatch] Message not found: "+name);if(Ext.isDefined(RP.globals.getValue("SERVER_TYPE"))&&RP.globals.getValue("SERVER_TYPE").toUpperCase()==="TEST"){RP.throwError("Message ID "+name+" was not found in the loaded message packs.");}}
var message=(msgDict[name]||name);if(messageKeyEnabled){message=Ext.String.format('<span title="{0}">{1}</span>',name,message);}
return message;},waitForMessageLoaded:function(msg,fn,time){time=(time+100)||100;try{var message=this.getMessage(msg);if(message!==msg||time>=3000){fn.call();return;}}catch(e){}
Ext.defer(this.waitForMessageLoaded,100,this,[msg,fn,time]);}};}();RP.getMessage=RP.locale.Dispatch.getMessage;
Ext.ns("RP");RP.Ajax=Ext.Ajax;Ext.apply(RP.Ajax,{defaultHeaders:null,activeRequests:0,displayExceptionDialog:function(status,errorMessage,callback){var template="{0}<br /><br /> {1}<br />({2}: {3})";if(!RP.REFSExceptionCodes){RP.REFSExceptionCodes={OK:0};}
var dialogMessage="";if(status>RP.REFSExceptionCodes.OK){dialogMessage=RP.getMessage("rp.common.exception.dialogMessage");}
else if(status<RP.REFSExceptionCodes.OK){dialogMessage=RP.getMessage("rp.common.exception.dialogUnexpectedMessage");}
Ext.Msg.alert(RP.getMessage("rp.common.exception.dialogTitle"),Ext.String.format(template,dialogMessage,errorMessage,RP.getMessage("rp.common.exception.dialogStatusLabel"),status),callback);},requestWithTextParams:function(params){RP.util.DeprecationUtils.logStackTrace("[DEPRECATED] RP.Ajax.requestWithTextParams is deprecated. Please use RP.Ajax.request(params);");Ext.Ajax.request(params);},requestWithJSONParams:function(params){RP.util.DeprecationUtils.logStackTrace("[DEPRECATED] RP.Ajax.requestWithJSONParams is deprecated. Please use RP.Ajax.request(params);");Ext.Ajax.request(params);},isUserHandlingException:function(options){if(options.disableExceptionHandling===true){return true;}
if(options.operation&&options.operation.disableExceptionHandling===true){return true;}
return false;}});RP.Ajax.addEvents("applicationrequestexception","sessionterminated");Ext.Ajax.on('requestexception',function(conn,response,options){Ext.Ajax.activeRequests--;if(window.leavingPage){return;}
var urlMsg=options.CallMethod?"Proxy to "+options.CallMethod:options.url;logger.logError(Ext.String.format("<br /><span style='padding-left: 3em'>Failed - URL: {0}</span><br /><span style='padding-left: 3em'> Parameters: {1}</span> <br /><span style='padding-left: 3em'>Status Text: {2}</span>",urlMsg,options.params,response.statusText));var responseObject=Ext.JSON.decode(response.responseText,true);var status=response.status;if(!Ext.isEmpty(responseObject)&&!Ext.isEmpty(responseObject.status)){status=responseObject.status;}
var exceptionMessageIdRoot="rp.common.exception.";var messageId=RP.REFSExceptionMessages[status];if(Ext.isEmpty(messageId)){messageId="GENERAL_EXCEPTION";}
if(status===RP.REFSExceptionCodes.CONNECTION_SESSION_REVOKED_EXCEPTION){var callback=RP.util.Helpers.logout;Ext.Msg.alert(RP.getMessage("rp.common.login.SessionErrorTitle"),RP.getMessage(exceptionMessageIdRoot+messageId),callback);}
else if(!Ext.Ajax.isUserHandlingException(options)){Ext.Ajax.displayExceptionDialog(status,RP.getMessage(exceptionMessageIdRoot+messageId));}});Ext.Ajax.on('beforerequest',function(conn,config){Ext.Ajax.activeRequests++;});Ext.Ajax.on('requestcomplete',function(conn,response,options){Ext.Ajax.activeRequests--;if(window.location.pathname.indexOf(RP.globals.getPath('LOGIN'))===-1&&Ext.isFunction(response.getResponseHeader)&&response.getResponseHeader("authenticated")&&response.getResponseHeader("authenticated")=="false"){Ext.Ajax.fireEvent("sessionterminated");}
if(!RP.REFSExceptionCodes){return;}
try{var responseObj=Ext.JSON.decode(response.responseText,true);if(responseObj===null){logger.logError("An error occurred trying to parse the response as JSON.");}
else{response.responseObject=responseObj;var status=responseObj.status;if(status!==RP.REFSExceptionCodes.OK){logger.logError("Ajax response error: "+responseObj.message);var handleException=true;if(status===RP.REFSExceptionCodes.HTTP_PROXY_EXCEPTION){handleException=Ext.Ajax.fireEvent("applicationrequestexception",conn,response,options);}
if(handleException&&!Ext.Ajax.isUserHandlingException(options)){var messageId=RP.REFSExceptionMessages[status];Ext.Ajax.displayExceptionDialog(status,RP.getMessage("rp.common.exception."+messageId));}}}}
catch(e){logger.logError("An error occurred while handling the response.");logger.logError(e);}});
Ext.define("RP.Math",{singleton:true,roundDecimal:function(cValue,iScale){var iMultiplier=Math.pow(10,iScale);cValue=(Math.round((cValue*(iMultiplier*10))/10)/iMultiplier);return cValue;}});
Ext.define("RP.String",{singleton:true,contains:function(string,value){return string.indexOf(value)!==-1;}});
Ext.applyIf(Ext,{isMobileSafari:function(){return navigator.userAgent.toLowerCase().indexOf("mobile")!==-1&&Ext.isSafari;}(),isIEDocMode:function(modeNumber){return Ext.isIE&&document.documentMode==modeNumber;}});
Ext.define("RP.FiscalDatePicker",{extend:"Ext.picker.Date",alias:"widget.rpfiscaldatepicker",width:212,initComponent:function(){if(Ext.isNumber(RP.globals.getValue("CALENDAR").startDayOfWeek)){this.startDay=RP.globals.getValue("CALENDAR").startDayOfWeek;}
this.callParent();},onRender:function(){this.callParent(arguments);if(Ext.isEmpty(RP.globals.getValue("CALENDAR").fiscalPeriods)){return;}
this.addCls("rp-fiscal-date-picker");var table=this.el.down(".x-datepicker-inner");var headerMarkup="<th><span>{0}</span></th>";var weekHeader=RP.getMessage("rp.common.components.fiscalDatePicker.weekHeader");var headerRow=table.down("tr");headerRow.insertHtml("afterBegin",Ext.String.format(headerMarkup,weekHeader));var rowMarkup='<td><a class="rp-fiscal-week" href="#" hidefocus="on" tabIndex="1"><em><span></span></em></a></td>';var rows=table.select("tbody>tr");rows.each(function(row,composite,index){row.insertHtml("afterBegin",rowMarkup);});this.weekCells=table.select(".rp-fiscal-week");this.mon(this.eventEl,"click",this.onFiscalWeekClick,this,{delegate:".rp-fiscal-week"},this);},update:function(date){this.callParent(arguments);if(!this.weekCells){return;}
this.convertFiscalPeriodsToDates();var fiscalPeriods=RP.globals.getValue("CALENDAR").fiscalPeriods;this.renderWeekNumber(fiscalPeriods);},convertFiscalPeriodsToDates:function(){var fiscalPeriods=RP.globals.getValue("CALENDAR").fiscalPeriods;if(Ext.isDate(fiscalPeriods[0].startDate)){return;}
Ext.each(fiscalPeriods,function(fiscalPeriod){fiscalPeriod.startDate=new Date(fiscalPeriod.startDate);fiscalPeriod.endDate=new Date(fiscalPeriod.endDate);});},findFiscalPeriod:function(fiscalPeriods,dates){for(var i=0;i<dates.getCount();i++){var date=new Date(dates.item(i).dom.dateValue);for(var j=0;j<fiscalPeriods.length;j++){if(RP.Date.between(date,fiscalPeriods[j].startDate,fiscalPeriods[j].endDate)){return{fiscalPeriodIdx:j,beginWeek:date};}}}
return{fiscalPeriodIdx:null,beginWeek:null};},renderWeekNumber:function(fiscalPeriods){for(var i=0;i<this.weekCells.getCount();i++){var weekNumber="&nbsp;";var weekCell=this.weekCells.item(i);var dates=weekCell.parent().parent().select("."+this.baseCls+"-date");var fiscalContext=this.findFiscalPeriod(fiscalPeriods,dates);var beginOfWeek=fiscalContext.beginWeek;var fiscalPeriodIdx=fiscalContext.fiscalPeriodIdx;if(fiscalPeriodIdx!==null){var fiscalPeriod=fiscalPeriods[fiscalPeriodIdx];var offset=Ext.Date.getDayOfYear(fiscalPeriod.startDate);var weekOffset=this.determineBeginningOfYearWeekOffset(this.startDay,fiscalPeriod);var isLeapYear=Ext.Date.isLeapYear;var dayOfYear=Ext.Date.getDayOfYear(beginOfWeek);if(dayOfYear<offset){dayOfYear+=365+(isLeapYear(fiscalPeriod.startDate)||isLeapYear(fiscalPeriod.endDate)?1:0);}
weekNumber=Math.floor((dayOfYear-offset)/7)+1+weekOffset;if(this.endOfFiscalYearInRow(weekCell.parent(),fiscalPeriod)&&this.startOfFiscalYearInRow(weekCell.parent(),fiscalPeriods[fiscalPeriodIdx+1])){weekNumber+="/1";}
else if(this.startOfFiscalYearInRow(weekCell.parent(),fiscalPeriods[fiscalPeriodIdx])){weekNumber="1";}}
weekCell.down("span").update(weekNumber.toString());}},determineBeginningOfYearWeekOffset:function(startDayOfWeek,fiscalPeriod){var dayOfWeek=fiscalPeriod.startDate.getDay();if(startDayOfWeek!=dayOfWeek){return 1;}
return 0;},_checkFiscalYear:function(weekRow,fiscalPeriod,checkFn){var dates=weekRow.parent().select("."+this.baseCls+"-date");if(fiscalPeriod){for(var i=0;i<dates.getCount();i++){var currentDateTime=dates.item(i).dom.dateValue;if(checkFn.call(this,fiscalPeriod,currentDateTime)){return true;}}}
return false;},endOfFiscalYearInRow:function(weekRow,fiscalPeriod){return this._checkFiscalYear(weekRow,fiscalPeriod,function(fiscalPeriod,dateTime){if(fiscalPeriod.endDate.getTime()===dateTime){return true;}
return false;});},startOfFiscalYearInRow:function(weekRow,fiscalPeriod){return this._checkFiscalYear(weekRow,fiscalPeriod,function(fiscalPeriod,dateTime){if(fiscalPeriod.startDate.getTime()===dateTime){return true;}
return false;});},onFiscalWeekClick:function(event,target){this.handleDateClick(event,Ext.fly(target).parent().next().down("."+this.baseCls+"-date").dom);}});
RP.TimeSpan=function(ms){this.ms=ms;};RP.TimeSpan.prototype.plus=function(ts){if(ts.ms){return new RP.TimeSpan(this.ms+ts.ms);}
return this;};RP.TimeSpan.prototype.minus=function(ts){if(ts.ms){return new RP.TimeSpan(this.ms-ts.ms);}
return this;};RP.TimeSpan.prototype.getTotalMilliseconds=function(){return this.ms;};RP.TimeSpan.prototype.totalMilliseconds=function(){return this.getTotalMilliseconds();};RP.TimeSpan.prototype.totalSeconds=function(){return this.getTotalMilliseconds()/1000.0;};RP.TimeSpan.prototype.totalMinutes=function(){return this.getTotalMilliseconds()/60000.0;};RP.TimeSpan.prototype.totalHours=function(){return this.getTotalMilliseconds()/3600000.0;};RP.TimeSpan.prototype.totalDays=function(){return this.getTotalMilliseconds()/86400000.0;};
Ext.define("RP.ux.Store",{extend:"Ext.data.Store",isLoaded:false,constructor:function(config){this.callParent(arguments);if(config.trackDeletedRecords){this._deletedRecords=[];this.on("remove",function(store,rec,index){this._deletedRecords.push(rec);},this);this.on("load",function(){delete this._deletedRecords;this._deletedRecords=[];},this);}
this.on("load",function(){this.isLoaded=true;},this);},getDeletedRecords:function(){return this._deletedRecords;}});
Ext.define("Ext.ux.IFrameComponent",{extend:"Ext.Component",initComponent:function(){this.autoEl={tag:"iframe",frameborder:0,src:this.url};this.callParent();},load:function(url){this.getEl().dom.src=url||this.url;}});
Ext.define("RP.form.DateField",{extend:"Ext.form.field.Date",alias:["widget.rpdatefield","RP.ui.DateField"],initComponent:function(){if(!this.initialConfig.invalidText){Ext.apply(this,{invalidText:RP.getMessage("rp.common.misc.InvalidDate")});}
this.callParent();},createPicker:function(){var picker=this.callParent();if(this.showFiscal===true){picker=Ext.create("RP.FiscalDatePicker",picker.initialConfig);}
return picker;}});
Ext.define("RP.form.DirectionalDateField",{extend:"Ext.form.FieldContainer",alias:["widget.rpdatepicker","RP.ui.DatePicker"],initComponent:function(){this._state={};this._state.dayInterval=this.initialConfig.dayInterval||1;this.addEvents("select");this._lastSelectedValue=this.initialConfig.value;var staticConfig={xtype:"rpdatefield",width:120,allowBlank:false,hideLabel:true,enableKeyEvents:true,checkChangeEvents:["change"],value:this.initialConfig.value,disabled:this.initialConfig.disabled,maxValue:this.initialConfig.maxValue,emptyText:this.initialConfig.emptyText||RP.getMessage("rp.common.misc.EmptyDateText"),listeners:{"keydown":{scope:this,fn:function(datepicker,e){var key=e.getKey();if(key===e.ENTER||key===e.TAB){var enteredDate=this._state.dateField.parseDate(this._state.dateField.getRawValue());if(enteredDate){this._state.dateField.setValue(enteredDate);}
if(this._checkDateValueChanged(this._lastSelectedValue,datepicker.getValue())){datepicker.fireEvent("select");document.body.focus();}}}},"blur":{scope:this,fn:function(datepicker,e){if(this._checkDateValueChanged(this._lastSelectedValue,datepicker.getValue())){datepicker.fireEvent("select");document.body.focus();}}},"change":{scope:this,fn:function(datepicker,e){if(this._checkDateValueChanged(this._lastSelectedValue,datepicker.getValue())){datepicker.fireEvent("select");document.body.focus();}}}}};Ext.applyIf(staticConfig,this.initialConfig);this._state.dateField=Ext.ComponentMgr.create(staticConfig);this._state.dateField.blankText=RP.getMessage("rp.common.misc.MissingDate");this._state.dateField.on("select",function(df,date){var parsedDate=RP.Formatting.Dates.parse(this._state.dateField.getRawValue(),RP.core.Formats.Date.Medium);if((typeof(date)==="object")||!isNaN(parsedDate)){var newDate=this._state.dateField.getValue();if((!Ext.isDate(this._lastSelectedValue)&&Ext.isDate(newDate))||(Ext.isDate(newDate)&&newDate.getTime()!==this._lastSelectedValue.getTime())){this.fireEvent("select",this,newDate);this._lastSelectedValue=RP.Date.clone(newDate);}}},this);this._state.dateField.safeParse=function(value,format){if(/[gGhH]/.test(format.replace(/(\\.)/g,''))){return RP.Date.parseDate(value,format);}
var parsedDate=Ext.Date.parse(value+' '+this.initTime,format+' '+this.initTimeFormat);if(parsedDate){return RP.Date.clearTime(parsedDate);}};if(!Ext.isDefined(this.fieldLabel)){this.width=144;}
Ext.apply(this,{cls:this.initialConfig.cls||'rp-datepicker',disabledCls:"",layout:"hbox",items:this._getDatePickerItems()});if(Ext.isDefined(this.extraCls)){this.addClass(this.extraCls);}
this.callParent();},disable:function(){this.callParent();Ext.iterate(this.items.keys,function(key){Ext.getCmp(key).disable();});this._state.dateField.disable();},enable:function(){this.callParent();Ext.iterate(this.items.keys,function(key){Ext.getCmp(key).enable();});this._state.dateField.enable();},forward:function(){var date=this.getValue();if(Ext.isDate(date)){date=RP.Date.addDays(date,this._state.dayInterval);this.setValue(date);}},backward:function(){var date=this.getValue();if(Ext.isDate(date)){date=RP.Date.addDays(date,-this._state.dayInterval);this.setValue(date);}},getDateFieldComponent:function(){return this._state.dateField;},setValue:function(val){this._state.dateField.setValue(val);this._lastSelectedValue=val;},getValue:function(){return this._state.dateField.getValue();},_checkDateValueChanged:function(originalDate,newDate){if(!Ext.isDate(originalDate)){return true;}
var originalMS=originalDate.getTime();var newDateMS=Ext.isDate(newDate)?newDate.getTime():originalDate.getTime();return originalMS-newDateMS!==0;},_getDatePickerItems:function(){var items=[];if(this._useNextPreviousButtons()){items.push(this._getNextPreviousButton('previous'));}
items.push(this._state.dateField);if(this._useNextPreviousButtons()){items.push(this._getNextPreviousButton('next'));}
return items;},_getNextPreviousButton:function(direction){var iconCls=direction==='next'?'rp-next-btn':'rp-prev-btn';var handler=direction==='next'?this.forward:this.backward;return{xtype:"button",width:22,iconCls:iconCls,cls:"rp-raised-btn",scope:this,handler:handler};},_useNextPreviousButtons:function(){if(typeof this.initialConfig.useNextPreviousButtons!=='undefined'){if(!this.initialConfig.useNextPreviousButtons){return false;}}
return true;}});
Ext.define('RP.data.model.Format',{extend:'Ext.data.Model',fields:['format','display']});
Ext.ns("RP.menu");Ext.define("RP.menu.DateMenu",{extend:"Ext.menu.DatePicker",initComponent:function(){var me=this;Ext.apply(me,{showSeparator:false,plain:true,border:false,bodyPadding:0,items:Ext.applyIf({cls:Ext.baseCSSPrefix+'menu-date-item',id:me.pickerId,xtype:this.showFiscal===true?'rpdatepicker':'datepicker'},me.initialConfig)});me.callParent(arguments);me.picker=me.down('datepicker');me.relayEvents(me.picker,['select']);if(me.hideOnClick){me.on('select',me.hidePickerOnSelect,me);}}});
Ext.ns("RP.interfaces");RP.interfaces.ITaskContext={_name:"ITaskContext",getConfig:Ext.emptyFn,subscribeStatusChange:Ext.emptyFn,unsubscribeStatusChange:Ext.emptyFn,fireStatusChange:Ext.emptyFn,getLocalContext:Ext.emptyFn};
Ext.ns("RP.interfaces");RP.interfaces.ITaskflow2={_name:"ITaskflow2",getTaskflowUIConfig:Ext.emptyFn,addInitListener:Ext.emptyFn,addPostInitListener:Ext.emptyFn,addTaskflowStartListener:Ext.emptyFn,addTaskCompletedListener:Ext.emptyFn,addTaskflowCompletedListener:Ext.emptyFn,setRebuildHandler:Ext.emptyFn,rebuild:Ext.emptyFn,isInitialized:Ext.emptyFn,isCompleted:Ext.emptyFn,initTaskflow:Ext.emptyFn,getTaskflowContext:Ext.emptyFn,mergeTaskflowContext:Ext.emptyFn,getTaskflowDescription:Ext.emptyFn,setTaskflowDescription:Ext.emptyFn,getDefaultTaskId:Ext.emptyFn,getTaskflowRoster:Ext.emptyFn,getTaskMetadata:Ext.emptyFn,createTaskWidgetConfig:Ext.emptyFn,startTaskflow:Ext.emptyFn,updateStatus:Ext.emptyFn,isTaskCompleted:Ext.emptyFn,setTaskCompleted:Ext.emptyFn,getTaskConfig:Ext.emptyFn};
Ext.ns("RP.interfaces");RP.interfaces.ITaskflowContainer2={_name:"ITaskflowContainer",getTaskflowName:Ext.emptyFn,ensureTaskflowInitialized:Ext.emptyFn,getTaskflow:Ext.emptyFn,onDeactivated:Ext.emptyFn,activateDefaultWidget:Ext.emptyFn,onWidgetClick:Ext.emptyFn,getWidgetByID:Ext.emptyFn,setBeforeAppActivateHandler:Ext.emptyFn,addApplicationActivatedHandler:Ext.emptyFn,addTaskflowCreationListener:Ext.emptyFn,removeTaskflowCreationListener:Ext.emptyFn,addTaskflowAbortHandler:Ext.emptyFn,setRebuildTaskflowHandler:Ext.emptyFn,getActiveWidget:Ext.emptyFn};
Ext.ns("RP.interfaces");RP.interfaces.IPrintSource={_name:"IPrintSource",getMarkupForPrinting:Ext.emptyFn};
Ext.ns("RP.interfaces");RP.interfaces.ITaskForm={_name:"ITaskForm",onActivate:Ext.emptyFn,onBeforeDeactivate:Ext.emptyFn,onDeactivate:Ext.emptyFn,setUrlHash:Ext.emptyFn,getUrlHash:Ext.emptyFn};
Ext.ns("RP.interfaces");RP.interfaces.ITaskWidget={_name:"ITaskWidget",setTaskId:Ext.emptyFn,getTaskId:Ext.emptyFn,setTaskflow:Ext.emptyFn,getTaskflow:Ext.emptyFn,initializeLocalContext:Ext.emptyFn,getEnabled:Ext.emptyFn,setEnabled:Ext.emptyFn,createTaskForm:Ext.emptyFn,getTaskForm:Ext.emptyFn,raiseWidgetClick:Ext.emptyFn,subscribeWidgetClick:Ext.emptyFn,unsubscribeWidgetClick:Ext.emptyFn,raiseWidgetChange:Ext.emptyFn,subscribeWidgetChange:Ext.emptyFn,unsubscribeWidgetChange:Ext.emptyFn,getTaskContext:Ext.emptyFn,setTaskContext:Ext.emptyFn,setActive:Ext.emptyFn};
Ext.define('RP.layout.Flow',{extend:'Ext.layout.container.Auto',alias:'layout.rp.flow',itemCls:'rp-flowlayout-item',initLayout:function(){this.callParent(arguments);this.owner.addCls('rp-flowlayout');}});
Ext.define('RP.layout.Anchor',{extend:'Ext.layout.container.Anchor',alias:'layout.rp.anchor',itemCls:'rp-flowlayout-item',initLayout:function(){this.callParent(arguments);this.owner.addCls('rp-flowlayout');}});
Ext.define('RP.layout.Table',{extend:'RP.layout.Anchor',alias:'layout.rp.table',columns:1,constrainColumns:true,setColumns:function(columns){this.columns=columns;this.owner.doLayout();},initLayout:function(){this.callParent(arguments);this.calculatedColumns=this.columns;},renderChildren:function(){if(!Ext.isEmpty(this.minWidth)){this.calculatedColumns=this._calculateColumns();}
this.callParent(arguments);},configureItem:function(item){item.anchor=this._getAnchor(item.colspan||1,item.anchor);this.callParent(arguments);},calculate:function(ownerContext){if(!Ext.isEmpty(this.minWidth)&&this._calculateColumns()!==this.calculatedColumns){ownerContext.invalidate();}
this.callParent(arguments);},_calculateColumns:function(){return Ext.Number.constrain(Math.floor(this.owner.getWidth()/this.minWidth),1,this.columns);},_getAnchor:function(colspan,current){if(this.constrainColumns){colspan=Math.min(colspan,this.calculatedColumns);}
var anchor=Math.floor((100*colspan)/this.calculatedColumns)+'%';if(!Ext.isEmpty(current)){var terms=current.split(' ');if(!Ext.isEmpty(terms[1])){anchor+=' '+terms[1];}}
return anchor;}});
Ext.ns("RP.collections");Ext.define("RP.collections.MixedCollection",{extend:"Ext.util.MixedCollection",maxSize:undefined,constructor:function(config){this.callParent(arguments);if(config){if(typeof config.maxSize==="number"){this.maxSize=config.maxSize;this.on("add",function(index,o,key){if(this.length>this.maxSize){this.removeAt(0);}},this);}}},keyOf:function(item){for(var key in this.map){if(this.map[key]===item){return key;}}
return null;},trimAt:function(index){if(index<this.length&&index>=0){var count=this.length-index;this.items.splice(index,count);this.keys.splice(index,count);this.length-=count;}}});
Ext.namespace("RP.collections");RP.collections.Stack=function(){this._s=[];};RP.collections.Stack.prototype={push:function(){this._s.push.apply(this._s,arguments);},pop:function(){var v=this.popn(1);if(v.length>0){return v[0];}
return null;},popn:function(n){n=n||1;n=Math.min(n,this._s.length);if(n>0){return this._s.splice(this._s.length-n,n).reverse();}
return[];},peek:function(){var v=this.peekn(1);if(v.length>0){return v[0];}
return null;},peekn:function(n){n=n||1;n=Math.min(n,this._s.length);if(n>0){return this._s.slice(this._s.length-n,this._s.length).reverse();}
return[];},clear:function(){this._s=[];},count:function(){return this._s.length;},countUntil:function(item){for(var i=this._s.length-1;i>=0;i--){if(this._s[i]===item){return(this._s.length-i-1);}}
return-1;},contains:function(item){return(this.countUntil(item)>=0);}};
Ext.define('RP.panel.plugin.HeaderComponent',{extend:'Ext.AbstractPlugin',center:true,removeTopBottomPadding:true,adjusting:false,constructor:function(config){Ext.apply(this,config);if(!this.item){RP.throwError('An item must be configured.');}
this.item=Ext.ComponentManager.create(this.item);},init:function(panel){this.cmp=panel;panel.on('afterrender',this.addItemToHeader,this);},getItem:function(){return this.item;},addItemToHeader:function(panel){var header=panel.header;if(this.center){this.spacer=new Ext.Component();header.on('resize',this.adjustSpacer,this);header.insert(1,[this.item,this.spacer]);}
else{header.add(this.item);}
if(this.removeTopBottomPadding){header.el.setStyle('padding-top',0);header.el.setStyle('padding-bottom',0);}},adjustSpacer:function(header,width,height,options){if(this.adjusting===false){this.adjusting=true;var actualWidth=header.el.getWidth(true);var spacerSize=actualWidth/2;spacerSize-=this.getTotalToolWidth(header);spacerSize-=this.item.el.getWidth()/2;this.spacer.setWidth(spacerSize);this.adjusting=false;}},getTotalToolWidth:function(header){var total=0;header.items.each(function(tool){if(tool instanceof Ext.panel.Tool){total+=tool.getWidth()+2;}});return total;},destroy:function(){this.cmp.un('afterrender',this.addItemToHeader,this);this.cmp.header.un('resize',this.adjustSpacer,this);this.cmp=null;this.item=null;}});
Ext.ns('RP.util');Ext.define('RP.util.BreadCrumbTrail',{mixins:{observable:'Ext.util.Observable'},constructor:function(config){Ext.apply(this,config);this.breadCrumbs=new RP.collections.MixedCollection();this.mixins.observable.constructor.call(this,config);this.addEvents('add','clear','navigate','beforenavigate');},add:function(breadCrumb){this.breadCrumbs.add(breadCrumb);breadCrumb.on('activate',function(){this.navigate(breadCrumb);},this);this.fireEvent('add',this,breadCrumb);},navigate:function(breadCrumb){var idx=this.breadCrumbs.getCount()-1,limit=this.breadCrumbs.indexOf(breadCrumb),toRemove=[];for(;idx>limit;--idx){toRemove.push(this.breadCrumbs.getAt(idx));}
if(this.fireEvent('beforenavigate',this,breadCrumb,toRemove)===false){return;}
for(idx=0,limit=toRemove.length;idx<limit;++idx){toRemove[idx].un('activate',this.navigate,this);this.breadCrumbs.remove(toRemove[idx]);}
this.fireEvent('navigate',this,breadCrumb);},getCount:function(){return this.breadCrumbs.getCount();},getBreadCrumbs:function(){return this.breadCrumbs;},clear:function(){this.breadCrumbs.each(function(breadCrumb){breadCrumb.un('activate',this.navigate,this);});this.breadCrumbs.clear();this.fireEvent('clear');}});
Ext.define("RP.util.CardBreadCrumbTrail",{extend:"RP.util.BreadCrumbTrail",spacerCfg:{xtype:"box",autoEl:{tag:"span",html:"&nbsp;&gt;&gt;&nbsp;"}},add:function(breadCrumb){this.callParent(arguments);var card=breadCrumb.getCard();var layout=this.cardContainer.getLayout();this.cardContainer.add(card);var index=this.cardContainer.items.indexOf(card);if(Ext.isString(layout)){this.cardContainer.activeItem=index;}
else{layout.setActiveItem(index);}
this.renderBreadCrumbs(true);},navigate:function(breadCrumb){this.callParent(arguments);var card=breadCrumb.getCard();var lastIndex=this.cardContainer.items.length-1;while(this.cardContainer.items.get(lastIndex-1)!=card){lastIndex--;}
var index=this.cardContainer.items.indexOf(card);this.cardContainer.getLayout().setActiveItem(index);while(lastIndex<this.cardContainer.items.length){this.cardContainer.remove(this.cardContainer.items.get(lastIndex));}
this.renderBreadCrumbs(false);},renderBreadCrumbs:function(adding){if(!this.crumbContainer.rendered){this.crumbContainer.on("render",Ext.bind(this.renderBreadCrumbs,this,[adding]));return;}
if(adding){if(this.breadCrumbs.getCount()>1){this.crumbContainer.add(this.spacerCfg);}
this.crumbContainer.add(this.breadCrumbs.last());}
else{var current;while((current=this.crumbContainer.items.last())!=this.breadCrumbs.last()){this.crumbContainer.remove(current);}}
this.crumbContainer.doLayout();this.deactiveateLastCrumb();},deactiveateLastCrumb:function(){this.breadCrumbs.each(function(crumb){if(crumb==this.breadCrumbs.last()){crumb.deactivate();}
else{crumb.reactivate();}},this);}});
Ext.define('RP.util.Component',{singleton:true,getTopLevelContainer:function(cmp){if(!cmp.ownerCt){return null;}
var top=cmp;for(;;){if(!top.ownerCt){break;}else{top=top.ownerCt;}}
return top;},getComponentFromElement:function(el){var component;while(!component&&el){component=Ext.getCmp(el.id);if(!component){el=el.up('[id]');}}
return component;}});
Ext.ns("RP.util");RP.util.Object=(function(){return{mergeProperties:function(){var obj={};for(var i=0;i<arguments.length;i++)
{var currObj=arguments[i]||{};for(var property in currObj)
{obj[property]=currObj[property];}}
return obj;}};})();RP.mergeProperties=RP.util.Object.mergeProperties;
Ext.ns("RP.util");RP.util.DOM=(function(){return{getOuterHTML:function(obj){var element;if(!obj)
{return null;}
element=document.createElement("div");element.appendChild(obj.cloneNode(true));return element.innerHTML;}};})();
Ext.ns("RP.util");RP.util.Format=function(){return{longDescRenderer:function(namespace,colnam){return function(value){return RP.core.CodeTranslator.getLongDesc(namespace,colnam,value);};}};}();
Ext.ns("RP.util");RP.util.Task=(function(){var count=0;var PIDs={};return{processQueue:function(array,fn,context,taskName,config){if(array.length<1){return;}
Ext.applyIf(config,{batchSize:1,timeout:10,batchCompleteCB:Ext.emptyFn,successCB:Ext.emptyFn,stoppedCB:Ext.emptyFn});var a=array.concat();var idx=0;var pid=(++count);PIDs[taskName]=pid;setTimeout(function(){if(PIDs[taskName]!==pid){config.stoppedCB.call(context,pid);return;}
for(var i=0;i<config.batchSize&&a.length>0;i++){var item=a.shift();fn.call(context,item,idx++);}
config.batchCompleteCB.call(context,pid);if(a.length>0){setTimeout(arguments.callee,config.timeout);}
else{config.successCB.call(context,pid);}},config.timeout);return pid;}};})();
Ext.ns("RP.util");RP.util.Stopwatch=(function()
{var _watches=[];var listeners=[];function invokeListeners(){Ext.each(listeners,function(d){d();});}
return{getWatch:function(id,startNow,desc)
{var watch=_watches[id];if(!watch)
{watch=new RP.util.Stopwatch.StopWatch(id,desc);}
if(startNow)
{watch.start();}
return watch;},clearAll:function()
{_watches=[];invokeListeners();},report:function(div)
{var reportobj=[];for(var i in _watches)
{if(typeof(_watches[i])==='function'){continue;}
var child=_watches[i];reportobj.push(child.report(true));}
var realdiv=document.getElementById(div);if(realdiv)
{realdiv.innerHTML="<table class='padded-table' border='1'><thead><tr><th>ID</th><th>Total (s)</th><th>Count</th><th>Description</th></tr></thead><tbody>"+
reportobj.join('')+"</tbody></table>";}
else
{return reportobj.join('');}
return'';},StopWatch:function(id,desc)
{if(_watches[id])
{RP.throwError(id+" already exists");}
var count=0;var total=0;desc=desc||'N/A';var TimedEvent=function()
{var start=new Date();return{stop:function()
{var stop=new Date();this.duration=stop.getTime()-start.getTime();invokeListeners();}};};this.id=id;this.start=function()
{if(this.current)
{this.stop();}
this.current=new TimedEvent();};this.stop=function()
{if(this.current)
{this.current.stop();count++;total+=this.current.duration;this.current=null;invokeListeners();}};this.report=function(forTbl)
{if(forTbl)
{return"<tr><td>"+id+"</td><td>"+total/1000.0+"</td><td>"+count+"</td><td>"+desc+"</td></tr>";}
return"<div>StopWatch: <strong>"+id+"</strong> // "+"Total Duration: <strong>"+total/1000.0+"</strong> // "+"Count: <strong>"+count+"</strong></div>";};_watches[id]=this;return this;},addListener:function(handler){listeners.push(handler);},removeListener:function(handler){Ext.Array.remove(listeners,handler);}};})();
Ext.ns("RP.util");RP.util.Grid=(function(){return{processColumnModel:function(cmodel,config){logger.logWarning("The method processColumnModel is deprecated and should not be used.");var cm=[];Ext.each(cmodel,function(c)
{cm.push(RP.util.Object.mergeProperties(c));},this);if(cm&&cm.length)
{for(var i=0,len=cm.length;i<len;i++)
{var col=cm[i];if(!col.name)
{col.name='col_'+i;}
col.id=col.name;col.dataIndex=col.name;if(col.renderer)
{col.renderer=eval(col.renderer);}
if(col.editor&&typeof(col.editor)==="string")
{col.editor=eval(col.editor);}}}
return cm;}};})();
Ext.ns("RP.util");RP.util.Helpers=function(){var sessionExpired=false;Ext.onReady(function(){RP.event.AppEventManager.register(RP.upb.AppEvents.SessionReauthenticated,function(){sessionExpired=false;});RP.event.AppEventManager.register(RP.upb.AppEvents.SessionExpired,function(){sessionExpired=true;});});return{logout:function(){RP.util.Helpers.redirect(RP.globals.getFullyQualifiedPath("LOGOUT"));},redirect:function(url,millis){Ext.defer(function(){try{window.location.assign(url);}
catch(e){}},millis||0);},redirectToLogin:function(){RP.util.Helpers.redirect(RP.globals.getFullyQualifiedPath("LOGIN"));},isExternalAuthentication:function(){return RP.upb.PageBootstrapper.isExternallyAuthenticated();},isNativeLogin:function(){return RP.upb.PageBootstrapper.isNativeLogin();},reload:function(millis){Ext.defer(function(){window.location.reload();},millis||0);},markSessionForReAuthentication:function(){Ext.Ajax.request({url:RP.globals.getFullyQualifiedPath('REAUTHENTICATE')});},keepSessionAlive:function(lastActivityMillis){Ext.Ajax.request({url:RP.buildDataServiceUrl("rp","admin/sessionKeepAlive"),disableExceptionHandling:true,params:{lastActivity:lastActivityMillis||new Date().getTime()},success:function(){RP.event.AppEventManager.fire(RP.upb.AppEvents.KeepAliveSuccess,{});},failure:function(){RP.event.AppEventManager.fire(RP.upb.AppEvents.KeepAliveFailure,{});}});logger.logInfo("[Helpers] keepSessionAlive with lastActivityDate: "+lastActivityMillis);RP.event.AppEventManager.fire(RP.upb.AppEvents.KeepAlive,{});},isUserActive:function(successFn,failureFn,scope){Ext.Ajax.request({url:RP.buildDataServiceUrl("rp","admin/isUserActive"),failure:failureFn,success:successFn,scope:scope});},isSessionExpired:function(){return sessionExpired;},openWindow:function(url,name,options){logger.logInfo("[Helpers] Opening window to: "+url);var opt=[];options=options||{};name=name||new Date().getTime().toString();Ext.iterate(options,function(key,value){opt.push(String.format("{0}={1}",key,value?1:0));});return window.open(url,name,opt.toString());}};}();
Ext.ns("RP.util");RP.util.CSSLoader=(function(){var downloaded=[];var includeCSS=function(url){if(Ext.isEmpty(downloaded[url])){var h=document.getElementsByTagName("HEAD")[0];var css=document.createElement("link");css.type="text/css";css.href=url;css.rel="stylesheet";h.appendChild(css);logger.logInfo("[CSSLoader] Loading CSS: "+url);downloaded[url]=1;}};var urlTransform=function(url,prefix){prefix=prefix&&RP.globals&&!Ext.isEmpty(RP.globals.getPath("STATIC"));if(prefix&&(url.indexOf("://")===-1)&&url.indexOf(RP.globals.getPath("STATIC"))!==0){url=RP.globals.getPath("STATIC")+url;}
if(url&&url.indexOf("{client-mode}">=0)){url=url.replace(/\{client-mode\}/g,(RP.globals.getValue("CLIENTMODE")==="src"?"debug":RP.globals.getValue("CLIENTMODE")));}
return url;};return{load:function(urls,prefixStaticURL){if(Ext.isEmpty(urls)){return;}
if(!Ext.isArray(urls)){urls=[urls];}
Ext.each(urls,function(url){url=urlTransform(url,prefixStaticURL);includeCSS(url);});}};})();
Ext.ns("RP.util");RP.util.PageInactivityChecker=(function(){var handlers=[];var pollerID;var lastActivityTime;var timeOutSecs;var lastSessionKeepAlive;var sessionKeepAliveIntervalMillis=60000;var checkingUserActivity=false;var inactive=false;var activityEventNames=['keydown','mouseover','mousemove'];Ext.onReady(function(){RP.event.AppEventManager.register(RP.upb.AppEvents.ActiveAgain,function(){logger.logInfo("[PageInactivityChecker] Setting inactive flag to false.");inactive=false;});RP.event.AppEventManager.register(RP.upb.AppEvents.Inactive,function(){logger.logInfo("[PageInactivityChecker] Setting inactive flag to true.");inactive=true;});});var resetLastActivityTime=function(){lastActivityTime=new Date();};var resetLastSessionKeepAlive=function(){lastSessionKeepAlive=new Date();};var setHooks=function(timeOutInSecs){timeOutSecs=timeOutInSecs;lastActivityTime=new Date();lastSessionKeepAlive=new Date();Ext.each(activityEventNames,function(evtName){Ext.EventManager.on(document,evtName,resetLastActivityTime);});pollerID=window.setInterval(pollerFn,1000);logger.logInfo("[PageInactivityChecker] Inactivity checker started with timeout of "+timeOutSecs+" seconds.");};var releaseHooks=function(){if(pollerID){Ext.each(activityEventNames,function(evtName){Ext.EventManager.un(document,evtName,resetLastActivityTime);});window.clearInterval(pollerID);pollerID=undefined;logger.logInfo("[PageInactivityChecker] Inactivity checker stopped.");}};var triggerInactivityDialog=function(){checkingUserActivity=false;logger.logInfo("[PageInactivityChecker] Inactivity timeout occurred.");releaseHooks();Ext.each(handlers,function(h){h();});};var handleInactivityResponse=function(response,options){checkingUserActivity=false;var result=Ext.JSON.decode(response.responseText,true);if(result===null){releaseHooks();return;}
if(result&&Ext.isNumber(result.data)){var serverLastBrowserActivity=parseInt(result.data,10);var serverLastBrowserActivityElapsed=(new Date())-serverLastBrowserActivity;if(serverLastBrowserActivityElapsed>=(timeOutSecs*1000)){triggerInactivityDialog();return;}
if(lastActivityTime<serverLastBrowserActivity){lastActivityTime=serverLastBrowserActivity;}}
resetLastSessionKeepAlive();};var pollerFn=function(){var lastActivityElapsed=(new Date())-lastActivityTime;var lastSessionKeepAliveElapsed=(new Date())-lastSessionKeepAlive;if(lastActivityElapsed>=(timeOutSecs*1000)&&checkingUserActivity===false){RP.util.Helpers.isUserActive(handleInactivityResponse,triggerInactivityDialog,this);checkingUserActivity=true;}
else
if(lastSessionKeepAliveElapsed>=sessionKeepAliveIntervalMillis&&lastActivityElapsed<=sessionKeepAliveIntervalMillis){resetLastSessionKeepAlive();RP.util.Helpers.keepSessionAlive(lastActivityTime.getTime());}};return{_setSessionKeepAliveIntervalMillis:function(intervalMillis){sessionKeepAliveIntervalMillis=intervalMillis;},isInactive:function(){return inactive;},addHandler:function(h){logger.logTrace("[PageInactivityChecker] Adding page inactivity handler.");handlers.push(h);},getTimeOutInSeconds:function(){return timeOutSecs;},removeHandler:function(h){logger.logTrace("[PageInactivityChecker] Removing page inactivity handler.");Ext.Array.remove(handlers,h);},start:function(timeOutInSecs){if(pollerID){logger.logInfo("[PageInactivityChecker] Checker already started.");return false;}
setHooks(timeOutInSecs);return true;},stop:function(){releaseHooks();}};})();
Ext.define('RP.util.ConstructedMixin',{onClassMixedIn:function(cls){if(!(cls.prototype instanceof Ext.AbstractPlugin)){cls.prototype.constructor=(cls.prototype.constructor?Ext.Function.createSequence(cls.prototype.constructor,this.prototype.constructor):this.prototype.constructor);}}});
Ext.ns("RP.core");RP.core.ClassOperations={abstractFn:function(){RP.throwError("RP.abstractFn called directly.");}};RP.abstractFn=RP.core.ClassOperations.abstractFn;
Ext.ns("RP.core");RP.core.CodeTranslator=function(){Ext.define("RP.core.CodeTranslation",{extend:"Ext.data.Model",fields:[{name:'colnam'},{name:'colval'},{name:'lngdsc'},{name:'short_dsc'}]});return{getRowValue:function(namespace,colnam,value,field){var store=Ext.StoreMgr.get(namespace+"."+colnam);var index=store.findExact('colval',value);if(index>-1){value=store.getAt(index).get(field);}
return value;},loadData:function(namespace,data){Ext.each(data,function(item){var storeId=namespace+"."+item.colnam;var store=Ext.StoreMgr.get(storeId);if(typeof store==="undefined"){store=new Ext.data.Store({storeId:storeId,model:"RP.core.CodeTranslation",reader:"json"});}
store.loadData([item],true);});},loadCodePack:function(url){document.write('<script type="text/javascript" src="'+url+'"></script>');},getLongDesc:function(namespace,colnam,value){return this.getRowValue(namespace,colnam,value,"lngdsc");},getShortDesc:function(namespace,colnam,value){return this.getRowValue(namespace,colnam,value,"short_desc");},getStore:function(namespace,colnam){return Ext.StoreMgr.get(namespace+"."+colnam);}};}();
RP.core.Sundial={_offset:0,now:function(){return new Date(new Date().getTime()+this._offset);},setServerTime:function(offsetDate){this._offset=offsetDate.getTime()-(new Date()).getTime();},hasOffset:function(){return(this._offset!==0);}};
Ext.ns("RP.core");RP.core.Interface=(function(){var checkInterface=function(obj,theInterface,map){var omember;map=map||{};for(var member in theInterface){if(member!=="_name")
{omember=map[member]||member;if(typeof obj[omember]!==typeof theInterface[member])
{RP.throwError("Member '"+member+"' not implemented or implemented incorrectly in interface '"+theInterface._name+"'");}}}
return true;};var extractInterface=function(obj,iobj){var i={};var theInterface=iobj.i;var map=iobj.map;var omember;for(var member in theInterface){if(member!=="_name"){omember=map[member]||member;if(typeof obj[omember]==="function"){i[member]=Ext.bind(obj[omember],obj);}
else{i[member]=obj[omember];}}}
return i;};return{implement:function(classRef,theInterface,map){if(!theInterface._name){RP.throwError("Missing _name member in interface definition.");}
if((typeof classRef.prototype.__rpInterfaces!=="undefined")&&(typeof classRef.prototype.__rpInterfaces[theInterface._name]!=="undefined")){RP.throwError(theInterface._name+" has already been implemented for class "+classRef.toString());}
if(!checkInterface(classRef.prototype,theInterface,map)){RP.throwError("Interface not implemented.");}
if(!classRef.prototype.__rpInterfaces){classRef.prototype.__rpInterfaces={};}
classRef.prototype.__rpInterfaces[theInterface._name]={i:theInterface,map:Ext.apply({},map)};},get:function(obj,theInterface){if(!obj||!obj.__rpInterfaces){return undefined;}
var i=obj.__rpInterfaces[theInterface._name];if(!i){return undefined;}
return extractInterface(obj,i);}};})();RP.iimplement=RP.core.Interface.implement;RP.iget=RP.core.Interface.get;
Ext.ns("RP.core");RP.core.IntervalJN={getDuration:function(intervalJN){return RP.Date.deltaT(intervalJN.End,intervalJN.Start);},getCenter:function(intervalJN){return RP.Date.addMilliseconds(intervalJN.Start,(RP.Date.deltaT(intervalJN.End,intervalJN.Start).totalMilliseconds()/2));},containsTime:function(intervalJN,timePoint){return(timePoint.getTime()>=intervalJN.Start.getTime())&&(timePoint.getTime()<=intervalJN.End.getTime());},containsInterval:function(outerIntervalJN,innerIntervalJN2){return(RP.core.IntervalJN.containsTime(outerIntervalJN,innerIntervalJN2.Start))&&(RP.core.IntervalJN.containsTime(outerIntervalJN,innerIntervalJN2.End));},isOverlapping:function(intervalJN1,intervalJN2){return(RP.Date.isBefore(intervalJN1.Start,intervalJN2.End))&&(RP.Date.isAfter(intervalJN1.End,intervalJN2.Start));},isCoincident:function(intervalJN1,intervalJN2){return(RP.Date.equals(intervalJN1.Start,intervalJN2.Start)&&RP.Date.equals(intervalJN1.End,intervalJN2.End));},isContinuous:function(intervalJN1,intervalJN2){return(RP.Date.equals(intervalJN1.Start,intervalJN2.End)||RP.Date.equals(intervalJN1.End,intervalJN2.Start));},isPoint:function(interval){return RP.Date.equals(interval.Start,interval.End);},shiftByMinutes:function(intervalJN,minutesStart,minutesEnd){intervalJN.Start=RP.Date.addMinutes(intervalJN.Start,minutesStart);if((typeof minutesEnd==="undefined")||(minutesEnd===null)){intervalJN.End=RP.Date.addMinutes(intervalJN.End,minutesStart);}
else{intervalJN.End=RP.Date.addMinutes(intervalJN.End,minutesEnd);}},canScaleByMinutes:function(intervalJN,durationDiffMinutes){var origDuration=RP.core.IntervalJN.getDuration(intervalJN).totalMinutes();return(origDuration+durationDiffMinutes>0);},scaleByMinutes:function(intervalJN,durationDiffMinutes){if(!RP.core.IntervalJN.canScaleByMinutes(intervalJN,durationDiffMinutes)){RP.throwError("Invalid duration");}
RP.core.IntervalJN.shiftByMinutes(intervalJN,0,durationDiffMinutes);},cloneInterval:function(intervalJN){return{Start:RP.Date.clone(intervalJN.Start),End:RP.Date.clone(intervalJN.End)};},formatInterval:function(interval,formatObj){if(interval===null||interval.Start===null||interval.End===null){return"";}
if(!formatObj){formatObj=RP.core.Formats.Time.Default;}
return Ext.String.format("{0} - {1}",RP.Date.formatDate(interval.Start,formatObj),RP.Date.formatDate(interval.End,formatObj));},parseTimeAfterBase:function(strTime,baseDate){var amPmSpec=this._parseAmPmSpec(strTime);var retDate=RP.core.IntervalJN.parseTime(strTime,baseDate,true);var expectedHours=retDate.getHours();while(baseDate.getTime()>retDate.getTime()||!this._validateAmPmSpec(amPmSpec,retDate)){var hoursToAdd=12;if(RP.Formatting.Dates.is12HLocale()===false){hoursToAdd=24;}
retDate.setHours(retDate.getHours()+hoursToAdd);}
this.adjustForDST(retDate,expectedHours);return retDate;},parseTime:function(strTime,datePart,accept2400){var nextDay=false;var ind=strTime.indexOf(":");var hhmm=[];if(ind!==-1){hhmm=strTime.split(":");if(hhmm.length>1){if(hhmm[0]==="24"&&(parseInt(hhmm[1],10)!==0)){RP.throwError("Invalid time text");}}
if(parseInt(hhmm[0],10)>24){RP.throwError("Invalid time text");}
if(hhmm[0]==="24"){if(accept2400===true){nextDay=true;strTime="0:00";}
else{RP.throwError("24:00 cannot be used as the time");}}}
var retDate=RP.core.Format.parseTime(strTime);if(datePart instanceof Date){var newDate=RP.Date.clone(datePart);newDate.setHours(retDate.getHours(),retDate.getMinutes(),retDate.getSeconds());newDate.apExists=retDate.apExists;retDate=newDate;}
if(nextDay){retDate=RP.Date.addDays(retDate,1);}
return retDate;},_parseAmPmSpec:function(timeStr){var strTime=timeStr.toLowerCase();var meridiem=RP.Formatting.Dates.getUniqueLettersOfMeridiems();if(meridiem){if(strTime.indexOf(meridiem.am)!==-1){return meridiem.am;}
else if(strTime.indexOf(meridiem.pm)!==-1){return meridiem.pm;}}
return null;},_validateAmPmSpec:function(amPmSpec,time){var meridiem=RP.Formatting.Dates.getUniqueLettersOfMeridiems();if(meridiem){if((amPmSpec===meridiem.am)&&time.getHours()>=12){return false;}
if((amPmSpec===meridiem.pm)&&time.getHours()<12){return false;}}
return true;},parseTimeInterval:function(strInterval,datePart){var intervalText=String(strInterval);var times=intervalText.split("-");if(times.length!==2||Ext.String.trim(times[0]).length===0||Ext.String.trim(times[1]).length===0){RP.throwError("Invalid interval text specified");}
var endAmPmSpec=this._parseAmPmSpec(times[1]);var retInterval={Start:RP.core.IntervalJN.parseTime(times[0],datePart),End:RP.core.IntervalJN.parseTime(times[1],datePart,true)};var expectedHours=RP.core.IntervalJN.parseTime(times[1],datePart,true).getHours();if((retInterval.Start!==null)&&(retInterval.End!==null)){while(retInterval.Start.getTime()>=retInterval.End.getTime()||!this._validateAmPmSpec(endAmPmSpec,retInterval.End)){retInterval.End=RP.Date.addHours(retInterval.End,12);}
this.adjustForDST(retInterval.End,expectedHours);}
else{RP.throwError("Invalid interval text specified");}
return retInterval;},parseBusinessDayTimeInterval:function(strInterval,dateTimeStart){var retInterval=RP.core.IntervalJN.parseTimeInterval(strInterval,dateTimeStart);if(retInterval.Start<dateTimeStart&&dateTimeStart.getHours()===0){retInterval.Start=RP.Date.addDays(retInterval.Start,1);retInterval.End=RP.Date.addDays(retInterval.End,1);}
return retInterval;},adjustInterval:function(interval,offsetMinutes,offsetDuration){if(RP.core.IntervalJN.isValidOffset(offsetMinutes)){RP.core.IntervalJN.shiftByMinutes(interval,offsetMinutes);}
if(RP.core.IntervalJN.isValidOffset(offsetDuration)){RP.core.IntervalJN.scaleByMinutes(interval,offsetDuration);}},isValidOffset:function(number){return((typeof number!=="undefined")&&(number!==null)&&!isNaN(parseInt(number,10)));},compareDate:function(dt1,dt2){return dt1.getTime()-dt2.getTime();},compareStart:function(interval1,interval2){return(interval1.Start.getTime()-interval2.Start.getTime());},compareEnd:function(interval1,interval2){return(interval1.End.getTime()-interval2.End.getTime());},compareCenter:function(interval1,interval2){return(RP.core.IntervalJN.getCenter(interval1)-RP.core.IntervalJN.getCenter(interval2));},compareDuration:function(interval1,interval2){return(RP.core.IntervalJN.getDuration(interval1).getTotalMilliseconds()-RP.core.IntervalJN.getDuration(interval2).getTotalMilliseconds());},setParent:function(interval,parentSequence){interval.__parent=parentSequence;},getParent:function(interval){return interval.__parent;},setRule:function(interval,iRule){interval.__rule=iRule;},getRule:function(interval){return interval.__rule;},adjustForDST:function(endDateTime,expectedHours){var endHours=endDateTime.getHours()>=12?endDateTime.getHours()-12:endDateTime.getHours();expectedHours=expectedHours>=12?expectedHours-12:expectedHours;if(endHours!==expectedHours){if(endHours<expectedHours){endDateTime=RP.Date.addHours(endDateTime,1);}
else{endDateTime=RP.Date.addHours(endDateTime,-1);}}}};
Ext.ns("RP.core");RP.core.SequenceJN={addInterval:function(sequence,interval,iRule){var retSeq=[];var isDisplacmentAdd=false;if(sequence.Start&&sequence.End){isDisplacmentAdd=!RP.core.IntervalJN.containsInterval(sequence,interval);}
if(sequence.__isBounded&&isDisplacmentAdd){RP.throwError("interval is out of bounds for the bounded sequence");}
if(RP.core.IntervalJN.getParent(sequence)&&isDisplacmentAdd){RP.core.SequenceJN.removeInterval(RP.core.IntervalJN.getParent(sequence),sequence);}
sequence.__isSequence=true;RP.core.IntervalJN.setParent(interval,sequence);RP.core.IntervalJN.setRule(interval,iRule);var startIndex=RP.core.SequenceJN.getStartIndex(sequence,interval);var splitPair;for(var index=startIndex;index<=sequence.length;index++){splitPair=null;if(index===sequence.length){RP.core.SequenceJN._insertIntoSequence(sequence,interval,index);retSeq.push(interval);break;}
var curInterval=sequence[index];var curRule=RP.core.IntervalJN.getRule(curInterval);var nextInterval=this.getNextIntervalInSequence(sequence,index);var prevInterval=this.getPrevIntervalInSequence(sequence,index);var istart=interval.Start.getTime();if(istart>=curInterval.End.getTime()){continue;}
var cstart=curInterval.Start.getTime();if(istart<cstart){if(interval.End.getTime()<=cstart){RP.core.SequenceJN._insertIntoSequence(sequence,interval,index);retSeq.splice(index,0,interval);break;}
else if(iRule.canExtend&&iRule.canExtend(null,interval,curInterval)){interval=iRule.extend(null,interval,curInterval);RP.core.SequenceJN._insertIntoSequence(sequence,interval,index);retSeq.splice(index,0,interval);break;}
else if(iRule.canExtend&&iRule.canExtend(prevInterval,interval,null)){interval=iRule.extend(prevInterval,interval,null);index--;}
else if(curRule.canExtend&&curRule.canExtend(interval,curInterval,null)){curInterval=curRule.extend(interval,curInterval,null);sequence[index]=curInterval;retSeq.splice(index,0,curInterval);index--;}
else if(RP.core.SequenceJN._isUnboundedSequence(interval)){splitPair=this._splitSetParentAndRule(curRule,curInterval,interval.End,sequence);interval=iRule.merge(interval,splitPair.first);sequence.splice(index,1);RP.core.SequenceJN._insertIntoSequence(sequence,interval,index);sequence.splice(index+1,0,splitPair.last);break;}
else{splitPair=this._splitSetParentAndRule(iRule,interval,curInterval.Start,sequence);RP.core.SequenceJN._insertIntoSequence(sequence,splitPair.first,index);retSeq.splice(index,0,splitPair.first);interval=splitPair.last;}}
else if(RP.core.IntervalJN.compareStart(interval,curInterval)===0||curInterval.__isSequence)
{var compareEnd=RP.core.IntervalJN.compareEnd(interval,curInterval);if(RP.core.IntervalJN.compareDate(interval.Start,interval.End)===0){RP.core.SequenceJN._insertIntoSequence(sequence,interval,index);retSeq.splice(index,0,interval);break;}
else if(compareEnd===0){curInterval=curRule.merge(curInterval,interval);sequence[index]=curInterval;retSeq.splice(index,0,interval);break;}
else if(iRule.canExtend&&iRule.canExtend(curInterval,interval,null)){interval=iRule.extend(curInterval,interval,null);}
else if(iRule.canExtend&&iRule.canExtend(null,interval,nextInterval)){interval=iRule.extend(null,interval,nextInterval);index--;}
else if(curRule.canExtend&&curRule.canExtend(interval,curInterval,null)){curInterval=curRule.extend(interval,curInterval,null);sequence[index]=curInterval;retSeq.splice(index,0,curInterval);index--;}
else if(curRule.canExtend&&curRule.canExtend(null,curInterval,interval)){curInterval=curRule.extend(null,curInterval,interval);sequence[index]=curInterval;retSeq.splice(index,0,curInterval);}
else if(compareEnd<0&&!curInterval.__isSequence){splitPair=curRule.split(curInterval,interval.End);retSeq.splice(index,0,splitPair.first);splitPair.first=curRule.merge(splitPair.first,interval);splitPair=this._setParentAndRule(splitPair,sequence,curRule);sequence[index]=splitPair.first;sequence.splice(index+1,0,splitPair.last);retSeq.splice(index+1,0,splitPair.last);splitPair=undefined;break;}
else if(compareEnd<0&&curInterval.__isSequence){var r=curRule.merge(curInterval,interval);retSeq.splice(index,0,r);break;}
else if(compareEnd>0&&RP.core.SequenceJN._isUnboundedSequence(interval)){interval=iRule.merge(interval,curInterval);sequence[index]=interval;retSeq.splice(index,0,interval);if(index<sequence.length-1&&RP.core.IntervalJN.isOverlapping(interval,sequence[index+1])){curInterval=sequence[index+1];curRule=RP.core.IntervalJN.getRule(curInterval);splitPair=this._splitSetParentAndRule(curRule,curInterval,interval.End,sequence);interval=iRule.merge(interval,splitPair.first);sequence[index+1]=splitPair.last;}
break;}
else{splitPair=this._splitSetParentAndRule(iRule,interval,curInterval.End,sequence);retSeq.splice(index,0,splitPair.first);splitPair.first=curRule.merge(curInterval,splitPair.first);sequence[index]=splitPair.first;interval=splitPair.last;}}
else if(RP.core.SequenceJN._isUnboundedSequence(curInterval)&&RP.core.IntervalJN.compareEnd(interval,curInterval)<0){retSeq.splice(index,0,curRule.merge(curInterval,interval));break;}
else if(iRule.canExtend&&iRule.canExtend(curInterval,interval,null)){interval=iRule.extend(curInterval,interval,null);}
else if(iRule.canExtend&&iRule.canExtend(null,interval,nextInterval)){interval=iRule.extend(null,interval,nextInterval);index--;}
else if(curRule.canExtend&&curRule.canExtend(interval,curInterval,null)){curInterval=curRule.extend(interval,curInterval,null);sequence[index]=curInterval;retSeq.splice(index,0,curInterval);index--;}
else{splitPair=this._splitSetParentAndRule(curRule,curInterval,interval.Start,sequence);sequence[index]=splitPair.first;sequence.splice(index+1,0,splitPair.last);}}
RP.core.SequenceJN.updateSequenceProperties(sequence);if(RP.core.IntervalJN.getParent(sequence)&&isDisplacmentAdd){RP.core.SequenceJN.addInterval(RP.core.IntervalJN.getParent(sequence),sequence,RP.core.IntervalJN.getRule(sequence));}
return retSeq;},getNextIntervalInSequence:function(sequence,currIndex){var newIndex=currIndex+1;if(sequence.length<=newIndex){var currInterval=sequence[currIndex];return{Start:currInterval.End,End:currInterval.End};}
return sequence[newIndex];},getPrevIntervalInSequence:function(sequence,currIndex){var newIndex=currIndex-1;if(newIndex<0){var currInterval=sequence[currIndex];return{Start:currInterval.Start,End:currInterval.Start};}
return sequence[newIndex];},getSubSequence:function(sequence,interval,retSequence){if(retSequence===undefined){retSequence=[];}
var startIndex=RP.core.SequenceJN.getStartIndex(sequence,interval);for(var indx=startIndex;indx<sequence.length;indx++){var curInterval=sequence[indx];if(curInterval.Start>=interval.End){break;}
var splitPair;if(RP.core.IntervalJN.containsTime(curInterval,interval.Start)&&interval.Start>curInterval.Start){splitPair=RP.core.IntervalJN.getRule(curInterval).split(curInterval,interval.Start);curInterval=splitPair.last;}
if(RP.core.IntervalJN.containsTime(curInterval,interval.End)&&interval.End<curInterval.End){splitPair=RP.core.IntervalJN.getRule(curInterval).split(curInterval,interval.End);curInterval=splitPair.first;}
RP.core.SequenceJN.addInterval(retSequence,RP.core.SequenceJN._clone(curInterval));splitPair=undefined;}
if(sequence.__isBounded){RP.core.SequenceJN.setBounds(retSequence,interval);}
return retSequence;},_insertIntoSequence:function(sequence,interval,index){var sRule=RP.core.IntervalJN.getRule(sequence);if(sRule&&sRule.insert){sRule.insert(sequence,interval,index);}
else{sequence.splice(index,0,interval);}},_isUnboundedSequence:function(interval){return interval.__isSequence&&!interval.__isBounded;},_clone:function(interval){var rule=RP.core.IntervalJN.getRule(interval);var ret=rule.clone(interval);RP.core.IntervalJN.setRule(ret,rule);if(RP.core.IntervalJN.getParent(interval)!==null){RP.core.IntervalJN.setParent(ret,RP.core.IntervalJN.getParent(interval));}
if(interval.__isSequence){ret.__isSequence=true;if(interval.__isBounded){ret.__isBounded=interval.__isBounded;}}
return ret;},_splitSetParentAndRule:function(rule,interval,date,sequence){var splitPair=rule.split(interval,date);return this._setParentAndRule(splitPair,sequence,rule);},_setParentAndRule:function(splitPair,sequence,rule){RP.core.IntervalJN.setParent(splitPair.first,sequence);RP.core.IntervalJN.setRule(splitPair.first,rule);RP.core.IntervalJN.setParent(splitPair.last,sequence);RP.core.IntervalJN.setRule(splitPair.last,rule);return splitPair;},removeInterval:function(sequence,interval){Ext.Array.remove(sequence,interval);RP.core.SequenceJN.updateSequenceProperties(sequence);},updateSequenceProperties:function(sequence){if(sequence.__isBounded){return;}
if(sequence.length===0){sequence.Start=null;sequence.End=null;}
else{sequence.Start=RP.Date.clone(sequence[0].Start);sequence.End=RP.Date.clone(sequence[sequence.length-1].End);}},getStartIndex:function(sequence,interval){if((sequence.length===0)||(sequence[0].Start.getTime()>=interval.End.getTime())){return 0;}
var intervalInSet=sequence[sequence.length-1];if(intervalInSet.End.getTime()<interval.Start.getTime()){return sequence.length;}
var startIndex=RP.core.SequenceJN.binarySearch(sequence,interval);intervalInSet=sequence[startIndex-1];if((startIndex!==0)&&(intervalInSet.End.getTime()>interval.Start.getTime())){startIndex--;}
return startIndex;},binarySearch:function(sequence,interval){var length=sequence.length;var lower_bound=0;var upper_bound=length-1;var s1,s2=interval.Start.getTime();while(lower_bound<=upper_bound){var middle=(lower_bound+upper_bound)>>1;s1=sequence[middle].Start.getTime();if(s1===s2){return middle;}
else if(s1<s2){lower_bound=middle+1;}
else{upper_bound=middle-1;}}
return lower_bound;},binarySearchForSequenceThatContainsTime:function(sequence,time){var length=sequence.length;var lower_bound=0;var upper_bound=length-1;var interval;while(lower_bound<=upper_bound){var middle=(lower_bound+upper_bound)>>1;interval=sequence[middle];if(RP.core.IntervalJN.containsTime(interval,time)){return middle;}
else if(interval.Start.compareTo(time)<0){lower_bound=middle+1;}
else{upper_bound=middle-1;}}
return-1;},coalesce:function(sequence){for(var index=0;index<sequence.length-1;index++){var curInterval=sequence[index];if(curInterval.__isSequence){RP.core.SequenceJN.coalesce(curInterval);}
var curRule=RP.core.IntervalJN.getRule(curInterval);var nextInterval=sequence[index+1];if(curRule.canJoin&&curRule.canJoin(curInterval,nextInterval)&&RP.core.IntervalJN.compareDate(curInterval.End,nextInterval.Start)===0){var joinedInterval=curRule.join(curInterval,nextInterval);RP.core.IntervalJN.setParent(joinedInterval,RP.core.IntervalJN.getParent(curInterval));RP.core.IntervalJN.setRule(joinedInterval,curRule);sequence[index]=joinedInterval;sequence.splice(index+1,1);index--;}}
if(sequence.length===1&&sequence[0].__isSequence){RP.core.SequenceJN.coalesce(sequence[0]);}},fillSparceInterval:function(sequence){var i;for(i=0;i<sequence.length;i++){var rule=RP.core.IntervalJN.getRule(sequence[i]);var prev=(i===0?sequence:sequence[i-1]);var next=(i>=sequence.length-1?sequence:sequence[i+1]);if(rule.canExtend&&rule.canExtend(prev,sequence[i],next)){rule.extend(prev,sequence[i],next);}}},setBounds:function(sequence,interval){sequence.__isSequence=true;sequence.__isBounded=true;sequence.Start=interval.Start;sequence.End=interval.End;},formatSequence:function(sequence){if(!sequence.__isSequence){return"Not a Sequence";}
if(sequence.length===0){return"Empty Sequence";}
var retText=[];retText.push(Ext.String.format("Start Date: {0}",RP.Date.formatDate(sequence.Start,RP.core.Formats.Date.Medium)));retText.push(Ext.String.format("End Date: {0}",RP.Date.formatDate(sequence.End,RP.core.Formats.Date.Medium)));for(var i=0;i<sequence.length;i++){retText.push(Ext.String.format("[{0}] {1}",i,RP.core.IntervalJN.formatInterval(sequence[i])));}
return retText.join('\r\n');}};
Ext.ns("RP.core");RP.core.IntervalRule={canSplit:function(intervalJN,splitAt){},canJoin:function(intervalJN1,intervalJN2){},canMerge:function(intervalJN1,intervalJN2){},split:function(intervalJN,splitAt){},join:function(intervalJN1,intervalJN2){},merge:function(intervalJN1,intervalJN2){}};
Ext.ns("RP.core");RP.core.ComponentMgr=function(){var rpTypeParams={};return{register:function(xtypeName,classRef,paramArray){if(xtypeName.toLowerCase()!==xtypeName){RP.throwError("rp reg xtypes must be all lower case - "+xtypeName);}
if(Ext.isFunction(classRef)&&Ext.isEmpty(classRef.$className)){var message=Ext.String.format("Widget Class being registered under '{0}' must be created using Ext.define instead of Ext.extend",xtypeName);logger.logError(message);RP.throwError(message);}
Ext.ClassManager.setAlias(classRef,'widget.'+xtypeName);paramArray=[{name:'site_id',type:'number',description:'Site ID',direction:'in'}].concat(paramArray);rpTypeParams[xtypeName]=paramArray;},createConfig:function(xtypeName,paramValueArray,hash){if(!rpTypeParams[xtypeName]&&Ext.ComponentMgr.isRegistered(xtypeName)){paramValueArray.xtype=xtypeName;return paramValueArray;}
else
if(!rpTypeParams[xtypeName]){RP.throwError("Component is not registered: "+xtypeName+".");}
var newType={};if(Ext.isArray(paramValueArray)){var paramArray=rpTypeParams[xtypeName];if(paramArray){var paramPosition=0;for(var n=0;n<paramArray.length;n++){var param=paramArray[n];if(paramValueArray.length<=paramPosition){break;}
if(param.direction&&param.direction.search(/in/i)===-1){continue;}
var paramValue=paramValueArray[paramPosition];newType[param.name?param.name:param]=paramValue;paramPosition++;}}}
else{newType=paramValueArray;}
newType.hash=hash;newType.xtype=xtypeName;return newType;},create:function(xtypeName,paramValueArray,hash){var newType=this.createConfig(xtypeName,paramValueArray,hash);return Ext.ComponentMgr.create(newType);},getSignature:function(xtype){var retobj={};Ext.each(rpTypeParams[xtype],function(parameter){if(parameter.name){var newParameter=Ext.apply({},parameter);delete newParameter.name;retobj[parameter.name]=newParameter;}},this);return retobj;}};}();
Ext.ns("RP.core");RP.core.CommonExtensions=function(){var printChildren=function(config,options){var sb=[];config.windowOptions=config.windowOptions||{};var stashClientMode=RP.globals.getValue("STASH_CLIENTMODE");var buildString=RP.stash.getVersion("rpcommon").build;if(buildString!==""){buildString="-"+buildString;}
sb.push("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");sb.push("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">");sb.push("<head>");sb.push("<title>"+config.title+"</title>");Ext.Array.each(document.styleSheets,function(sheet){if(!Ext.isEmpty(sheet.href)){sb.push(Ext.String.format('<link rel="stylesheet" type="text/css" media="all" href="{0}" />',sheet.href));}});sb.push(Ext.String.format('<link rel="stylesheet" type="text/css" media="all" href="{0}rpcommon-print-css.{1}{2}.css" />',RP.stash.DEPLOYED_ROOT,stashClientMode,buildString));if(config.cssURLs){Ext.each(config.cssURLs,function(cssUrl){sb.push(Ext.String.format("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"{0}\" />",cssUrl));},this);}
sb.push("</head>");sb.push("<body onLoad='javascript:self.print();'>");var items=(config.items instanceof Array)?config.items:[config.items];Ext.each(items,function(item,index){if(!item.rendered){return;}
var childFilter;if(config.printChildFilter&&!(childFilter=config.printChildFilter(item))){return;}
if(typeof childFilter==="object"){item=childFilter;}
var iPrintMarkup=RP.iget(item,RP.interfaces.IPrintSource);sb.push("<div>");if(iPrintMarkup){var markup=iPrintMarkup.getMarkupForPrinting(options);sb.push(markup);}
else{var dom=item.getEl().dom;sb.push(dom.outerHTML||RP.util.DOM.getOuterHTML(dom));}
sb.push("</div>");});sb.push("</body>");sb.push("</html>");var printWin=window.open("","PrintWindow","toolbar="+(config.windowOptions.toolbar||'yes')+",location="+(config.windowOptions.location||'no')+",directories="+(config.windowOptions.directories||'no')+",status="+(config.windowOptions.status||'no')+",menubar="+(config.windowOptions.menubar||'yes')+",scrollbars="+(config.windowOptions.scrollbars||'yes')+",resizable="+(config.windowOptions.resizable||'yes')+",copyhistory="+(config.windowOptions.copyhistory||'yes')+",width="+(config.windowOptions.width||400)+",height="+(config.windowOptions.height||400));var html=sb.join('\n').replace(/<a[^>]*>([^<]*)<\/a>/gi,"$1");printWin.document.write(html);printWin.document.close();};var showIcon=function(iconParent,type,show){var typeSelector=Ext.String.format('[type="{0}"]',type);var tool=iconParent.down(typeSelector);if(tool){if(show){tool.show();}
else{tool.hide();}}};return{addPrintHandler:function(config){var tools=config.iconParent.tools||[];tools.push({type:'print',handler:function(){if(typeof(config.printOptionsDelegate)==="function"){var fn=function(options){printChildren(config,options);};config.printOptionsDelegate(fn);}
else{printChildren(config,null);}}});config.iconParent.tools=tools;},printComponents:function(config,options){printChildren(config,options);},addReloadHandler:function(config){var tools=config.iconParent.tools||[];tools.push({type:'refresh',handler:function(){config.reloadDelegate();}});config.iconParent.tools=tools;},showReloadIcon:function(iconParent,show){showIcon(iconParent,"refresh",show);},showPrintIcon:function(iconParent,show){showIcon(iconParent,"print",show);}};}();
Ext.ns("RP.event");RP.event.AppEventManager=(function()
{var evtPool=new Ext.util.Observable();evtPool.addEvents([]);Ext.util.Observable.capture(evtPool,function(evtName)
{logger.logTrace("[AppEventManager] observed event fired: "+evtName);return true;},this);return{register:function(evtName,handler,scope,options)
{evtPool.on(evtName,handler,scope,options);},unregister:function(evtName,handler)
{evtPool.un(evtName,handler);},fire:function(evtName)
{var args=[];args[0]=evtName;for(var i=0;i<arguments.length;i++)
{args[i+1]=arguments[i];}
evtPool.fireEvent.apply(evtPool,args);},suspendEvents:function()
{logger.logTrace("[AppEventManager] Entering suspended state");evtPool.suspendEvents();},resumeEvents:function()
{logger.logTrace("[AppEventManager] Leaving suspended state");evtPool.resumeEvents();}};})();
Ext.ns("RP.event");RP.event.AppEventProxy=(function()
{var evtListenerDict={};var awakeListeners=[];var asleepListeners=[];var createSleepingListener=function(listener)
{return{listener:listener,q:[]};};var getOrCreateEventDictEntry=function(evtName)
{var e={};e.eventListeners=evtListenerDict[evtName];if(!e.eventListeners)
{e.isNew=true;e.eventListeners=[];evtListenerDict[evtName]=e.eventListeners;}
return e;};var findAwakeListener=function(listener,remove)
{for(var i=0;i<awakeListeners.length;i++)
{if(awakeListeners[i]===listener)
{if(remove)
{awakeListeners.splice(i,1);}
return listener;}}
return null;};var findAsleepListener=function(listener,remove)
{for(var i=0;i<asleepListeners.length;i++)
{if(asleepListeners[i].listener===listener)
{var al=asleepListeners[i];if(remove)
{asleepListeners.splice(i,1);}
return al;}}
return null;};var queueEvent=function(al,evtName,fn,removeDuplicateEvents)
{var dupidx=-1;if(removeDuplicateEvents)
{for(var i=0;i<al.q.length;i++)
{var qevt=al.q[i];if(qevt.evtname===evtName)
{dupidx=i;break;}}
if(dupidx>=0)
{al.q.splice(dupidx,1);}}
al.q.push({evtname:evtName,handler:fn});};var processQueuedEvents=function(al)
{Ext.each(al.q,function(qevt)
{qevt.handler();},this);};var findQueuedEvent=function(al,evtName,remove)
{var e=[];for(var i=0;i<al.q.length;i++)
{if(al.q[i].evtname===evtName)
{e.push(al.q[i]);if(remove)
{al.q.splice(i,1);i--;}}}
return e;};var findEventListener=function(e,listener,remove)
{for(var i=0;i<e.eventListeners.length;i++)
{if(e.eventListeners[i].listener===listener)
{var el=e.eventListeners[i];if(remove)
{e.eventListeners.splice(i,1);}
return el;}}
return null;};var eventHandler=function(evtName)
{var e=getOrCreateEventDictEntry(evtName);var origArgs=arguments;Ext.each(e.eventListeners,function(l)
{var fn=Ext.bind(l.handler,l.handler,origArgs,false);if(findAwakeListener(l.listener,false))
{fn();}
else
{var al=findAsleepListener(l.listener,false);if(al)
{queueEvent(al,evtName,fn,l.removeDups);}}},this);};return{registerListener:function(listener,isAwake)
{if(findAsleepListener(listener,false)||findAwakeListener(listener,false))
{RP.throwError("Listener already registered.");}
if(isAwake)
{awakeListeners.push(listener);}
else
{asleepListeners.push(createSleepingListener(listener));}},unregisterListener:function(listener)
{var l=findAsleepListener(listener,true);if(!l)
{l=findAwakeListener(listener,true);}
Ext.iterate(evtListenerDict,function(evtName,la,o){Ext.each(la,function(l){if(l.listener===listener){Ext.Array.remove(la,l);return false;}
return true;},this);},this);},subscribe:function(evtName,listener,handler,removeDuplicateEvents)
{var e=getOrCreateEventDictEntry(evtName);if(!findEventListener(e,listener,false))
{e.eventListeners.push({listener:listener,handler:handler,removeDups:removeDuplicateEvents});}
if(e.isNew)
{RP.event.AppEventManager.register(evtName,eventHandler,this);}},unsubscribe:function(evtName,listener)
{var al=findAsleepListener(listener,false);if(al)
{findQueuedEvent(al,evtName,true);}
var e=getOrCreateEventDictEntry(evtName);findEventListener(e,listener,true);},setState:function(listener,isAwake)
{if(isAwake)
{var al=findAsleepListener(listener,true);if(al)
{processQueuedEvents(al);awakeListeners.push(al.listener);}}
else
{var l=findAwakeListener(listener,true);if(l)
{asleepListeners.push(createSleepingListener(l));}}}};})();
Ext.define('RP.ui.Mixins.Exportable',{extend:'RP.util.ConstructedMixin',exportFormats:[],constructor:function(){Ext.applyIf(this,{_exportable:true});this._setupExportableListeners();},setExportable:function(enable){this._exportable=(enable!==false);},_setupExportableListeners:function(){var taskform=(this instanceof RP.taskflow.BaseTaskForm?this:this.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this)||this;top.on('added',this._setupExportableListeners,this,{single:true});return;}
taskform.on('export',this.performExport,this);},performExport:RP.abstractFn});
Ext.define('RP.ui.Mixins.Printable',{extend:'RP.util.ConstructedMixin',constructor:function(){Ext.applyIf(this,{_printable:true});this._setupPrintableListeners();},setPrintable:function(enable){this._printable=(enable!==false);},_setupPrintableListeners:function(){var taskform=(this instanceof RP.taskflow.BaseTaskForm?this:this.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this)||this;top.on('added',this._setupPrintableListeners,this,{single:true});return;}
taskform.on('print',this.performPrint,this);},performPrint:RP.abstractFn});
Ext.define('RP.ui.Mixins.Refreshable',{extend:'RP.util.ConstructedMixin',constructor:function(){Ext.applyIf(this,{_refreshable:true});this._setupRefreshableListeners();},setRefreshable:function(enable){this._refreshable=(enable!==false);},_setupRefreshableListeners:function(){var taskform=(this instanceof RP.taskflow.BaseTaskForm?this:this.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this)||this;top.on('added',this._setupRefreshableListeners,this,{single:true});return;}
taskform.on('refresh',this.performRefresh,this);},performRefresh:RP.abstractFn});
Ext.define('RP.ui.ExportablePlugin',{extend:'Ext.AbstractPlugin',mixins:{exportMixin:'RP.ui.Mixins.Exportable'},init:function(cmp){var me=this;me.cmp=cmp;me.cmp._exportable=true;me.cmp.exportFormats=me.exportFormats;me.cmp.getExportablePlugin=function(){return me;};if(me.disabled===false){me.enable();}
this.downloadFrame=new Ext.ux.IFrameComponent({hidden:true,renderTo:Ext.getBody()});this.cmp.exportFormats=[new RP.data.model.Format({format:'pdf',display:RP.getMessage('rpux.fileformat.pdf')}),new RP.data.model.Format({format:'csv',display:RP.getMessage('rpux.fileformat.csv')})];},performExport:function(exportables){var exportable=exportables.get(this.cmp.id);if(exportable){this.makeExportRequest(Ext.String.capitalize(exportable));}},serialize:RP.AbstractFn,enable:function(){this.callParent();var taskform=(this.cmp instanceof RP.taskflow.BaseTaskForm?this.cmp:this.cmp.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this.cmp)||this.cmp;top.on('added',this.enable,this,{single:true});return;}
taskform.on('export',this.performExport,this.scope||this);},disable:function(){this.callParent();var taskform=(this.cmp instanceof RP.taskflow.BaseTaskForm?this.cmp:this.cmp.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this.cmp)||this.cmp;top.un('added',this.enable,this);}else{taskform.un('export',this.performExport,this.scope||this);}},makeExportRequest:function(format){Ext.Ajax.request({url:RP.globals.POST_EXPORT_URL,method:'POST',params:{format:format,entity:this.entity,encoding:'json'},jsonData:this.serialize(format),headers:{'Content-Type':'text/plain; charset=utf-8'},scope:this,success:this._onExportSuccess,failure:this._onExportFailure});},_onExportSuccess:function(res){var key=res.responseText;var url=Ext.String.format('{0}/{1}/?filename={2}',RP.globals.GET_EXPORT_URL,key,encodeURI(this.buildTitle()));this.downloadFrame.load(url);},getTitle:function(){return this.title||this.cmp.title||'export-'+new Date().getTime();},buildTitle:function(){var title=this.getTitle();return title.trim().replace(new RegExp(' ','g'),'_');},_onExportFailure:function(e){logger.logError("[Exportable] Export failed");}});
Ext.define('RP.ui.PrintablePlugin',{extend:'Ext.AbstractPlugin',mixins:{printMixin:'RP.ui.Mixins.Printable'},init:function(cmp){var me=this;me.callParent(arguments);me.cmp=cmp;me.cmp._printable=true;me.cmp.getPrintablePlugin=function(){return me;};if(me.disabled===false){me.enable();}},enable:function(){this.callParent();var taskform=(this.cmp instanceof RP.taskflow.BaseTaskForm?this.cmp:this.cmp.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this.cmp)||this.cmp;top.on('added',this.enable,this,{single:true});return;}
taskform.on('print',this.performPrint,this.scope||this);},disable:function(){this.callParent();var taskform=(this.cmp instanceof RP.taskflow.BaseTaskForm?this.cmp:this.cmp.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this.cmp)||this.cmp;top.un('added',this.enable,this);}else{taskform.un('refresh',this.performPrint,this.scope||this);}}});
Ext.define('RP.ui.RefreshablePlugin',{extend:'Ext.AbstractPlugin',mixins:{refreshMixin:'RP.ui.Mixins.Refreshable'},init:function(cmp){var me=this;me.callParent(arguments);me.cmp=cmp;me.cmp._refreshable=true;me.cmp.getRefreshablePlugin=function(){return me;};if(me.disabled===false){me.enable();}},enable:function(){this.callParent();var taskform=(this.cmp instanceof RP.taskflow.BaseTaskForm?this.cmp:this.cmp.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this.cmp)||this.cmp;top.on('added',this.enable,this,{single:true});return;}
taskform.on('refresh',this.performRefresh,this.scope||this);},disable:function(){this.callParent();var taskform=(this.cmp instanceof RP.taskflow.BaseTaskForm?this.cmp:this.cmp.up('rptaskform'));if(!taskform){var top=RP.util.Component.getTopLevelContainer(this.cmp)||this.cmp;top.un('added',this.enable,this);}else{taskform.un('refresh',this.performRefresh,this.scope||this);}}});
Ext.define("RP.ui.Mixins.TimeControl",{extend:"Ext.Base",constructor:function(config){this.addEvents("parseerror");this._theDate=RP.Date.clearTime(config.initDate||RP.core.Sundial.now());this._format=config.format||RP.core.Formats.Time.Default;this._roundMinutes=Ext.value(this.config.roundMinutes,1);this.callParent(arguments);},parseValue:function(time){if(typeof(time)==="string"){if(time&&time.length>0){try{var date=RP.core.IntervalJN.parseTimeAfterBase(time,this._theDate);if(this._roundMinutes!==0){date=RP.Date.round(date,this._roundMinutes);}
return date;}
catch(e){logger.logError("[ParseTime] parseValue failed for: "+time);this.fireEvent("parseerror",this,time);}
return null;}
else{return null;}}
else if(!Ext.isEmpty(time)){return RP.Date.round(time,this._roundMinutes);}
else{return null;}},formatTime:function(date){if(date){return RP.Date.formatTime(date,this._format);}
else{return"";}},setTheDate:function(date){if(!Ext.isDate(date)){date=this.initialConfig.initDate||RP.core.Sundial.now();}
this._theDate=RP.Date.clearTime(date);if(this.getRawValue()){this.setValue(this.getRawValue());}},setTheTime:function(date){this.setValue(this.formatTime(date));},setDateTime:function(date){this.setTheDate(date);this.setTheTime(date);},getValue:function(){var date=this.callParent(arguments);return this.formatTime(this.parseValue(date,this._theDate))||'';},getDateTime:function(raw){if(raw){return this.parseValue(this.getRawValue(),this._theDate);}
return this.parseValue(this.getValue(),this._theDate);}});
Ext.define("RP.ui.AbstractSuggest",{extend:"Ext.container.Container",_name:"RP.ui.AbstractSuggest",width:250,height:20,layout:'border',minChars:2,dataStore:null,searchField:null,initComponent:function(){this.dataStore=this.createDataStore();Ext.apply(this,{items:this.createItems()});this.callParent(arguments);},clearSearchBoxValue:function(){this.searchField.clearValue();},createSearchEntryField:function(){return{xtype:'livesearchbox',region:'center',layout:'fit',queryParam:"filter",store:this.dataStore,minChars:this.minChars};},createActionButtons:function(){return{xtype:'button',text:RP.getMessage("rp.common.misc.SearchButton"),width:50,cls:'rp-ui-abstract-suggest-button',region:'east',margins:'0 0 0 5'};},createItems:function(){this.searchField=Ext.ComponentMgr.create(this.createSearchEntryField());return[this.searchField,this.createActionButtons()];},createDataStore:RP.abstractFn,getSelectedRecord:function(){return this.searchField.getSelectedRecord();},getSearchBox:function(){return this.searchField;}});
Ext.define("RP.ui.Hyperlink",{extend:"Ext.Component",alias:"widget.hyperlink",href:["javascript",":void(0);"].join(""),initComponent:function(){this.handlers=[];if(this.handler){this.handlers.push(this.handler);}
this.autoEl={tag:"a",href:this.href,html:this.text};this.callParent();this.addEvents("click");},afterRender:function(){this.callParent();this.mon(this.el,"click",function(){Ext.each(this.handlers,function(handler){handler.call(this.scope||this);},this);this.fireEvent("click",this);},this);},setText:function(text){this.update(text);},getText:function(){return this.el.dom.innerHTML;},addHandler:function(handler){this.handlers.push(handler);}});
Ext.ns("RP.ui");Ext.define("RP.ui.HyperlinkBreadCrumb",{extend:"RP.ui.Hyperlink",cls:"rp-breadcrumb",initComponent:function(){this.addEvents("activate");this.callParent(arguments);},handler:function(){this.fireEvent("activate",this);},deactivate:function(){this.suspendEvents(false);this.addCls("deactivated");},reactivate:function(){this.resumeEvents();this.removeCls("deactivated");},getCard:function(){return this.card;}});
Ext.define("RP.ui.AccordionScrollPanel",{extend:"Ext.panel.Panel",alias:"widget.rpaccordionscrollpanel",constructor:function(config){this._topToolbar=new Ext.Toolbar({dock:"top",itemId:"topToolbar",height:22,cls:'rp-scrollbar-up'});this._bottomToolbar=new Ext.Toolbar({dock:"bottom",itemId:"bottomToolbar",height:22,cls:'rp-scrollbar-down'});this._count=0;this._timeInterval=null;var originalRenderListener=Ext.emptyFn;var originalRenderScope=window;if(config.listeners&&config.listeners.render){originalRenderListener=Ext.isFunction(config.listeners.render)?config.listeners.render:(Ext.isFunction(config.listeners.render.fn)?config.listeners.render.fn:Ext.emptyFn);originalRenderScope=config.listeners.render.scope||config.listeners.scope||window;}
var registered=false;var cfg={layout:'anchor',listeners:{render:function(panel){if(!registered){var dir='';var interval=null;var tbar=this._topToolbar;var bbar=this._bottomToolbar;var fn=function(){if(dir&&panel.body.isScrollable()){panel.body.scroll(dir,20);}
else{window.clearInterval(interval);interval=null;}};var attachTopToolbarListeners=function(){tbar.el.dom.onmouseover=function(){dir='up';if(!interval){interval=window.setInterval(fn,100);}
tbar.el.addCls('rp-scrollbar-over');};tbar.el.dom.onmouseout=function(){dir='';tbar.el.removeCls('rp-scrollbar-over');};tbar.el.dom.onmouseup=tbar.el.dom.onmouseout;tbar.el.dom.ontouchstart=tbar.el.dom.onmouseover;tbar.el.dom.ontouchend=tbar.el.dom.onmouseup;};var attachBottomToolbarListeners=function(){bbar.el.dom.onmouseover=function(){dir='down';if(!interval){interval=window.setInterval(fn,100);}
bbar.el.addCls('rp-scrollbar-over');};bbar.el.dom.onmouseout=function(){dir='';bbar.el.removeCls('rp-scrollbar-over');};bbar.el.dom.onmouseup=bbar.el.dom.onmouseout;bbar.el.dom.ontouchstart=bbar.el.dom.onmouseover;bbar.el.dom.ontouchend=bbar.el.dom.onmouseup;};if(!tbar.rendered){tbar.on("render",attachTopToolbarListeners);}
else{attachTopToolbarListeners();}
if(!bbar.rendered){bbar.on("render",attachBottomToolbarListeners);}
else{attachBottomToolbarListeners();}
registered=true;}
originalRenderListener.call(originalRenderScope);this.setHeight(this.getHeight());},resize:this.fixScroll,expand:this.fixScroll,scope:this}};Ext.apply(config,cfg);this.callParent([config]);},fixScroll:function(){if(this.isDestroyed||this.collapsed||!this.getEl()||!this.getEl().getBox()){return;}
if(!this.items||this.items.length===0){if(this._count<1000){if(this._timeInterval){window.clearTimeout(this._timeInterval);}
this._timeInterval=window.setTimeout(Ext.bind(this.fixScroll,this,[this]),100);this._count++;}
return;}
this._count=0;var origHeight=this.getEl().getBox().height;if(this.body.isScrollable()){if(!this._topToolbar.ownerCt){this.addDocked(this._topToolbar);}
if(!this._bottomToolbar.ownerCt){this.addDocked(this._bottomToolbar);}}
else{if(this._topToolbar.ownerCt===this){this.removeDocked(this._topToolbar,false);}
if(this._bottomToolbar.ownerCt===this){this.removeDocked(this._bottomToolbar,false);}
this.body.scrollTo('top');}
var newHeight=this.getEl().getBox().height;if(origHeight!==newHeight){this.setHeight(origHeight);}}});
Ext.define("RP.ui.ChangePassword",{extend:"Ext.window.Window",width:450,draggable:false,resizable:false,closable:false,modal:true,border:false,bodyPadding:20,success:false,initComponent:function(){Ext.apply(this,{title:this.formTitle||RP.getMessage("rp.common.changepassword.FormTitle"),items:[{xtype:"component",html:this.initialConfig.formIntro||RP.getMessage("rp.common.changepassword.FormIntro")},{xtype:"form",itemId:"form",style:"margin: 20px auto",fieldDefaults:{labelAlign:"right",labelStyle:"font-weight: bold",labelWidth:125},defaults:{anchor:"100%",inputType:"password",listeners:{specialkey:this.onSpecialKey,scope:this}},width:320,border:false,items:[{xtype:"textfield",itemId:"curPwd",name:"curPwd",fieldLabel:RP.getMessage("rp.common.changepassword.OldPasswordLabel")},{xtype:"textfield",itemId:"newPwd",name:"newPwd",fieldLabel:RP.getMessage("rp.common.changepassword.NewPasswordLabel")},{xtype:"textfield",itemId:"confirmPwd",name:"confirmPwd",fieldLabel:RP.getMessage("rp.common.changepassword.ConfirmPasswordLabel")}]},{itemId:"pnlButtons",border:false,buttonAlign:"center",buttons:[{itemId:"btnSubmit",text:RP.getMessage("rp.common.changepassword.SubmitButton"),handler:this.onSubmit,scope:this},{itemId:"btnCancel",text:RP.getMessage("rp.common.changepassword.CancelButton"),handler:this.close,scope:this}]}]});this.callParent();this.on("show",this.focusCurrentPassword,this);var inactiveFn=Ext.bind(this.destroy,this);RP.util.PageInactivityChecker.addHandler(inactiveFn);this.on("destroy",function(){RP.util.PageInactivityChecker.removeHandler(inactiveFn);},this);},getNewPassword:function(){return this.newPassword;},focusCurrentPassword:function(){this.getComponent("form").getComponent("curPwd").focus(false,500);},onSpecialKey:function(field,e){if(e.getKey()==e.ENTER){e.stopEvent();this.onSubmit();}},onSubmit:function(){var form=this.getComponent("form");var results=form.getForm().getValues();Ext.getBody().mask(RP.getMessage("rp.common.misc.SavingMaskText"));if(Ext.isEmpty(results.curPwd)){form.getComponent("curPwd").markInvalid(RP.getMessage("rp.common.changepassword.EmptyError"));Ext.getBody().unmask();return;}
if(Ext.isEmpty(results.newPwd)){form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.EmptyError"));Ext.getBody().unmask();return;}
if(results.newPwd!==results.confirmPwd){form.getComponent("confirmPwd").markInvalid(RP.getMessage("rp.common.changepassword.NewPasswordsDoNotMatch"));Ext.getBody().unmask();return;}
logger.logTrace("[ChangePassword] Changing user password.");Ext.Ajax.request({url:RP.globals.getFullyQualifiedPath("PATH_TO_DATA_ROOT")+"changePassword",disableExceptionHandling:true,method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8"},params:Ext.urlEncode({oldPwd:results.curPwd,newPwd:results.newPwd}),scope:this,callback:this.onChangePasswordCallback});},onChangePasswordCallback:function(options,success,response){var form=this.getComponent("form");var result=Ext.JSON.decode(response.responseText).status;var results=form.getForm().getValues();Ext.getBody().unmask();var msgBoxOptions={modal:true,buttons:Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR,minWidth:300,title:RP.getMessage("rp.common.changepassword.ErrorTitle")};switch(result){case RP.REFSExceptionCodes.OK:logger.logTrace("[ChangePassword] Password change successful.");this.success=true;this.newPassword=results.newPwd;Ext.MessageBox.alert(RP.getMessage("rp.common.changepassword.FormTitle"),RP.getMessage("rp.common.changepassword.Success"),function(){this.close();this.newPassword=null;},this);break;case RP.REFSExceptionCodes.PASSWORD_OLD_PASSWORD_INCORRECT:logger.logError("[ChangePassword] Old password was incorrect.");form.getComponent("curPwd").markInvalid(RP.getMessage("rp.common.changepassword.OldPasswordInvalid"));break;case RP.REFSExceptionCodes.PASSWORD_TOO_SHORT:logger.logError("[ChangePassword] Password too short.");form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.TooShortError"));break;case RP.REFSExceptionCodes.PASSWORD_MISSING_UPPER:logger.logError("[ChangePassword] Password missing uppercase character.");form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.MissingUpperCaseError"));break;case RP.REFSExceptionCodes.PASSWORD_MISSING_NONALPHA:logger.logError("[ChangePassword] Password missing non-alphanumeric character.");form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.MissingNonAlphaError"));break;case RP.REFSExceptionCodes.PASSWORD_CONTAINS_USERID:logger.logError("[ChangePassword] Password contains user ID.");form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.ContainsUserNameError"));break;case RP.REFSExceptionCodes.PASSWORD_DUPLICATE_OF_PREVIOUS:logger.logError("[ChangePassword] Password contains old password.");form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.ContainsOldPasswordError"));break;case RP.REFSExceptionCodes.INVALID_LOGIN:logger.logError("[ChangePassword] Invalid login.");Ext.Msg.show(Ext.apply(msgBoxOptions,{msg:RP.getMessage("rp.common.changepassword.InvalidLogin")}));break;case RP.REFSExceptionCodes.PASSWORD_ACCOUNT_LOCKED:logger.logError("[ChangePassword] Account is locked.");Ext.Msg.show(Ext.apply(msgBoxOptions,{msg:RP.getMessage("rp.common.changepassword.AccountLocked")}));break;case RP.REFSExceptionCodes.PASSWORD_EXPIRED_EXCEPTION:logger.logError("[ChangePassword] Password is expired.");Ext.Msg.show(Ext.apply(msgBoxOptions,{msg:RP.getMessage("rp.common.changepassword.Expired")}));break;case RP.REFSExceptionCodes.PASSWORD_CHANGE_REQUIRED:logger.logError("[ChangePassword] Password change required.");Ext.Msg.show(Ext.apply(msgBoxOptions,{msg:RP.getMessage("rp.common.changepassword.ChangeRequired")}));break;case RP.REFSExceptionCodes.PASSWORD_SAME_CASE:logger.logError("[ChangePassword] Password cannot be entirely the same case.");form.getComponent("newPwd").markInvalid(RP.getMessage("rp.common.changepassword.SameCase"));break;default:logger.logError("[ChangePassword] Unexpected error result: "+result);Ext.Msg.show(Ext.apply(msgBoxOptions,{msg:RP.getMessage("rp.common.changepassword.GenericServerError")}));}}});
Ext.define('RP.ui.CheckButtonItem',{extend:'Ext.menu.CheckItem',alias:['widget.menucheckbuttonitem'],renderTpl:['<a id="{id}-itemEl" class="'+Ext.baseCSSPrefix+'menu-item-link" href="{href}" <tpl if="hrefTarget">target="{hrefTarget}"</tpl> hidefocus="true" unselectable="on">','<img id="{id}-iconEl" src="{icon}" class="'+Ext.baseCSSPrefix+'menu-item-icon {iconCls}" />','<span id="{id}-textEl" class="'+Ext.baseCSSPrefix+'menu-item-text" <tpl if="arrowCls">style="margin-right: 17px;"</tpl> >{text}</span>','<span id="{id}-buttonEl" class="'+Ext.baseCSSPrefix+'menu-item-buttons"></span>','<img id="{id}-arrowEl" src="{blank}" class="{arrowCls}" />','</a>'],initComponent:function(){this.callParent();this.addChildEls('buttonEl');this.on('afterrender',this._afterRender,this);},onClick:function(e){if(e.getTarget('.x-btn')===null){this.callParent([e]);}},_afterRender:function(){if(this.buttonsRendered!==true){var items=[],pressed=true,id=this.getId();Ext.Array.each(this.buttons,function(btn){items.push(Ext.apply(btn,{xtype:'button',enableToggle:true,toggleGroup:id+'-toggleGroup',allowDepress:false,parentOptionId:id,pressed:pressed,margin:'0 0 0 5'}));pressed=false;});if(items.length>0){Ext.create('Ext.container.Container',{autoEl:'span',items:items,renderTo:this.buttonEl,autoRender:true});}
this.buttonsRendered=true;}},getPressedButton:function(){var result=null,buttons=Ext.query('div:has(button)',this.buttonEl.dom),id=this.getId();Ext.each(buttons,function(btn){var cmp=Ext.getCmp(btn.id);if(cmp.pressed===true){result=cmp;return false;}});return result;}});
Ext.define("RP.ui.ClickableToolTip",{extend:"Ext.tip.ToolTip",autoWidth:true,initComponent:function(){RP.util.DeprecationUtils.logStackTrace("[DEPRECATED] RP.ui.ClickableToolTip is deprecated. Please use RP.ui.ToolTip instead.");Ext.apply(this,{closable:true,autoHide:false,showDelay:0,mouseDownXY:[null,null]});this.callParent(arguments);},show:function(){this.callParent(arguments);var box=this.getBox();if(box.x+box.width>Ext.getBody().getWidth()){var x=Ext.getBody().getWidth()-(box.width+10);this.setPagePosition(x,box.y);}},setTarget:function(target){var t;if((t=Ext.get(target))){if(this.target){var tg=Ext.get(this.target);this.mun(tg,"mousedown",this.onTargetMouseDown,this);this.mun(tg,"mouseup",this.onTargetMouseUp,this);}
this.mon(t,"mousedown",this.onTargetMouseDown,this);this.mon(t,"mouseup",this.onTargetMouseUp,this);this.target=t;}},ignoreEvent:function(e){return this.disabled||e.within(this.target.dom,true);},onTargetMouseDown:function(e){if(!this.ignoreEvent(e)){this.mouseDownXY=e.getXY();}},onTargetMouseUp:function(e){var newXY=e.getXY();var oldXY=this.mouseDownXY;this.mouseDownXY=[null,null];if(this.ignoreEvent(e)||!(oldXY[0]==newXY[0]&&oldXY[1]==newXY[1])){return;}
var t=e.getTarget(this.delegate);if(t){this.triggerElement=t;this.targetXY=newXY;this.show();}},onDocMouseDown:function(e){if(!e.within(this.el.dom)){this.hide();}}});
Ext.define("RP.ui.ComponentDataView",{extend:"Ext.view.View",alias:"widget.compdataview",defaultType:"textfield",cls:"comp-data-view",initComponent:function(){this.callParent();this.components=new RP.collections.MixedCollection();},refresh:function(){this.components.clear();this.callParent();this.renderItems(0,this.store.getCount()-1);},selectRow:function(index){var selectedItem=Ext.query(".comp-data-view-row-selected",this.getTemplateTarget().dom)[0];if(selectedItem){Ext.fly(selectedItem).removeClass("comp-data-view-row-selected");}
var item=Ext.query(".comp-data-view-row",this.getTemplateTarget().dom)[index];Ext.fly(item).addClass("comp-data-view-row-selected");},onUpdate:function(ds,record){var index=ds.indexOf(record);if(index>-1){this.destroyItems(index);}
this.callParent(arguments);if(index>-1){this.renderItems(index,index);}},onAdd:function(ds,records,index){var count=this.all.getCount();this.callParent(arguments);if(count!==0){this.renderItems(index,index+records.length-1);}},onClick:function(e){var item=e.getTarget(this.itemSelector,this.getTemplateTarget());if(item){var index=this.indexOf(item);var selectedItem=Ext.query(".comp-data-view-row-selected",this.getTemplateTarget().dom)[0];if(selectedItem){Ext.fly(selectedItem).removeClass("comp-data-view-row-selected");}
Ext.fly(item).addClass("comp-data-view-row-selected");if(this.onItemClick(item,index,e)!==false){this.fireEvent("click",this,index,item,e);}}
else{if(this.fireEvent("containerclick",this,e)!==false){this.onContainerClick(e);}}},onRemove:function(ds,record,index){this.destroyItems(index);this.callParent(arguments);},onDestroy:function(){RP.ui.ComponentDataView.onDestroy.call(this);this.components.clear();},renderItems:function(startIndex,endIndex){var ns=this.all.elements;var blurFn=function(f){this.store.getAt(this.index).data[this.dataIndex]=f.getValue();};for(var i=startIndex;i<=endIndex;i++){var r=[];for(var items=this.items,j=0,len=items.length,c;j<len;j++){c=items[j].render?c=items[j].cloneConfig():Ext.ComponentManager.create(items[j],this.defaultType);c.itemId="cdv-"+i+"-"+j;r[j]=c;var target=ns[i];if(c.renderTarget){target=Ext.DomQuery.selectNode(c.renderTarget,ns[i]);c.render(target);}
else if(c.applyTarget){target=Ext.DomQuery.selectNode(c.applyTarget,ns[i]);c.applyToMarkup(target);}
else{c.render(target);}
if(Ext.isFunction(c.setValue)&&c.applyValue){c.setValue(this.store.getAt(i).get(c.applyValue));c.on('blur',blurFn,{store:this.store,index:i,dataIndex:c.applyValue});}
if(Ext.isFunction(c.renderer)){c.renderer.call(c.scope||this,c,target,this.store.getAt(i),i,j,this.store);}}
this.components.insert(i,r);}},destroyItems:function(index){var componentToDestroy=this.components.removeAt(index);Ext.destroy(componentToDestroy);}});
Ext.define("RP.ui.ComponentDataViewGrid",{extend:"RP.ui.ComponentDataView",alias:"widget.compdataviewgrid",defaultType:"textfield",cls:"comp-data-view-grid",getLabelRenderer:function(dataIndex){return function(component,target,record,rowIndex,colIndex,store){component.setText(record.get(dataIndex));};},initComponent:function(){var template=new Ext.Template('<table cellpadding="0" cellspacing="0">'+'<thead>'+'<tr>'+'{templateHeader}'+'</tr>'+'</thead>'+'<tbody>'+'<tpl for=".">'+'<tr class="comp-data-view-row">'+'{templateBody}'+'</tr>'+'</tpl>'+'</tbody>'+'</table>');var headerTemplate=new Ext.Template('<th style="white-space:nowrap;{style}"><div {tooltip}>{headerData}</div></th>');var rowTemplate=new Ext.Template('<td class="col{columnNum}" width="{width}" style="{style}">{rowData}</td>');this.itemSelector='tr.comp-data-view-row';var columns=this.initialConfig.items,tplHeader='',tplBody='';for(var i=0;i<columns.length;i++){var column=columns[i];if(column.hidden){continue;}
var tooltip="";if(column.tooltip){tooltip="ext:qtip='"+column.tooltip+"'";}
var tpldata='';if(column.dataIndex){column.xtype="label";if(!column.renderer){column.renderer=this.getLabelRenderer(column.dataIndex);}}
tplHeader+=headerTemplate.apply({headerData:column.header,style:column.style,tooltip:tooltip});if(this.initialConfig.autoExpandColumn===column.colID){tplBody+=rowTemplate.apply({columnNum:i,width:"100%",style:column.style,rowData:tpldata});}
else{tplBody+=rowTemplate.apply({columnNum:i,style:column.style,rowData:tpldata});}
column.renderTarget="td.col"+i;}
this.tpl=template.apply({templateHeader:tplHeader,templateBody:tplBody});this.callParent();}});
Ext.define("RP.ui.LiveSearchBox",{extend:"Ext.form.ComboBox",alias:"widget.livesearchbox",listConfig:{itemSelector:"div.livesearch-item"},minChars:2,getInnerTpl:function(){return'<tpl for="."><div class="livesearch-item">{item}</div></tpl>';},initComponent:function(){this.addEvents("update");Ext.apply(this,{enableKeyEvents:true,hideTrigger:true,typeAhead:false,triggerAction:"query"});this.listConfig.loadingText=this.listConfig.loadingText?this.listConfig.loadingText:RP.getMessage("rp.common.misc.LoadingMaskText");if(this.initialConfig.pageSize){this.pageSize=this.initialConfig.pageSize;this.width=this.initialConfig.width?this.initialConfig.width:230;}
this.on("keyup",function(){if(Ext.isEmpty(this.getRawValue())){this.collapse();}},this);this.callParent();},onSelect:function(record){if(this.lastQuery==this.getRawValue()){this.setValue(record.data.item);this.collapse();this.fireEvent("update",this,record);}},getSelectedRecord:function(){var rows=this.view.getSelectedRecords();if(rows.length>0){return rows[0];}
return null;}});
Ext.define("RP.ui.TimeField",{extend:"Ext.form.field.Text",alias:"widget.rpuitimefield",mixins:{timeControl:"RP.ui.Mixins.TimeControl"},initComponent:function(){this.mixins.timeControl.constructor.call(this,this.initialConfig);this.typedValue=null;if(!this.initialConfig.emptyText){Ext.apply(this,{emptyText:RP.getMessage("rp.common.misc.EmptyTimeText")});}
this.addEvents("beforechange");this.on("blur",function(e){this.fireEvent("beforechange");});this.callParent(arguments);},beforeBlur:function(){var value=this.parseValue(this.getRawValue());if(value){this.typedValue=this.getRawValue();this.setRawValue(this.formatTime(value));}}});
Ext.define("RP.ui.SessionExpiredDialog",{extend:"Ext.window.Window",id:"sessionExpiredDialog",initComponent:function(){RP.event.AppEventManager.fire(RP.upb.AppEvents.SessionExpired,{});var enterKeyFn=Ext.bind(function(field,e){if(e.getKey()==e.ENTER){this.submit();}},this);this.msgBoxOptions=this._createMsgBoxOptions();Ext.apply(this,{title:RP.getMessage("rp.common.login.InactivityTimeoutTitle"),width:450,draggable:false,closable:false,resizable:false,bodyPadding:20,bodyStyle:"background-color: #fff",items:[{xtype:"box",style:"font-size: 12px;",html:RP.getMessage("rp.common.login.InactivityTimeout")},{xtype:"form",itemId:"form",style:"margin: 20px auto",fieldDefaults:{labelWidth:75},defaults:{labelStyle:"font-weight: bold"},width:270,border:false,items:[{xtype:"textfield",itemId:"userName",fieldLabel:RP.getMessage("rp.common.login.Username"),listeners:{"specialkey":enterKeyFn},style:{marginTop:"1px"},anchor:"99%"},{xtype:"textfield",itemId:"password",fieldLabel:RP.getMessage("rp.common.login.Password"),inputType:"password",listeners:{"specialkey":enterKeyFn},style:{marginTop:"1px"},anchor:"99%"}]},{itemId:"pnlButtons",border:false,buttonAlign:"center",buttons:[{itemId:'btnLogin',text:RP.getMessage("rp.common.login.LoginButton"),scope:this,handler:Ext.bind(this.submit,this)},{itemId:'btnCancel',text:RP.getMessage("rp.common.login.CancelButton"),handler:RP.util.Helpers.logout}]}]});this.callParent(arguments);},destroy:function(){Ext.EventManager.removeResizeListener(this.center,this);this.callParent(arguments);},show:function(){Ext.EventManager.onWindowResize(this.center,this);this.callParent(arguments);this.getComponent("form").getComponent("userName").focus(false,100);},submit:function(){var userName=this.getComponent("form").getComponent("userName").getValue();var password=this.getComponent("form").getComponent("password").getValue();if(Ext.isEmpty(userName)||Ext.isEmpty(password)){this._displayAlertMessageBox(RP.getMessage("rp.common.login.LoginFailed"));return;}
if(userName.toUpperCase()!==RP.globals.getValue("USERNAME").toUpperCase()){this._displayAlertMessageBox(RP.getMessage("rp.common.login.InvalidUser"));return;}
this.loadMask=new Ext.LoadMask(this.body,{msg:RP.getMessage("rp.common.misc.PleaseWait"),style:{'z-index':'100000 !important'}});this.loadMask.show();logger.logTrace("[SessionExpiredLoginDialog] Submitting reauthentication request.");Ext.Ajax.request({url:RP.core.PageContext.getPageUrl()+RP.globals.getPath("REAUTHENTICATE"),params:Ext.urlEncode({loginName:userName,password:password}),method:"POST",scope:this,callback:this._loginCallback});},_createMsgBoxOptions:function(){return{modal:true,buttons:Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR,minWidth:300};},_displayAlertMessageBox:function(message){Ext.Msg.show(Ext.apply(this.msgBoxOptions,{msg:message,cls:"aboveExpiredMask"}));},_displayExceptionMessage:function(status){var message="";switch(status){case RP.REFSExceptionCodes.REAUTH_USERNAME_MISMATCH_EXCEPTION:message=RP.getMessage("rp.common.login.InvalidUser");break;case RP.REFSExceptionCodes.NOT_AUTHENTICATION_EXCEPTION:message=RP.getMessage("rp.common.login.LoginFailed");break;case RP.REFSExceptionCodes.LOGIN_ATTEMPTS_EXCEEDED_EXCEPTION:message=RP.getMessage("rp.common.exception.LOGIN_ATTEMPTS_EXCEEDED_EXCEPTION");break;case RP.REFSExceptionCodes.SERVER_COMMUNICATION_FAILURE:message=RP.getMessage("rp.common.exception.SERVER_COMMUNICATION_FAILURE");break;case RP.REFSExceptionCodes.SITE_NOT_ACTIVE_EXCEPTION:message=RP.getMessage("rp.common.exception.SITE_NOT_ACTIVE_EXCEPTION");break;default:message=RP.getMessage("rp.common.login.LoginFailed");}
logger.logInfo("[SessionExpiredLoginDialog] Exception caught trying to re-authenticate user; response status: "+status);this._displayAlertMessageBox(message);},_loginCallback:function(options,success,response){var relogin=false;try{var r=Ext.JSON.decode(response.responseText);this.loadMask.hide();if(r.status===RP.REFSExceptionCodes.OK){this.destroy();}
else{this._displayExceptionMessage(r.status);}}
catch(err){if(RP.globals.getPath("LOGIN_SERVICE")){logger.logTrace("[SessionExpiredLoginDialog] Reauthentication failed, attempting to use the standard login service instead.");this._reauthenticateUsingLoginPage();}
else{relogin=true;}}
if(relogin){alert(RP.getMessage("rp.common.login.SessionError"));RP.util.Helpers.redirectToLogin();return;}
RP.event.AppEventManager.fire(RP.upb.AppEvents.SessionReauthenticated,{});},_reauthenticateUsingLoginPage:function(){var userName=this.getComponent("form").getComponent("userName").getValue();var password=this.getComponent("form").getComponent("password").getValue();var params={loginName:userName,password:password};Ext.Ajax.request({url:RP.globals.getFullyQualifiedPath('LOGIN_SERVICE'),method:"POST",params:params,scope:this,disableExceptionHandling:true,callback:this._reauthUsingLoginPageCallback});},_reauthUsingLoginPageCallback:function(options,success,response){this.loadMask.hide();var result;try{if(Ext.isEmpty(response.responseText)){RP.throwError("Empty responseText");}
result=Ext.JSON.decode(response.responseText);}
catch(ex){this._displayAlertMessageBox(RP.getMessage("rp.common.login.InvalidResponse"));return;}
if(result.status===RP.REFSExceptionCodes.OK&&success){window.onbeforeunload=null;RP.util.Helpers.reload();}
else{this._displayExceptionMessage(result.status);}}});
Ext.ns('RP.ui');RP.ui.SmartTimeLogic=function(startTimeField,stopTimeField){stopTimeField.on("beforechange",function(){if(!hasMeridiemIdentifier(stopTimeField.typedValue)){calculateStopTime();}});calculateStopTime=function(){var startTime=startTimeField.getDateTime();var stopTime=stopTimeField.getDateTime();if(Ext.isEmpty(startTime)||Ext.isEmpty(stopTime)){return;}
var MERIDIEM_BOUNDARY=12;var startHours=startTime.getHours();var stopHours=stopTime.getHours();var startMinutes=startTime.getMinutes();var stopMinutes=stopTime.getMinutes();if(startHours==stopHours||startHours-MERIDIEM_BOUNDARY==stopHours){if(startMinutes==stopMinutes&&isAM(startHours,MERIDIEM_BOUNDARY)){stopTimeField.setTheTime(RP.Date.addHours(stopTime,MERIDIEM_BOUNDARY));}
else
if(stopMinutes>startMinutes&&isPM(startHours,MERIDIEM_BOUNDARY)){stopTimeField.setTheTime(RP.Date.addHours(stopTime,MERIDIEM_BOUNDARY));}}
else
if(stopHours<startHours){if(isAM(startHours,MERIDIEM_BOUNDARY)){stopTimeField.setTheTime(RP.Date.addHours(stopTime,MERIDIEM_BOUNDARY));}
else
if(startHours-MERIDIEM_BOUNDARY<stopHours){stopTimeField.setTheTime(RP.Date.addHours(stopTime,MERIDIEM_BOUNDARY));}}};hasMeridiemIdentifier=function(timeString){var hasIdentifier=false;if(Ext.isEmpty(timeString)){return hasIdentifier;}
timeString=timeString.toLowerCase();hasIdentifier=(timeString.indexOf("a")!==-1)||(hasIdentifier=timeString.indexOf("p")!==-1)?true:false;return hasIdentifier;};isAM=function(hour,meridiemBoundary){return hour<meridiemBoundary;};isPM=function(hour,meridiemBoundary){return hour>=meridiemBoundary;};};
Ext.define("RP.ui.StoreBoundTimeTextField",{alias:"rpstoreboundtimetextfield",extend:"Ext.form.TextField",initComponent:function(){var config=this.initialConfig;this.on("change",function(field,newVal,oldVal){var baseDateDelegate=Ext.bind(config.baseDateHandler,config.scope||this,[config.record,config.fieldName]);var baseDate=baseDateDelegate();var fieldDate=null;if(newVal){try{fieldDate=IntervalJN.parseTimeAfterBase(newVal,baseDate);}
catch(e){Ext.Msg.alert('','Please enter a valid time.');this.setRawValue(oldVal);return;}}
var dummyDate=new Date();var curDate=config.record.get(config.fieldName);if(newVal===''&&!curDate){this.setRawDate(null,this.initialConfig.emptyText);return;}
if(!RP.Date.equals((curDate||dummyDate),(fieldDate||dummyDate))){config.record.set(config.fieldName,fieldDate);this.addCls("rp-dirty-cell");}
this.setRawDate(fieldDate);},this);Ext.apply(this,config);if(!config.emptyText){config.emptyText=RP.getMessage("rp.common.misc.EmptyTimeText");}
this.callParent();},setValue:function(v){this.callParent(arguments);this.fireEvent('change',this,v);},setRawDate:function(fieldDate,defaultText){if(fieldDate){this.setRawValue(RP.Date.formatTime(fieldDate,this.initialConfig.timeFormat));}
else if(defaultText){this.setRawValue(defaultText);}
else{this.setRawValue("");}}});
Ext.define("RP.ui.StoreBinder",{extend:"Ext.Component",_store:null,_record:null,_valueField:null,_emptyText:null,_control:null,_dirtyCellCls:"rp-dirty-cell",initComponent:function(){var storeBindings=this.initialConfig.storeBindings;this._store=storeBindings.store||null;this._record=storeBindings.record||null;this._valueField=storeBindings.valueField;this._emptyText=storeBindings.emptyText;this._control=this.initialConfig.control;if(!this._valueField){if(this.name){this._valueField=this.name;}
else{RP.throwError('fieldname is required for a store bound control.');}}
if(!this._store&&!this._record){RP.throwError('either store or record must be provided for a store bound control');}
if(this._store){this._store.on('load',this.onStoreLoaded,this);}
if(!this._control){RP.throwError('store bound control requires a control to be set');}
this._oldControlSetValue=this._control.setValue;this._control.setValue=function(newVal){this._storeBinder.setValue(newVal);};if(Ext.isFunction(this._control.initValue)){this._control.initValue=Ext.Function.createSequence(this._control.initValue,this.removeDirtyFlag,this);}
this._oldControlClearValue=this._control.clearValue;this._control.clearValue=function(){this._storeBinder.clearValue();};this._control.on('change',this.onControlChange,this);if(this._store.getCount()>0){this.onStoreLoaded();}
this.callParent(arguments);},getStoreValue:function(){return this._record.get(this._valueField);},setValue:function(newVal){this.onControlChange(this._control,newVal,this._control.getValue());},clearValue:function(){if(this._oldControlClearValue){this._oldControlClearValue.apply(this._control,[]);}
this._control.setRawValue('');this.removeDirtyFlag();},onStoreLoaded:function(){if(this._store.getCount()){this._record=this._store.getAt(0);this.setValue(this._record.get(this._valueField));this.removeDirtyFlag();}},onControlChange:function(field,newVal,oldVal){var formattedVal=newVal;var curVal=this._record.get(this._valueField);if(this._control.formatValue){try{formattedVal=this._control.formatValue(newVal);}
catch(ex){Ext.Msg.alert('',ex.message);this._control.setRawValue(curVal);return;}}
var parsedVal=newVal;if(this._control.parseValue){parsedVal=this._control.parseValue(newVal);}
var areDifferent=true;if(Ext.isDate(curVal)){if(Ext.isString(parsedVal)){parsedVal=new Date(parsedVal);}
areDifferent=!RP.Date.equals(curVal,parsedVal);}
else{areDifferent=curVal!==parsedVal;}
if(this._record&&areDifferent){this._record.set(this._valueField,parsedVal);if(formattedVal!==oldVal){this.addDirtyFlag();}}
if(formattedVal===""&&this._emptyText){formattedVal=this._emptyText;}
this._oldControlSetValue.apply(this._control,[formattedVal]);},addDirtyFlag:function(){if(this._control.inputEl){this._control.inputEl.addCls(this._dirtyCellCls);}},removeDirtyFlag:function(){if(this._control.inputEl){this._control.inputEl.removeCls(this._dirtyCellCls);}}});
Ext.define("RP.ui.StoreBoundTimeField",{alias:"widget.rpstoreboundtimefield",extend:"RP.ui.TimeField",_storeBinder:null,initComponent:function(){this.initialConfig.control=this;this._storeBinder=new RP.ui.StoreBinder(this.initialConfig);this.initialConfig.storeBindings.store.on("load",function(store,recs){this.setTheDate(this._storeBinder.getStoreValue());},this);this.callParent();},formatValue:function(newVal){if(typeof(newVal)==="string"){return newVal;}
if(newVal){return RP.Date.formatTime(newVal,this._format);}
else{return"";}}});
Ext.define("RP.ui.StoreBoundTextField",{alias:"rpstoreboundtextfield",extend:"Ext.form.TextField",_storeBinder:null,initComponent:function(){this.initialConfig.control=this;this._storeBinder=new RP.ui.StoreBinder(this.initialConfig);this.callParent();}});
Ext.define("RP.ui.StoreBoundTextArea",{alias:"widget.rpstoreboundtextarea",extend:"Ext.form.TextArea",_storeBinder:null,initComponent:function(){this.initialConfig.control=this;this._storeBinder=new RP.ui.StoreBinder(this.initialConfig);this.callParent();}});
Ext.define("RP.ui.StoreBoundDateField",{alias:"widget.rpstorebounddatefield",extend:"Ext.form.field.Date",_storeBinder:null,initComponent:function(){this.initialConfig.control=this;this._storeBinder=new RP.ui.StoreBinder(this.initialConfig);this._format=this.initialConfig.format||RP.core.Formats.Date.Medium;if(!this.initialConfig.emptyText){Ext.apply(this,{emptyText:RP.getMessage("rp.common.misc.EmptyDateText")});}
this.callParent();},formatValue:function(newVal){if(Ext.isString(newVal)){if(Ext.isEmpty(newVal)){return"";}
return RP.Date.formatDate(RP.Date.clearTime(new Date(newVal)),this._format);}
else if(newVal){return RP.Date.formatDate(RP.Date.clearTime(newVal),this._format);}
else{return"";}}});
Ext.define("RP.ui.StoreBoundDisplayField",{alias:"rpstorebounddisplayfield",extend:"Ext.form.DisplayField",_storeBinder:null,initComponent:function(){this.initialConfig.control=this;this._storeBinder=new RP.ui.StoreBinder(this.initialConfig);this.callParent();}});
Ext.define("RP.ui.ComboBoxStoreBinder",{extend:"RP.ui.StoreBinder",_displayField:null,initComponent:function(){var storeBindings=this.initialConfig.storeBindings;this._displayField=storeBindings.displayField||null;this.callParent(arguments);},onControlChange:function(field,newVal,oldVal){this.callParent(arguments);if(this._displayField&&this._control.store&&this._control.valueField&&this._control.displayField){var displayVal=null;if(this._control.store.getCount()===0){displayVal=this._record.get(this._displayField);this._control.setRawValue(displayVal);this._control.lastSelectionText=displayVal;return;}
var recIndex=this._control.store.find(this._control.valueField,newVal);if(recIndex>=0){var rec=this._control.store.getAt(recIndex);displayVal=rec.get(this._control.displayField);this._record.set(this._displayField,displayVal);}}}});
Ext.define("RP.ui.StoreBoundComboBox",{alias:"widget.rpstoreboundcombobox",extend:"Ext.form.ComboBox",_storeBinder:null,previousSelectedValue:null,initComponent:function(){this.initialConfig.control=this;if(this.initialConfig.storeBindings){this._storeBinder=new RP.ui.ComboBoxStoreBinder(this.initialConfig);var okToLookup=false;if(this.initialConfig.storeBindings.store){this.initialConfig.storeBindings.store.on("load",function(store,recs){if(recs.length>0){this.previousSelectedValue=recs[0].get(this.initialConfig.valueField);okToLookup=false;}},this);}}
this.on("beforeselect",function(combo,rec,index){if(okToLookup){this.previousSelectedValue=this.getValue();}
else{okToLookup=true;}},this);this.callParent();}});
Ext.define("RP.ui.ToolTip",{extend:"Ext.tip.ToolTip",mode:['hover'],useArrow:true,useDynamicOffset:true,buttonAlign:'center',maxWidth:undefined,shadow:false,initComponent:function(){if(this.items&&this.items.length>0){this.addCls('complex-tip');}else{this.addCls('simple-tip');}
this._setMode(this.mode);this._setUseArrow(this.useArrow);this.callParent(arguments);this.on('show',this._onTooltipShow,this);this.on('hide',this._onTooltipHide,this);},_setUseArrow:function(useArrow){this.useArrow=useArrow;if(this.useArrow){this.on('show',this._onBeforeShowSingle,this,{single:true});}
else{this.un('show',this._onBeforeShowSingle,this,{single:true});}},_setMode:function(mode){if(!Ext.isArray(mode)){this.mode=[mode];}
if(this.supportsMode('click')){Ext.apply(this,{mouseDownXY:[null,null],showDelay:0,trackMouse:false});if(!this.supportsMode('hover')){Ext.apply(this,{autoHide:false});}}},_onBeforeShowSingle:function(){if(this.anchorEl){this.anchorEl.setStyle({visibility:'visible'});}},_onTooltipShow:function(){var body=Ext.getBody();var maskZIndex=body.mask().addCls('x-transparent-mask').getPositioning()['z-index'],currentZIndex=this.getEl().getStyle('z-index'),newIdx=Ext.Number.from(maskZIndex)+1;if(newIdx>currentZIndex){this.zIndexManager.zseed=newIdx;this.getEl().setStyle('z-index',newIdx);}
var box=this.getBox();if(box.x+box.width>body.getWidth()){var x=body.getWidth()-(box.width+10);this.setPagePosition(x,box.y);}},_onTooltipHide:function(){Ext.getBody().unmask();},getTargetXY:function(){var me=this,mouseOffset,offsets,xy,dw,dh,de,bd,scrollX,scrollY,axy,sz,constrainPosition;if(me.delegate){me.anchorTarget=me.triggerElement;}
if(me.anchor){me.targetCounter++;offsets=me.getOffsets();xy=(me.anchorToTarget&&!me.trackMouse)?me.el.getAlignToXY(me.anchorTarget,me.getAnchorAlign()):me.targetXY;dw=Ext.Element.getViewWidth()-5;dh=Ext.Element.getViewHeight()-5;de=document.documentElement;bd=document.body;scrollX=(de.scrollLeft||bd.scrollLeft||0)+5;scrollY=(de.scrollTop||bd.scrollTop||0)+5;axy=[xy[0]+offsets[0],xy[1]+offsets[1]];sz=me.getSize();constrainPosition=me.constrainPosition;me.anchorEl.removeCls(me.anchorCls);if(me.targetCounter<2&&constrainPosition){if(axy[1]<scrollY){if(me.anchorToTarget){me.defaultAlign='t-b';if(me.mouseOffset){me.mouseOffset[1]*=-1;}}
me.anchor='top';return me.getTargetXY();}
if(axy[1]+sz.height>dh){if(me.anchorToTarget){me.defaultAlign='b-t';if(me.mouseOffset){me.mouseOffset[1]*=-1;}}
me.anchor='bottom';return me.getTargetXY();}}
me.anchorCls=Ext.baseCSSPrefix+'tip-anchor-'+me.getAnchorPosition();me.anchorEl.addCls(me.anchorCls);me.targetCounter=0;if(me.renderTo){var cushion=8;var offsetLeft=me.renderTo.dom.offsetLeft+cushion;if(offsetLeft&&axy[0]<=offsetLeft){axy[0]=offsetLeft;}
var rightEdgeRenderTo=me.renderTo.dom.offsetLeft+me.renderTo.dom.offsetWidth-cushion;var rightEdgeTip=me.getWidth()+axy[0];if(rightEdgeRenderTo<rightEdgeTip){axy[0]=rightEdgeRenderTo-me.getWidth();}}
return axy;}else{mouseOffset=me.getMouseOffset();return(me.targetXY)?[me.targetXY[0]+mouseOffset[0],me.targetXY[1]+mouseOffset[1]]:mouseOffset;}},getOffsets:function(){var offsets=this.callParent(arguments);offsets[1]=offsets[1]+3;return offsets;},getAnchorAlign:function(){return(this.anchor==='top')?'t-b':'b-t';},syncAnchor:function(){var targetEl=Ext.get(this.anchorTarget),min,max,offset;if(this.useDynamicOffset){offset=targetEl.getX()+(targetEl.getWidth()/2)-(20+this.el.getX());max=this.el.getWidth()-44;min=4;this.anchorOffset=Ext.Number.constrain(offset,min,max);}
this.callParent(arguments);},supportsMode:function(mode){return this.mode.indexOf(mode)!==-1;},setTarget:function(target){if(this.supportsMode('hover')){this.callParent(arguments);if(!this.supportsMode('click')){return;}}
var t;if((t=Ext.get(target))){if(this.target!==t){this.targetChanged=true;}
if(this.target){var tg=Ext.get(this.target);this.mun(tg,"mousedown",this.onTargetMouseDown,this);this.mun(tg,"mouseup",this.onTargetMouseUp,this);}
this.mon(t,"mousedown",this.onTargetMouseDown,this);this.mon(t,"mouseup",this.onTargetMouseUp,this);this.target=t;this.anchorTarget=t;}},ignoreEvent:function(e){return this.disabled||e.within(this.target.dom,true);},onTargetMouseDown:function(e){if(!this.ignoreEvent(e)){this.mouseDownXY=e.getXY();}},onTargetMouseUp:function(e){var newXY=e.getXY();var oldXY=this.mouseDownXY;this.mouseDownXY=[null,null];if(this.ignoreEvent(e)||!(oldXY[0]==newXY[0]&&oldXY[1]==newXY[1])){return;}
var t=e.getTarget(this.delegate);if(t){var targetEl=Ext.get(t);this.triggerElement=t;this.anchorTarget=this.anchorTarget||targetEl;this.targetXY=newXY;if(this.isHidden()){this.show();}else{this.hide();}}},onDocMouseDown:function(e){if(!this.eventWithinTooltip(e)){this.disable();Ext.defer(this.doEnable,100,this);}},eventWithinTooltip:function(event){var owningComponent;if(event.within(this.el.dom)){return true;}
owningComponent=RP.util.Component.getComponentFromElement(Ext.get(event.getTarget()));if(owningComponent){return owningComponent.up('[id='+this.id+']')||owningComponent.floatParent===this;}
return false;},showFromClickEvent:function(event){var target=event.getTarget();this.setTarget(target);this.mouseDownXY=event.getXY();this.anchorTarget=target;if(this.targetChanged){this.onTargetMouseUp(event);}
this.targetChanged=false;}});
Ext.ns("RP.ui");RP.ui.GridRowStyle=function(){var classMap={None:{status:0,cls:""},Resolved:{status:1,cls:"rp-grid-row-resolved"},Deleted:{status:2,cls:"rp-grid-row-deleted"},Edited:{status:3,cls:"rp-grid-row-edited"},Important:{status:4,cls:"rp-grid-row-important"},UserDefinedBegin:{status:100,cls:""}};return{getStatus:function(name){return classMap[name].status;},getDefaultStatus:function(){return classMap.None.status;},getClassByStatus:function(status){for(var name in classMap){if(classMap[name].status==status){return classMap[name].cls;}}
return classMap.None.cls;},getClassByName:function(name){if(classMap[name]){return classMap[name].cls;}
else{return classMap.None.cls;}}};}();RP.ui.GridRowStatus={None:RP.ui.GridRowStyle.getStatus("None"),Resolved:RP.ui.GridRowStyle.getStatus("Resolved"),Deleted:RP.ui.GridRowStyle.getStatus("Deleted"),Edited:RP.ui.GridRowStyle.getStatus("Edited"),Important:RP.ui.GridRowStyle.getStatus("Important"),UserDefinedBegin:100};
Ext.define("RP.ui.GridView",{extend:"Ext.grid.View",alias:"widget.rpgridview",afterRender:function(){this.callParent(arguments);if(this.getStore().isLoaded){this.applyEmptyText();}
this.up("gridpanel").initState();},getRowClass:function(record,index,rowParams,store){var defaultRowStyleClassFn=function(status,record){return RP.ui.GridRowStyle.getClassByStatus(status);};var status=this.getRowStatusFn?this.getRowStatusFn(record,index):RP.ui.GridRowStyle.getDefaultStatus();var cls=(this.getRowStyleClassFn||defaultRowStyleClassFn)(status,record);return cls+(this.extraRowCls?(" "+this.extraRowCls):"");},applyEmptyText:function(){this.callParent(arguments);if(this.emptyText&&!this.hasRows()){this.mainHd.hide(false);}
else{this.mainHd.show(false);}},renderRowsForExport:function(startRow,endRow,includeColumnDelegate){var dataStore=this.getStore(),stripe=this.stripeRows,headerCt=this.getHeaderCt(),colCount=headerCt.getColumnCount();if(dataStore.getCount()<1){return'';}
var columnData=this.getGridColumns();startRow=startRow||0;endRow=!Ext.isDefined(endRow)?dataStore.getCount()-1:endRow;var records=dataStore.getRange(startRow,endRow);var pushColumn=true;var evaluateColumn=false;if(includeColumnDelegate!==null&&typeof includeColumnDelegate==="function"){evaluateColumn=true;}
var groupField;var groups=[];if(Ext.isDefined(dataStore.groupField)){groupField=dataStore.groupers.get(0).property;}
var rows=[];for(var j=0;j<records.length;j++){var record=records[j];var row=[];for(var i=0;i<colCount;i++){var column=columnData[i];if(evaluateColumn){pushColumn=includeColumnDelegate.call(this,column);}
if(pushColumn){if(Ext.isDefined(dataStore.groupField)){var groupValue=record.data[groupField];if(Ext.isDefined(groupValue)&&groups.indexOf(groupValue)===-1){groups.push(groupValue);rows.push(Ext.String.format("\"{0}\"",groupValue));}}
var columnString=record.data[column.dataIndex];if(typeof column.renderer==="function"){columnString=column.renderer.call(column.scope,record.data[column.dataIndex],column,record,i,dataStore,this);var div=document.createElement("div");div.innerHTML=columnString;columnString=div.textContent||div.innerText||"";}
if(typeof columnString==="string"){columnString=columnString.replace(/\"/g,"\\\"");}
row.push(Ext.String.format("\"{0}\"",columnString));}}
rows.push(row.join(","));}
return rows.join("\n");},isHideableColumn:function(c){return!c.hidden&&c.hideable!==false;}});
Ext.define("RP.ui.GridPanel",{extend:"Ext.grid.Panel",alias:"widget.rpgridpanel",stripeRows:true,enableExport:false,enableExportPdf:false,enablePrint:false,enableRefresh:false,printTitle:"",viewType:"rpgridview",tooltipClass:"Ext.ToolTip",initComponent:function(){if(this.columns){this.columnConfig=this.columns;}
if(this.statusIcon===true){this._attachIconColumn();this.on("reconfigure",this._attachIconColumn,this);}
var toolbar=this.tbar;this.viewConfig=this.gridViewConfig||this.viewConfig||{};Ext.applyIf(this.viewConfig,{store:this.store});if(this.enableExport||this.enableExportPdf||this.enablePrint||this.enableRefresh){var tools=[];if(this.enableRefresh){tools.push({xtype:"tool",type:"refresh",handler:this.reloadGrid,scope:this});}
if(this.enableExport){tools.push({xtype:"tool",type:"save",handler:this.exportGridAsCSV,scope:this});}
if(this.enableExportPdf){tools.push({xtype:"tool",type:"pdf",handler:this.exportGridAsPDF,scope:this});}
if(this.enablePrint){tools.push({xtype:"tool",type:"print",handler:this.printGrid,scope:this});}
if(toolbar){if(typeof(toolbar.addItemsToRightBar)!=="function"){RP.throwError("Toolbar type is not supported.  Toolbar must have 'addItemsToRightBar' function.");}
toolbar.addItemsToRightBar(tools);}
else{toolbar=new RP.ui.Toolbar({right:{items:tools}});}}
Ext.applyIf(this,{tbar:toolbar});if(Ext.isEmpty(this.view)){this.view=this.gridView;}
this.callParent(arguments);},onRender:function(){this.callParent(arguments);this.addEvents("beforetooltipshow");var defaultTooltipConfig={renderTo:RP.getTaskflowFrame()._rpViewPanel.el,target:this.getEl(),delegate:this.getView().cellSelector,dismissDelay:0,trackMouse:true,anchor:"top",listeners:{beforeshow:this._renderTooltip,scope:this}};this.tooltip=Ext.create(this.tooltipClass,Ext.apply({},this.tooltipConfig,defaultTooltipConfig));},reconfigure:function(store,columns){this.columnConfig=columns;this.callParent(arguments);},_attachIconColumn:function(){var columns=this.columnConfig;var newCols=[{dataIndex:"__statusiconplaceholder__",header:" ",id:"iconColumn",menuDisabled:true,width:22,sortable:false,hidden:false,hideable:false,editable:false,renderer:function(){return'<div class="rp-view-grid-detail">&nbsp;</div>';},destroy:Ext.emptyFn}];this.columns=columns.concat(newCols);if(this.rendered){this.suspendEvents(false);this.reconfigure(null,this.columns);this.resumeEvents();}},_renderTooltip:function(tt){var v=this.getView();var rowElement=v.findItemByChild(tt.triggerElement);if(!Ext.isEmpty(rowElement)&&!Ext.fly(rowElement).hasCls("x-grid-summary-row")){var row=v.indexOf(rowElement);var cell=-1;Ext.iterate(v.findItemByChild(tt.triggerElement).cells,function(item,index){if(item===tt.triggerElement){cell=index;return false;}});var colConfig=this.columns[cell];if(colConfig!==undefined&&colConfig.cellTooltip===true){this.fireEvent("beforetooltipshow",this,row,cell);if(tt.body.dom.innerHTML===""){tt.hide();return false;}}
else{tt.hide();return false;}}
else{return false;}},getMarkupForPrinting:function(){var view=this.getView();var ts=view.tpl;var bak={};bak.body=ts.body;bak.master=ts.master;bak.header=ts.header;bak.hcell=ts.hcell;bak.row=ts.row;bak.cell=ts.cell;ts.master=new Ext.Template('<table>','{header}','<tbody>','{body}','{summary}','</tbody>','</table>');ts.header=new Ext.Template('<thead><tr>{cells}</tr></thead>\n');ts.hcell=new Ext.Template('<td class="rp-print-header-cell" style="{style}">','{value}',"</td>");ts.row=new Ext.Template('<tr class="{alt}">{cells}</tr>\n');ts.cell=new Ext.Template('<td style="{style}" {cellAttr}>','{value}',"</td>");var cb=this._exportHeaderRow(true,ts.hcell);var header=ts.header.apply({cells:cb.join("")});var body=this.body.down("tbody").dom.innerHTML;var html=ts.master.apply({header:header,body:body});view.templates=bak;return html;},printGrid:function(){if(typeof(this.initialConfig.printOptionsDelegate)==="function"){var fn=function(options){RP.core.CommonExtensions.printComponents({title:this.printTitle,items:this},options);};this.initialConfig.printOptionsDelegate(Ext.bind(fn,this));}
else{RP.core.CommonExtensions.printComponents({title:this.printTitle,items:this});}},reloadGrid:function(){this.getStore().load();},exportGridAsCSV:function(){var exportData=this._exportAsCSV();this._exportGrid(exportData,"CSV");},exportGridAsPDF:function(){var exportData=this._exportAsCSV();this._exportGrid(exportData,"PDF");},_exportGrid:function(exportData,type){var postExportUrl=RP.globals.getValue('POST_EXPORT_URL');var getExportUrl=RP.globals.getValue('GET_EXPORT_URL');if(typeof(postExportUrl)==="undefined"){logger.logError("[GridPanel] RP.globals.POST_EXPORT_URL not defined");return;}
if(typeof(getExportUrl)==="undefined"){logger.logError("[GridPanel] RP.globals.GET_EXPORT_URL not defined");return;}
var baseUrl=RP.globals.getPath('BASE_URL');Ext.Ajax.request({url:Ext.String.format("{0}?type={1}",baseUrl+postExportUrl,type),method:'POST',params:exportData.data,scope:this,headers:{'Content-Type':exportData.contentType},success:function(res){var key=res.responseText;window.open(baseUrl+getExportUrl+"/"+key,"rpexport","width=20,height=20,resizable=yes");},failure:function(e){logger.logError("Export failed");}});},_exportAsCSV:function(){var headerRow=this._exportHeaderRow(true);var header=this._escapeColumns(headerRow);var rows=this.getView().renderRowsForExport(0,this.getStore().getCount(),this._includeColumn);var summary="";if(this.getView().summary&&this.getView().summary.dom){summary=this._getSummaryCSV(this.getView().summary.dom,this.getView());}
return{data:Ext.String.format("{0}\n{1}\n{2}",header,rows,summary),contentType:"text/plain; charset=utf-8"};},_includeColumn:function(column){if(typeof column.style==="string"&&column.style.indexOf("display:none;")>-1){return false;}
else if(typeof column.style==="object"&&column.style.display==="none"){return false;}
return true;},_exportHeaderRow:function(checkVisibility,cellTemplate){var headerCt=this.getView().getHeaderCt();var len=headerCt.getColumnCount();var gridColumns=headerCt.getGridColumns();var cols=[];for(var i=0;i<len;i++){var column={};column.id=gridColumns[i].dataIndex||"&nbsp;";column.value=gridColumns[i].text||" ";column.style=gridColumns[i].style||" ";if(cellTemplate){cols.push(cellTemplate.apply(column));}
else{cols.push(column);}}
return this._exportRow(cols);},_escapeColumns:function(row){var rowString=row.join("\",\"");rowString="\""+rowString+"\"";return rowString;},_getSummaryHTML:function(summaryDOM,view){var masterTemplate=new Ext.Template('<tr>','{body}','</tr>');var cols=Ext.query("div.x-grid3-cell-inner",summaryDOM);var rowHTML=[];for(var i=0;i<cols.length;i++){var colStyle=view.getColumnStyle(i,true);var colValue=cols[i].innerHTML;rowHTML.push(Ext.String.format('<td style="{0}">{1}</td>',colStyle,colValue));}
return masterTemplate.apply({body:rowHTML.join("")});},_getSummaryCSV:function(summaryDOM,view){var masterTemplate=new Ext.Template('{body}');var cols=Ext.query("div.x-grid3-cell-inner",summaryDOM);var row=this._exportRow(cols);return masterTemplate.apply({body:this._escapeColumns(row)});},_exportRow:function(cols){var row=[];for(var i=0;i<cols.length;i++){if(this._includeColumn(cols[i])){if(cols[i].innerHTML){row.push(cols[i].innerHTML);}
else if(cols[i].value){row.push(cols[i].value);}
else{row.push(cols[i]);}}}
return row;}});RP.iimplement(RP.ui.GridPanel,RP.interfaces.IPrintSource);
Ext.define("RP.ui.Panel",{extend:"Ext.panel.Panel",alias:"widget.rpuipanel",scrollToBottom:function(animate){var content=this.body;content.scroll("b",content.dom.scrollHeight,animate);}});
Ext.define("RP.ui.InactivityWarningDialog",{extend:"Ext.window.Window",secondsUntilExpire:60,timeoutTask:{},id:"inactivityWarningDialog",isAjaxRequestExecuting:false,initComponent:function(){this.expireCountDown=this.secondsUntilExpire;Ext.apply(this,{title:RP.getMessage("rp.common.login.InactivityWarningTitle"),width:450,draggable:false,closable:false,resizable:false,bodyPadding:20,bodyStyle:"background-color: #fff",items:[{xtype:"box",itemId:"message",style:"font-size: 12px; margin-bottom: 30px;",html:this.getDisplayMessage()},{itemId:"pnlButtons",border:false,buttonAlign:"center",buttons:[{text:RP.getMessage("rp.common.login.ContinueButton"),id:'btnContinue',scope:this,handler:function(){RP.util.Helpers.keepSessionAlive();this.destroy();}},{text:RP.getMessage("rp.common.login.LogoutButton"),scope:this,itemId:'btnLogout',handler:function(){this.destroy();RP.util.Helpers.logout();}}]}]});this.callParent(arguments);},show:function(){Ext.getBody().maskEx();Ext.EventManager.onWindowResize(this.center,this);this.callParent(arguments);this.expireCountDown=this.secondsUntilExpire;var runFn=function(){this.getComponent("message").update(this.getDisplayMessage());if(this.expireCountDown--<=0&&!this.isAjaxRequestExecuting){this.isAjaxRequestExecuting=true;RP.util.Helpers.isUserActive(this.userActiveSuccess,this.expireSession,this);}};var taskCfg={run:runFn,interval:1000,scope:this};this.timeoutTask=Ext.TaskManager.start(taskCfg);},userActiveSuccess:function(response,options){var intervalMillis=(this.secondsUntilExpire+RP.util.PageInactivityChecker.getTimeOutInSeconds())*1000;this.isAjaxRequestExecuting=false;try{var result=Ext.JSON.decode(response.responseText);if(Ext.isNumber(result.data)){var serverLastBrowserActivity=parseInt(result.data,10);var serverLastBrowserActivityElapsed=(new Date())-serverLastBrowserActivity;if(serverLastBrowserActivityElapsed<intervalMillis){this.destroy();return;}}
this.expireSession();}
catch(ex){this.expireSession();}},stopCountdown:function(){this.isAjaxRequestExecuting=false;Ext.TaskManager.stop(this.timeoutTask);},destroy:function(){this.stopCountdown();Ext.getBody().unmask();Ext.EventManager.removeResizeListener(this.center,this);RP.event.AppEventManager.fire(RP.upb.AppEvents.ActiveAgain,{});this.callParent();},expireSession:function(){this.stopCountdown();this.hide();RP.event.AppEventManager.fire(RP.upb.AppEvents.BeforeSessionExpired,{});RP.util.Helpers.markSessionForReAuthentication();if(!Ext.getCmp("sessionExpiredDialog")&&!Ext.getCmp("externalAuthenticationExpiredDialog")){var dialog;if(!RP.util.Helpers.isNativeLogin()){dialog=new RP.ui.ExternalAuthenticationExpiredDialog();}
else{dialog=new RP.ui.SessionExpiredDialog();}
dialog.on("destroy",this.destroy,this);dialog.show();}},getDisplayMessage:function(){return Ext.String.format(RP.getMessage("rp.common.login.InactivityWarning"),Math.max(this.expireCountDown,0));}});
Ext.ns("RP.ui");Ext.define("RP.ui.ExternalAuthenticationExpiredDialog",{extend:"Ext.window.Window",id:"externalAuthenticationExpiredDialog",initComponent:function(){RP.event.AppEventManager.fire(RP.upb.AppEvents.SessionExpired,{});Ext.apply(this,{title:RP.getMessage("rp.common.login.InactivityTimeoutTitle"),width:450,draggable:false,closable:false,resizable:false,bodyPadding:20,bodyStyle:"background-color: #fff",items:[{xtype:"box",style:"font-size: 12px;",html:RP.getMessage("rp.common.login.InactivityTimeout")},{itemId:"pnlButtons",border:false,buttonAlign:"center",buttons:[{itemId:"btnOk",text:Ext.MessageBox.buttonText.ok,handler:RP.util.Helpers.logout}]}]});this.callParent(arguments);}});
Ext.define("RP.ui.TimeRange",{extend:"Ext.container.Container",timeFormat:RP.core.Formats.Time.Default,offsetMinutes:60,startDate:new Date(),initComponent:function(){this.addEvents("change");var now=RP.Date.roundBackToHour(this.startDate);Ext.applyIf(this,{cls:"rp-ui-time-range",startDateTime:now,endDateTime:RP.Date.addMinutes(RP.Date.clone(now),this.offsetMinutes),layout:"table",layoutConfig:{columns:5}});this._setLastStartDate(this.startDateTime);Ext.apply(this,{items:this._createItems()});this.createListeners();this.callParent(arguments);},_createItems:function(){var start=this.createStartDateTime();Ext.apply(this,start);var end=this.createEndDateTime();Ext.apply(this,end);return[this.startDateField,this.startTimeField,{xtype:"label",cls:"x-form-item",text:RP.getMessage("rp.common.components.ui.timeRange.toLabel")},this.endTimeField,this.endDateField];},createStartDateTime:function(){return{startDateField:new RP.ui.DateField({value:this._cloneAndClear(this.startDateTime)}),startTimeField:new RP.ui.TimeField({value:RP.Date.formatTime(this.startDateTime,this.timeFormat)})};},createEndDateTime:function(){return{endDateField:new RP.ui.DateField({value:this._cloneAndClear(this.endDateTime)}),endTimeField:new RP.ui.TimeField({value:RP.Date.formatTime(this.endDateTime,this.timeFormat)})};},getStartDateTime:function(){this.startTimeField.setTheDate(this.startDateField.getValue());return Ext.isEmpty(this.startTimeField.getDateTime())?null:RP.Date.clone(this.startTimeField.getDateTime());},getEndDateTime:function(){this.endTimeField.setTheDate(this.endDateField.getValue());return Ext.isEmpty(this.endTimeField.getDateTime())?null:RP.Date.clone(this.endTimeField.getDateTime());},setStartDateTime:function(startDate){this.startDateField.setValue(this._cloneAndClear(startDate));this.startTimeField.setValue(RP.Date.formatTime(startDate,this.timeFormat));},setEndDateTime:function(endDate){this.endDateField.setValue(this._cloneAndClear(endDate));this.endTimeField.setValue(RP.Date.formatTime(endDate,this.timeFormat));},createListeners:function(){this.startDateField.on({"select":this.onStartDateFieldUpdate,"change":this.onStartDateFieldUpdate,scope:this});this.endDateField.on("change",this.onEndDateFieldChange,this);this.startTimeField.on("change",this.onStartTimeFieldChange,this);this.endTimeField.on("change",this.onEndTimeFieldChange,this);this.startTimeField.on("blur",this.validateDuration,this);this.startDateField.on("blur",this.validateDuration,this);this.endTimeField.on("blur",this.validateDuration,this);this.endDateField.on("blur",this.validateDuration,this);},onEndDateFieldChange:function(){this.fireEvent("change",this.getStartDateTime(),this.getEndDateTime());},onStartDateFieldUpdate:function(field,newStartDate){var endTime=this.getEndDateTime();if(!Ext.isEmpty(endTime)){var deltaMS=this.getDurationDeltaMillis(this.lastStartDate,newStartDate);endTime.addMilliseconds(deltaMS);this.endTimeField.setValue(RP.Date.formatTime(endTime,this.timeFormat));this.endDateField.setValue(endTime);this._setLastStartDate(newStartDate);this.fireEvent("change",this.getStartDateTime(),this.getEndDateTime());}},onStartTimeFieldChange:function(field,newValue,oldValue){if(Ext.isEmpty(newValue)){this.startTimeField.setValue(null);}
else{this.startTimeField.setValue(newValue);var endTime=this.getEndDateTime();if(Ext.isEmpty(oldValue)&&!Ext.isEmpty(endTime)){oldValue=this.getStartDateTime().format("g:i a");}
else if(Ext.isEmpty(oldValue)&&Ext.isEmpty(endTime)){oldValue=this.getStartDateTime().add(Date.MINUTE,-this.offsetMinutes).format("g:i a");}
if(Ext.isEmpty(endTime)){endTime=this.getStartDateTime();}
var newStartTime=this.getStartDateTime();var oldStartTime=RP.core.IntervalJN.parseTimeAfterBase(oldValue,this._cloneAndClear(newStartTime));var deltaMS=this.getDurationDeltaMillis(oldStartTime,newStartTime);endTime.addMilliseconds(deltaMS);this.endTimeField.setValue(RP.Date.formatTime(endTime,this.timeFormat));this.endTimeField.setTheDate(endTime);this.endDateField.setValue(this._cloneAndClear(endTime));this.fireEvent("change",this.getStartDateTime(),this.getEndDateTime());}},getDurationDeltaMillis:function(oldDate,newDate){return newDate.deltaT(oldDate).ms;},onEndTimeFieldChange:function(field,newValue,oldValue){if(Ext.isEmpty(newValue)){this.endTimeField.setValue(null);}
else{var startTimeTest;if(Ext.isEmpty(this.getStartDateTime())){startTimeTest=this.getEndDateTime();}
else{startTimeTest=RP.core.IntervalJN.parseTimeAfterBase(this.startTimeField.getValue(),this.startDateField.getValue().clone());}
var endTimeTest=RP.core.IntervalJN.parseTimeAfterBase(this.endTimeField.getValue(),this.endDateField.getValue().clone());var endTime=this.getEndDateTime();if(this._cloneAndClear(startTimeTest).compareTo(this._cloneAndClear(endTimeTest))===0&&endTime<startTimeTest){RP.Date.clearTime(endTime.addDays(1));this.endTimeField.setTheDate(endTime);this.endDateField.setValue(endTime.clone());}
this.fireEvent("change",this.getStartDateTime(),this.getEndDateTime());}},validateDuration:function(){var startTime=this.getStartDateTime();var endTime=this.getEndDateTime();if(endTime<startTime){this.endTimeField.markInvalid(RP.getMessage("rp.common.components.ui.timeRange.invalidDuration"));this.endDateField.markInvalid(RP.getMessage("rp.common.components.ui.timeRange.invalidDuration"));}
else{this.endTimeField.clearInvalid();this.endDateField.clearInvalid();}},_setLastStartDate:function(date){this.lastStartDate=this._cloneAndClear(date);},_cloneAndClear:function(date){return RP.Date.clearTime(date);}});
Ext.define("RP.ui.TimeRangeDropDown",{extend:"RP.ui.TimeRange",alias:"widget.rpuitimerangedropdown",offsetMinutes:15,initComponent:function(){this.offsetMinutes=this.initialConfig.offsetMinutes;this.callParent();},createStartDateTime:function(){return{startDateField:new RP.ui.DateField({maxValue:this.initialConfig.maxValue,value:this._cloneAndClear(this.startDateTime)}),startTimeField:new RP.ui.TimeCombo({value:this.startDateTime.formatTime(this.timeFormat),format:this.timeFormat,offsetMinutes:this.offsetMinutes})};},createEndDateTime:function(){return{endDateField:new RP.ui.DateField({maxValue:this.initialConfig.maxValue,value:this._cloneAndClear(this.endDateTime)}),endTimeField:new RP.ui.TimeCombo({value:this.endDateTime.formatTime(this.timeFormat),format:this.timeFormat,offsetMinutes:this.offsetMinutes})};},createListeners:function(){this.callParent();this.startTimeField.on("focus",function(){this.endTimeField.collapse();},this);this.endTimeField.on("focus",function(){this.startTimeField.collapse();},this);}});
Ext.define("RP.ui.TimeCombo",{extend:"Ext.form.field.ComboBox",alias:"widget.rpuitimecombo",mixins:{timeControl:"RP.ui.Mixins.TimeControl"},offsetMinutes:15,hoursToBoundary:12,enableAutoComplete:false,fixedTimesInDropdown:true,initComponent:function(){this.initDate=this.initialConfig.initDate=new Date(2008,0,1);this.mixins.timeControl.constructor.call(this,this.initialConfig);this.store=new Ext.data.ArrayStore({fields:["key","value"]});this.store.loadData(this.createTimes(this.fixedTimesInDropdown?null:this.getDateTime(true)));Ext.apply(this,{autoSelect:false,enableKeyEvents:true,queryMode:"local",valueField:"value",displayField:"key",triggerAction:"all"});if(!this.initialConfig.emptyText){Ext.apply(this,{emptyText:RP.getMessage("rp.common.misc.EmptyTimeText")});}
this.on("render",this.onRenderHandler,this);this.on("keydown",this.onKeyDownHandler,this);this.on("expand",this.onExpandHandler,this);this.on("focus",this.onFocusHandler,this);this.callParent(arguments);},onRenderHandler:function(cmp){cmp.getEl().on("click",this.onElementClickHandler,this);},onElementClickHandler:function(){this.expand();},onKeyDownHandler:function(field,event){if(!this.enableAutoComplete){this.collapse();this.minChars=Number.MAX_VALUE;}},onTriggerClick:function(){this.reloadStore();this.callParent();},onExpandHandler:function(){this.reloadStore();var record=this.store.find("key",this.getRawValue());if(record==-1&&this.fixedTimesInDropdown){record=this.getNearestValue();}
var boundList=this.getPicker();var itemNode=boundList.getNode(record);var midPointItemsDropDown=7;var indexToScrollTo=(record+midPointItemsDropDown>this.store.getCount())?this.store.getCount()-1:record+midPointItemsDropDown;var itemNodeOffset=boundList.getNode(indexToScrollTo);if(itemNode){boundList.highlightItem(itemNode);boundList.listEl.scrollChildIntoView(itemNodeOffset,false);}},getNearestValue:function(){var currentRawValue=new Date(this.initDate.toDateString()+" "+this.getRawValue());for(var index=0;index<this.store.getCount();index++){if(this.store.getAt(index).get("value")>currentRawValue){return index===0?0:index-1;}}
return this.store.getCount()-1;},createTimes:function(time){if(Ext.isEmpty(time)){var twelveHours=43200000;var oneMinute=60000;var currentDate=RP.Date.clearTime(this.initDate);time=new Date(currentDate.getTime()+twelveHours-this.offsetMinutes*oneMinute);}
var times=[];var startDate=Ext.Date.add(time,Ext.Date.HOUR,-this.hoursToBoundary);var date;for(date=startDate;date<Ext.Date.add(startDate,Ext.Date.HOUR,this.hoursToBoundary*2);){date=Ext.Date.add(date,Ext.Date.MINUTE,this.offsetMinutes);times.push({"key":RP.Date.formatTime(date,this._format),"value":date});}
return times;},beforeBlur:function(){var value;try{value=RP.Date.parseTime(this.getRawValue(),RP.core.Formats.Time.Default);}
catch(e){}
if(value){this.typedValue=this.getRawValue();this.setRawValue(this.formatTime(value));}
this.callParent(arguments);},getErrors:function(value){var format=Ext.String.format,errors=this.callParent(arguments),minValue=this.minValue,maxValue=this.maxValue,time;if(value===null||value.length<1){return errors;}
try{time=RP.Date.parseTime(this.getRawValue(),this._format);}
catch(e){}
if(!time){errors.push(format(this.invalidText,value,this._format));return errors;}
return errors;},onFocusHandler:function(){this.expand();},reloadStore:function(){var isInList=(this.store.find("key",this.getRawValue())>=0);if(Ext.isEmpty(this.getRawValue())||!isInList){this.store.loadData(this.createTimes(this.fixedTimesInDropdown?null:this.getDateTime(true)));if(!this.enableAutoComplete){this.setTheTime(this.getDateTime(true));}}}});
Ext.define("RP.ui.Toolbar",{extend:"Ext.Container",alias:"widget.rptoolbar",initComponent:function(){var items=[];this._leftBar=null;this._rightBar=null;this._centerBar=null;this._containerCreated=false;if(this._hasLeftItems()||(this._hasCenterItems()&&!this._hasOnlyCenterItems())){this._createLeftBar();items=items.concat(this.getLeftBar());}
if(this._hasCenterItems()){this._createCenterBar();items=items.concat(this.getCenterBar());}
if(this._hasRightItems()||(this._hasCenterItems()&&!this._hasOnlyCenterItems())){this._createRightBar();items=items.concat(this.getRightBar());}
var containerConfig={layout:'hbox',cls:'rp-tbar-container '+this._getToolbarBackground(),items:items};Ext.apply(this,containerConfig);this.callParent(arguments);this._containerCreated=true;},getLeftBar:function(){return this._leftBar;},getCenterBar:function(){return this._centerBar;},getRightBar:function(){return this._rightBar;},addItemsToLeftBar:function(items){if(this._leftBar===null){this._createLeftBar(items);}
else{this._leftBar.add(items);}},addItemsToCenterBar:function(items){if(this._centerBar===null){this._createCenterBar(items);}
else{this._centerBar.add(items);}},addItemsToRightBar:function(items){if(this._rightBar===null){this._createRightBar(items);}
else{this._rightBar.add(items);}},_hasLeftItems:function(){return Ext.isDefined(this.left)&&Ext.isDefined(this.left.items);},_hasCenterItems:function(){return Ext.isDefined(this.center)&&Ext.isDefined(this.center.items);},_hasRightItems:function(){return Ext.isDefined(this.right)&&Ext.isDefined(this.right.items);},_hasOnlyCenterItems:function(){return(this._hasCenterItems()&&!this._hasLeftItems()&&!this._hasRightItems())?true:false;},_createLeftBar:function(){if(this._leftBar!==null){return;}
this._leftBar=Ext.widget('toolbar',Ext.applyIf(this.left,{cls:'rp-tbar',style:"border: none",flex:1}));if(this._isContainerAlreadyCreated()){this.insert(0,this._leftBar);}},_createCenterBar:function(){if(this._centerBar!==null){return;}
this._centerBar=Ext.widget("toolbar",Ext.applyIf(this.center,{layout:{type:'hbox',pack:'center',align:'middle'},cls:'rp-tbar',style:"border: none",flex:1}));if(this._isContainerAlreadyCreated()){this.insert(1,this._centerBar);}},_createRightBar:function(){if(this._rightBar!==null){return;}
this.right.items.unshift("->");this._rightBar=Ext.widget('toolbar',Ext.applyIf(this.right,{cls:'rp-tbar',style:"border: none",flex:1}));if(this._isContainerAlreadyCreated()){this.insert(2,this._rightBar);}},_getToolbarBackground:function(){return this.backgroundCls||'rp-tbar-background';},_isContainerAlreadyCreated:function(){return this._containerCreated;}});
Ext.define("RP.ui.TriCheckbox",{extend:"Ext.form.Checkbox",alias:"widget.rpuitricheckbox",values:[null,false,true],checkboxCls:['rp-ui-tri-checkbox-grayed',null,'rp-ui-tri-checkbox-checked'],validValues:this.values,defaultAutoCreate:{tag:'input',type:'hidden',autocomplete:'off'},onRender:function(ct,position){Ext.form.Checkbox.superclass.onRender.call(this,ct,position);this.innerWrap=this.el.wrap({tabIndex:this.tabIndex,cls:this.baseCls+'-wrap-inner'});this.wrap=this.innerWrap.wrap({cls:this.baseCls+'-wrap'});if(this.boxLabel){this.labelEl=this.innerWrap.createChild({tag:'label',htmlFor:this.el.id,cls:'x-form-cb-label',html:this.boxLabel});}
this.imageEl=this.innerWrap.createChild({tag:'img',src:Ext.BLANK_IMAGE_URL,cls:'x-checkbox'},this.el);this.imageEl.on("click",this.onClick,this);if((typeof this.value==="object"&&this.value===null)||this.value===true){this.setValue(this.value);}
else{this.setValue(false);}
this.originalValue=this.value;},getValue:function(){return Ext.form.Checkbox.superclass.getValue.call(this);},setValue:function(value){if(!(typeof value=="object"&&value===null)&&value!==true){value=false;}
if(this.validValue(value)){Ext.form.Checkbox.superclass.setValue.call(this,value);this.updateCheckCls();}
else{this.setCheckValueByIndex(this.getCheckIndex()+1);this.setValue(this.getNextCheckState());}},validValue:function(value){var valid=false;for(var ii=0;ii<this.validValues.length;ii++){var validValue=this.validValues[ii];if(value===validValue){valid=true;break;}}
return valid;},onClick:function(){this.toggleValue();},getCheckIndexByValue:function(value){for(var i=0;i<this.values.length;i++){if(value===this.values[i]){return i;}}
return 0;},getCheckIndex:function(){return this.getCheckIndexByValue(this.value);},setCheckValueByIndex:function(index){this.value=this.values[index];},setCheckState:function(state){if(typeof state==="number"){this.setCheckValueByIndex(state);}
else{var index=this.getCheckIndexByValue(state);this.setCheckValueByIndex(index);}
this.updateCheckCls();},updateCheckCls:function(){if(!this.wrap){return;}
var cls=this.checkboxCls[this.getCheckIndex()];this.wrap.replaceClass(this._checkCls,cls);this._checkCls=cls;},getNextCheckState:function(){return this.values[(this.getCheckIndex()+1)%this.values.length];},toggleValue:function(){if(!this.disabled&&!this.readOnly){this.setValue(this.getNextCheckState());}},afterRender:function(){Ext.form.Checkbox.superclass.afterRender.call(this);}});
Ext.define("RP.ui.DatePickerToolbar",{extend:"RP.ui.Toolbar",alias:"widget.rpdatepickertoolbar",initComponent:function(){if(!Ext.isDefined(this.datePicker)){RP.throwError(this.$className+" requires that a 'datePicker' be configured.");}
Ext.apply(this,{left:this.left||{},center:{items:this.datePicker,width:150},right:this.right||{}});this.callParent();}});
Ext.ns("RP.help");RP.help.RoboHelpLink=(function(){var mainUrl;var showHelp=function(target,urlHashTranslatorFn){var w,urlHash=window.location.hash;if(urlHash){var url=urlHashTranslatorFn(urlHash);if(url){w=window.open(url,target,"height=680,left=700,location=no,menubar=no,resizable=yes,scrollbars=yes,status=no,titlebar=no,toolbar=no,top=20,width=500,zoominherit=no");w.focus();}
else{Ext.Msg.show({title:RP.getMessage("rp.common.misc.NoHelpFoundTitle"),msg:RP.getMessage("rp.common.misc.NoHelpFoundText"),buttons:Ext.Msg.OK,icon:Ext.MessageBox.WARNING});}}
else{w=window.open(mainUrl,target,"height=680,left=400,top=20,width=800,location=no,menubar=no,resizable=yes,scrollbars=yes,status=no,titlebar=no,toolbar=no,zoominherit=no");w.focus();}};return{createHelpLink:function(config,mainURL,helpLabel,windowTarget,urlHashTranslatorFn){mainUrl=mainURL;return Ext.ComponentMgr.create(RP.util.Object.mergeProperties({id:'roboHelpLink',xtype:"hyperlink",text:helpLabel,handler:function(){showHelp(windowTarget,urlHashTranslatorFn);}},config));}};})();
RP.help.HelpRegistry=(function(){var appIdMap={};var defaultHelpURL="";return{setDefaultHelpURL:function(url){defaultHelpURL=url;},register:function(appId,rootHelpUrl){appIdMap[appId]=rootHelpUrl;},getHelpRootURL:function(appId){if(appIdMap[appId]){return appIdMap[appId];}
else{return null;}}};})();
Ext.define('RP.state.AbstractProvider',{extend:'Ext.state.Provider',inheritableStatics:{operation:{SET:1,CLEAR:2}},_initialized:false,constructor:function(config){this.callParent(arguments);this.addEvents('savesuccess','savefailure');if(!this.saveUrl&&!this.url){RP.throwError('Either saveUrl or url is required.');}
if(!this.clearUrl&&!this.url){RP.throwError('Either clearUrl or url is required.');}
if(this.saveUrl&&!this.saveUrl.match(".*/$")){this.saveUrl+="/";}
if(this.clearUrl&&!this.clearUrl.match(".*/$")){this.clearUrl+="/";}
if(this.url&&!this.url.match(".*/$")){this.url+="/";}
this.state=Ext.create(Ext.data.Store,{model:'RP.state.State',proxy:{type:'memory',data:RP.MODULE_STATE,reader:'json'}});this.tasks=new Ext.util.MixedCollection();this._writer=new Ext.data.writer.Json();},initialize:function(){if(!this._initalized){this.state.getProxy().data=RP.MODULE_STATE;this.state.load();this._initalized=true;}},get:function(stateId){this.initialize();var record=this._getState(stateId);if(record){return this.decodeValue(record.get('data'));}else{return undefined;}},set:function(stateId,state){this.initialize();if(state===undefined||state===null){return this.clear(stateId);}
var record=this._setState(stateId,state);if(record){this._queueChange(record,this.self.operation.SET);}},clear:function(stateId){this.initialize();var record=this._clearState(stateId);if(record){this._queueChange(record,this.self.operation.CLEAR);}},_queueChange:function(state,operation){if(!this.tasks.get(state)){this.tasks.add(state,new Ext.util.DelayedTask());}
this.tasks.get(state).delay(750,this._sendRequest,this,[state,operation]);},_getState:function(stateId){var index=this._getIndex(stateId);if(index>=0){return this.state.getAt(index);}else{return undefined;}},_setState:function(stateId,state){var encodedState=this.encodeValue(state);var index=this._getIndex(stateId);var record;if(index<0){record=this._createRecord(stateId,encodedState);this.state.add(record);}else if(encodedState!==this.state.getAt(index).get('data')){record=this.state.getAt(index);record.set('data',encodedState);}else if(this.state.getAt(index).get('global')===true){record=this.state.getAt(index);}
return record;},_createRecord:function(stateId,state){return new RP.state.State({module:this._getModule(),taskflow:this._getTaskflow(),task:this._getTask(),stateId:stateId,data:state});},_clearState:function(stateId){var record,index=this._getIndex(stateId);if(index>=0){record=this.state.getAt(index);this.state.removeAt(index);}
return record;},_getIndex:function(stateId){return this.state.findBy(function(record){return(record.get('module')===this._getModule()&&record.get('taskflow')===this._getTaskflow()&&record.get('task')===this._getTask()&&record.get('stateId')===stateId);},this);},_sendRequest:function(state,operation){Ext.Ajax.request(this._buildRequest(state,operation));},_buildRequest:RP.abstractFn,_onSaveCallback:function(opts,success,response){if(success!==true){RPUX.Util.logError(response.responseText);this.fireEvent('savefailure',this,opts.record,opts.operation);}else{this._invalidatePageCache();this.fireEvent('savesuccess',this,opts.record,opts.operation);}},_invalidatePageCache:(function(){var request={url:'/data/cache',params:{action:'invalidatePageCache'}};return function(){Ext.Ajax.request(request);};})(),_getModule:function(){if(RP.CURRENT_LOCATION&&RP.CURRENT_LOCATION.module){return RP.CURRENT_LOCATION.module;}else{return RP.core.PageContext.getActiveModuleName();}},_getTaskflow:function(){if(RP.CURRENT_LOCATION&&RP.CURRENT_LOCATION.taskflow){return RP.CURRENT_LOCATION.taskflow;}else{return RP.core.PageContext.getActiveTaskflowName();}},_getTask:function(){if(RP.CURRENT_LOCATION&&RP.CURRENT_LOCATION.task){return RP.CURRENT_LOCATION.task;}else{return RP.core.PageContext.getActiveTaskName();}}});
Ext.define('RP.state.RestProvider',{extend:'RP.state.AbstractProvider',_buildRequest:function(record,operation){var options={scope:this,callback:this._onSaveCallback,jsonData:[this._writer.getRecordData(record)],params:{},operation:operation,record:record,pathVars:{module:this._getModule(),taskflow:this._getTaskflow(),task:this._getTask(),stateId:record.get('stateId')}};if(operation===this.self.operation.SET){Ext.apply(options,{url:this.saveUrl||this.url,method:'POST'});}else if(operation===this.self.operation.CLEAR){Ext.apply(options,{url:this.clearUrl||this.url,method:'DELETE'});}
return RPUX.buildRequest(options);}});
Ext.define('RP.state.AjaxProvider',{extend:'RP.state.AbstractProvider',_buildRequest:function(record,operation){var options={scope:this,callback:this._onSaveCallback,method:'POST',record:record,operation:operation,jsonData:[this._writer.getRecordData(record)],params:{},pathVars:{module:this._getModule(),taskflow:this._getTaskflow(),task:this._getTask(),stateId:record.get('stateId')}};if(operation===this.self.operation.SET){Ext.apply(options,{url:this.saveUrl||this.url});}else if(operation===this.self.operation.CLEAR){Ext.apply(options,{url:this.clearUrl||this.url});}
return RPUX.buildRequest(options);}});
Ext.define('RP.state.State',{extend:'Ext.data.Model',fields:['module','taskflow','task','stateId','data',{name:'global',type:'boolean'}],validations:[{type:'presence',field:'module'},{type:'presence',field:'taskflow'},{type:'presence',field:'task'},{type:'presence',field:'stateId'},{type:'presence',field:'data'}]});
Ext.define('RP.taskflow.Actions',{extend:'Ext.container.Container',alias:'widget.rptaskflowactions',allowExport:false,allowPrint:false,allowRefresh:false,cls:'rp-taskflow-actions-ct',defaultRefreshInterval:-1,enableRefreshInterval:false,refreshIntervals:[5,10,15,30,60],timestampCls:'rp-taskflow-basetaskform-refresh-timestamp',initComponent:function(){Ext.apply(this,{items:this.createItems()});Ext.applyIf(this,{layout:'hbox'});this.callParent(arguments);},createItems:function(){var items=[];if(this.allowExport){this.exportButton=this._createExportButton();items.splice(0,0,this.exportButton);}
if(this.allowPrint){this.printButton=this._createPrintButton();items.splice(0,0,this.printButton);}
if(this.allowRefresh){this.refreshButton=this._createRefreshButton();if(this.enableRefreshInterval){items.splice(0,0,this._createRefreshInterval());}else{items.splice(0,0,this.refreshButton);}}
return items;},_createExportButton:function(){return Ext.ComponentManager.create({cls:'rp-taskflow-basetaskform-export-button',height:24,itemId:'exportAction',menu:this._getExportMenu(),menuAlign:'tr-br?',tooltip:RP.getMessage('rp.common.components.BaseTaskForm.export'),width:34,getSplitCls:function(){return'';}},'button');},_createPrintButton:function(){return Ext.ComponentManager.create({cls:'rp-taskflow-basetaskform-print-button',height:24,itemId:'printAction',menu:this._getPrintMenu(),menuAlign:'tr-br?',tooltip:RP.getMessage('rp.common.components.BaseTaskForm.print'),width:34,getSplitCls:function(){return'';}},'button');},_createRefreshButton:function(){return Ext.ComponentManager.create({cls:'rp-taskflow-basetaskform-refresh-button',height:24,itemId:'refreshAction',tooltip:RP.getMessage('rp.common.components.BaseTaskForm.refresh'),scope:this,width:34,handler:this._fireRefreshEvent},'button');},_createRefreshInterval:function(){this._refreshIntervalTask=Ext.util.TaskManager.newTask({run:this._fireRefreshEvent,scope:this});this.refreshButton.cls+=' rp-taskflow-basetaskform-refresh-embedded';this.refreshTimestamp=new Ext.container.Container({cls:this.timestampCls+' rp-taskflow-basetaskform-refresh-wrap',height:24,width:80,listeners:{afterrender:this._refreshStamp,scope:this}});this.on('refresh',this._refreshStamp,this);this.refreshIntervalButton=new Ext.button.Button({border:'1px 1px 1px 0',cls:'rp-taskflow-basetaskform-refresh-interval',height:24,itemId:'refreshIntervalButton',menu:this._getIntervalMenu(),menuAlign:'tr-br?',tooltip:RP.getMessage('rp.common.components.BaseTaskForm.refreshInterval'),width:17,getSplitCls:function(){return'';}});return Ext.ComponentManager.create({cls:'rp-taskflow-basetaskform-refresh-wrap',items:[this.refreshTimestamp,this.refreshButton,this.refreshIntervalButton]},'container');},_getExportMenu:function(){var menu=new Ext.menu.Menu({items:[{xtype:'container',hidden:'true'}],showSeparator:false});menu.on('beforeshow',function(me){var list=this._queryExportables();if(list.length===1&&list[0].exportFormats.length<=1){var collection=new Ext.util.MixedCollection();collection.add(list[0].id,list[0].exportFormats.length===1?list[0].exportFormats[0]:true);this._fireExportEvent(collection);return false;}else{me.removeAll(true);}},this);menu.on('show',function(me){me.alignTo(me.ownerButton,me.ownerButton.menuAlign);me.getEl().mask(RP.getMessage('rp.common.misc.LoadingMaskText'));var list=this._queryExportables();Ext.suspendLayouts();if(list.length>0){if(list.length>1){me.add(this._createSelectAllMenuItem());}
Ext.Array.each(list,function(cmp){var buttons=[];Ext.each(cmp.exportFormats,function(format){buttons.push({code:format.get('format'),text:format.get('display')});});me.add({xtype:'menucheckbuttonitem',text:cmp.optionTitle||cmp.title,registeredCmp:cmp,buttons:buttons});},me);me.add({xtype:'button',text:RP.getMessage('rp.common.components.BaseTaskForm.export'),handler:function(){var collection=new Ext.util.MixedCollection();Ext.Array.each(me.query('menucheckitem'),function(item){if(item._allCheckItem){return true;}
var value=item.checked;if(item.checked===true&&item.getPressedButton()!==null){value=item.getPressedButton().code;}
collection.add(item.registeredCmp.id,value);});me.hide();this._fireExportEvent(collection);},scope:this});}else{me.add({xtype:'container',html:RP.getMessage('rp.common.components.BaseTaskForm.noOptions')});}
Ext.resumeLayouts(true);me.getEl().unmask();},this);return menu;},_getIntervalMenu:function(){this.intervalMenu=new RP.menu.BoundMenu({cls:'rp-taskflow-basetaskform-interval-menu',displayField:'display',minWidth:119,showSeparator:false,store:this._buildIntervalStore(),valueField:'value'});this.intervalMenu.on('show',function(me){var max=0;me.items.each(function(item){max=item.getWidth();});me.minWidth=max;me.setWidth(this.refreshIntervalButton.ownerCt.getWidth());},this,{single:true});this.intervalMenu.on('change',function(me,value,old,item,oldItem){this._updateRefreshTask(value);if(oldItem){oldItem.removeCls('selected');}
item.addCls('selected');},this);this.setRefreshInterval(this.defaultRefreshInterval);return this.intervalMenu;},_updateRefreshTask:function(value){this._refreshIntervalTask.stop();if(value!==-1){this._refreshIntervalTask.start(value*60*1000);}},setRefreshInterval:function(interval){if(this.enableRefreshInterval){this.intervalMenu.setValue(Ext.Array.contains(this.refreshIntervals,interval)?interval:-1);}},_buildIntervalStore:function(){var data=[];Ext.Array.each(this.refreshIntervals,function(interval){var value=Math.ceil(interval);data.push([this._parseInterval(value),value]);},this);data.push([RP.getMessage('rp.common.misc.off'),-1]);return new Ext.data.Store({fields:[{name:'display',type:'string'},{name:'value',type:'integer'}],data:data,proxy:{type:'memory',reader:'array'}});},_parseInterval:function(interval){var minutes=interval%60;var hours=(interval-minutes)/60;return Ext.String.trim(Ext.String.format((hours>0?'{2} {0}':'')+(minutes>0?' {3} {1}':''),RP.getMessage('rp.common.misc.hour_abbr'),RP.getMessage('rp.common.misc.minute_abbr'),hours,minutes));},_getPrintMenu:function(){var menu=new Ext.menu.Menu({items:[{xtype:'container',hidden:'true'}],showSeparator:false});menu.on('beforeshow',function(me){var list=this._queryPrintables();if(list.length===1){var collection=new Ext.util.MixedCollection();collection.add(list[0].id,true);this._firePrintEvent(collection);return false;}else{me.removeAll(true);}},this);menu.on('show',function(me){me.alignTo(me.ownerButton,me.ownerButton.menuAlign);me.getEl().mask(RP.getMessage('rp.common.misc.LoadingMaskText'));var list=this._queryPrintables();Ext.suspendLayouts();if(list.length>0){me.add(this._createSelectAllMenuItem());Ext.Array.each(list,function(cmp){me.add({xtype:'menucheckitem',text:cmp.optionTitle||cmp.title,registeredCmp:cmp});},me);me.add({xtype:'button',text:RP.getMessage('rp.common.components.BaseTaskForm.print'),handler:function(){var collection=new Ext.util.MixedCollection();Ext.Array.each(me.query('menucheckitem'),function(item){if(item._allCheckItem){return true;}
collection.add(item.registeredCmp.id,item.checked);});me.hide();this._firePrintEvent(collection);},scope:this});}else{me.add({xtype:'container',html:RP.getMessage('rp.common.components.BaseTaskForm.noOptions')});}
Ext.resumeLayouts(true);me.getEl().unmask();},this);return menu;},_createSelectAllMenuItem:function(){return Ext.ComponentManager.create({_allCheckItem:true,text:RP.getMessage('rp.common.components.BaseTaskForm.alloptions'),listeners:{checkchange:function(cmp,checked){Ext.Array.each(cmp.parentMenu.query('menucheckitem'),function(cmp){cmp.setChecked(checked);});}}},'menucheckitem');},_queryExportables:function(){return this._query('component[_exportable]','_exportable','getExportablePlugin');},_queryPrintables:function(){return this._query('component[_printable]','_printable','getPrintablePlugin');},_query:function(selector,propertyName,methodName){var list=[],components=this.ownerTaskform.query(selector);if(this.ownerTaskform[propertyName]===true){Ext.Array.insert(components,0,[this]);}
Ext.Array.each(components,function(cmp){if(!cmp[methodName]||cmp[methodName]().disabled===false){list.push(cmp);}});return list;},_fireExportEvent:function(collection){this.fireEvent('export',collection);},_firePrintEvent:function(collection){this.fireEvent('print',collection);},_fireRefreshEvent:function(){this.fireEvent('refresh');},_refreshStamp:function(){this.refreshTimestamp.update(RP.core.Format.formatDateInUserTimeZone(new Date(),RP.core.Formats.Time.Short));}});
Ext.define("RP.taskflow.BaseTaskflowWidget",{extend:"Ext.panel.Panel",margin:'0 0 0 0',hideIfOnlyWidget:true,disabledWidget:false,width:216,ui:'',activeCls:'rp-widget-prototype-side-active',overCls:'rp-widget-prototype-side-hover',cls:'rp-taskflow-prototype-basetaskflow-widget',renderTpl:['<div id="{id}-body" class="{baseCls}-body<tpl if="bodyCls"> {bodyCls}</tpl>',' {baseCls}-body-{ui}<tpl if="uiCls">','<tpl for="uiCls"> {parent.baseCls}-body-{parent.ui}-{.}</tpl>','</tpl>"<tpl if="bodyStyle"> style="{bodyStyle}"</tpl>>','</div>'],dockedItems:[{xtype:'component',dock:'right',cls:'rp-widget-panel-center-right'},{xtype:'component',dock:'left',cls:'rp-widget-panel-center-left'}],hyperlinkCls:"rp-widget-hyperlink",taskForm:null,titleAlign:(RP.globals.NAV_REGION==='east'?'right':'left'),frame:false,shadow:false,initComponent:function(){this.addEvents("rpext-widget-setEnabled");this._taskContext=this.createDefaultTaskContext();if(this.initialConfig.xtype){var signature=RP.core.ComponentMgr.getSignature(this.initialConfig.xtype);for(var property in signature){var sig=signature[property];if(sig&&sig.required&&sig.direction.search(/in/i)!==-1&&!this.initialConfig[property]){logger.logDebug("[BaseTaskflowWidget] Required input config property: "+
property+" is missing on Widget: "+
this._getWidgetTitle());}}}
var extraCls=Ext.value(this.initialConfig.extraCls,this.hyperlinkCls,true);extraCls+=(this.initialConfig.hasPanel?"":" rp-widget-no-panel");this.initialConfig.cls="rp-vantage-item"+(extraCls?(" "+extraCls):"");this.initialConfig.anchor="100%";this.title=this._getWidgetTitle();Ext.apply(this,this.initialConfig);Ext.apply(this,{header:{xtype:'rpBaseTaskflowWidgetHeader'}});this.callParent(arguments);if(this.disabledWidget){this.addCls("rp-disabled-widget");}
this.addEvents("rpext-widgetclick","rpext-widgetchange");if(this.initialConfig.appEventHandlers){RP.event.AppEventProxy.registerListener(this,true);Ext.each(this.initialConfig.appEventHandlers,function(eh){RP.event.AppEventProxy.subscribe(eh.event,this,eh.handler,eh.removeDuplicates);},this);}
this.on("destroy",function(){this._taskflow=null;},this);this.on('afterrender',this._onAfterRender,this);},_onAfterRender:function(){this.mon(this.header,"click",this.onClick,this);this.mon(this.body,"click",this.onClick,this);if(this.onPostRender){this.onPostRender();}},onPostRender:function(){this.setActive(this.activeWidget);this._writeLine();this.el.addClsOnClick("rp-pressed-item");this.el.addClsOnOver("rp-hover-item");},createDefaultTaskContext:function(){return{};},getLocalContext:function(){return this.getTaskflow().getTaskMetadata(this.getTaskId()).getLocalContext();},getLocalContextValue:function(name){return this.getLocalContext()[name];},setLocalContextValue:function(name,value){var lc=this.getTaskflow().getTaskMetadata(this.getTaskId()).getLocalContext();lc[name]=value;},setTaskflow:function(tf){this._taskflow=tf;},getTaskflow:function(){return this._taskflow;},setTaskId:function(taskId){this._taskId=taskId;},getTaskId:function(){return this._taskId;},initializeLocalContext:Ext.emptyFn,getEnabled:function(){return!this.disabledWidget;},setEnabled:function(enabled){this.disabledWidget=!enabled;if(this.disabledWidget){this.addCls("rp-disabled-widget");}
else{this.removeCls("rp-disabled-widget");if(this.header&&this.header.rendered){this.header.el.dom.disabled=false;}}},createTaskForm:Ext.emptyFn,getTaskForm:function(){return this.taskForm;},raiseWidgetClick:function(){if(!this.disabledWidget){this.fireEvent("rpext-widgetclick",this);}},subscribeWidgetClick:function(delegate){this.mon(this,"rpext-widgetclick",delegate);},unsubscribeWidgetClick:function(delegate){this.mun(this,"rpext-widgetclick",delegate);},raiseWidgetChange:function(){this.fireEvent("rpext-widgetchange");},subscribeWidgetChange:function(delegate){this.mon(this,"rpext-widgetchange",delegate);},unsubscribeWidgetChange:function(delegate){this.mun(this,"rpext-widgetchange",delegate);},getTaskContext:function(){return this._taskContext;},setTaskContext:function(taskContext){var oldCtx=RP.core.PageContext.encodeContextAsHashValue(this._taskContext);var newCtx=RP.core.PageContext.encodeContextAsHashValue(taskContext);if(oldCtx!==newCtx){if(RP.globals.CURRENT_HASH.taskID===this.getTaskId()){RP.core.PageContext.updateTaskContext(taskContext);}
this._taskContext=taskContext;this.onTaskContextChanged();}},onTaskContextChanged:Ext.emptyFn,setActive:function(isActive){if(isActive){this.activeWidget=true;this.addCls(this.activeCls);}
else{this.activeWidget=false;this.removeCls(this.activeCls);}},onClick:function(ev){if(ev&&ev.stopEvent){ev.stopEvent();ev.getTarget().blur();}
this.raiseWidgetClick();},_getWidgetTitle:function(){return(this.initialConfig.title||this.initialConfig.uiTitle||this.title||this.uiTitle||"&nbsp;");},_writeLine:function(){if(!this.header.rendered){this.header.on("render",this._writeLine,this);}
else if(this.disabledWidget){this.header.el.dom.disabled=true;}},_getTaskFormItemId:function(){return this.initialConfig.itemId+"-taskform";}});RP.iimplement(RP.taskflow.BaseTaskflowWidget,RP.interfaces.ITaskWidget);
Ext.define("RP.taskflow.BaseTaskflowWidgetHeader",{extend:"Ext.panel.Header",alias:'widget.rpBaseTaskflowWidgetHeader',cls:'rp-taskflow-prototype-basetaskflow-widget-header',height:33,padding:0,arrowConfig:{height:25,margin:'0 0 5 0',width:11,cls:'rp-widget-header-arrow'},initComponent:function(){this.callParent();this.removeAll(false);this.add(this.titleCmp);this.insert(RP.globals.NAV_REGION==='east'?0:undefined,this._createArrowComponent());},_createArrowComponent:function(){return new Ext.Component(Ext.apply({},this.arrowConfig));}});
Ext.ns("RP.taskflow");RP.taskflow.TaskflowWidgetRegistry=function(){function xtypeFn(appId,xtype){return appId+"-"+xtype;}
var registeredWidgets={};return{register:function(config){if((config.appId.length===0)||(config.appId.toLowerCase()!==config.appId)){RP.throwError("appId must be lower-case and not empty - "+config.appId);}
if((config.xtype.length===0)||(config.xtype.toLowerCase()!==config.xtype)){RP.throwError("xtype must be lower-case and not empty - "+config.xtype);}
logger.logTrace("[TaskflowWidgetRegistry] Adding to registry. appId: "+config.appId+"; xtype: "+config.xtype);var xtypeName=xtypeFn(config.appId,config.xtype);if(config.paramArray===undefined||config.paramArray===null){config.paramArray=[];}
RP.core.ComponentMgr.register(xtypeName,config.classRef,config.paramArray);registeredWidgets[config.xtype]=Ext.apply({},config);},getWidgetXtype:function(appId,xtype,config){var cfg=config||{};cfg.xtype=xtypeFn(appId,xtype);return cfg;},getAll:function(){var defs=[];Ext.iterate(registeredWidgets,function(name,def){defs.push(Ext.apply({},def));});return defs;}};}();RP.registerWidget=RP.taskflow.TaskflowWidgetRegistry.register;RP.getWidgetXtype=RP.taskflow.TaskflowWidgetRegistry.getWidgetXtype;
Ext.define("RP.taskflow.BaseTaskForm",{extend:"Ext.panel.Panel",alias:"widget.rptaskform",actionConfigs:['allowExport','allowPrint','allowRefresh','defaultRefreshInterval','enableRefreshInterval','refreshIntervals','timestampCls'],centerTools:undefined,headerCls:'rp-taskflow-basetaskform-header',headerHeight:(64-22+16),marginString:RP.globals.NAV_REGION==='west'?'0 16 10 12':'0 12 10 16',noGutter:false,fullScreen:false,initComponent:function(){logger.logTrace("[BaseTaskForm] initComponent itemId: "+this.itemId);RP.event.AppEventProxy.registerListener(this,false);if(this.initialConfig.appEventHandlers){Ext.each(this.initialConfig.appEventHandlers,function(eh){logger.logTrace("[BaseTaskForm] Subscribing to app event: "+eh.event);RP.event.AppEventProxy.subscribe(eh.event,this,eh.handler,eh.removeDuplicates);},this);}
Ext.apply(this,{margin:(this.noGutter||this.noHeader)?'':this.marginString,bodyStyle:'border-width: 0px;',border:false,header:this._getHeaderConfig()});this._maybeEnableFullScreen();this.callParent(arguments);this.addEvents('refresh','print','export');if(this.actionContainer){this.relayEvents(this.actionContainer,['export','print','refresh']);}},dirtyWarningMessageId:"rp.common.misc.DirtyWarningMessage",isDirty:Ext.emptyFn,destroy:function(){logger.logTrace("[BaseTaskForm] destroyed itemId: "+this.itemId);RP.event.AppEventProxy.unregisterListener(this);this.callParent();},onActivate:function(){logger.logTrace("[BaseTaskForm] onActivate itemId: "+this.itemId);window.onbeforeunload=Ext.bind(function(){if(Ext.isFunction(this.isDirty)&&this.isDirty()===true){Ext.defer(this.checkLeavePage,3000);return RP.getMessage(this.dirtyWarningMessageId);}
window.leavingPage=true;},this);RP.event.AppEventProxy.setState(this,true);},checkLeavePage:function(){if(Ext.Ajax.activeRequests>0){window.leavingPage=true;}
Ext.defer(function(){window.leavingPage=false;},3000);},onBeforeDeactivate:function(cb){cb(true);},onDeactivate:function(){logger.logTrace("[BaseTaskForm] onDeactivate itemId: "+this.itemId);RP.event.AppEventProxy.setState(this,false);},getUrlHash:function(){if(!this.__urlHash){this._urlHash=Ext.id();}
return this.__urlHash;},setUrlHash:function(hash){this.__urlHash=hash;},_getHeaderConfig:function(){var headerTools=[];if(this.centerTools){headerTools=[{xtype:'toolbar',style:'border-width: 0px;',flex:1,items:this.centerTools,layout:{type:'hbox',overflowHandler:'Menu',pack:'center'}}];}
if(this.tools){headerTools=headerTools.concat(this.tools);}
var config={xtype:'header',height:this.headerHeight,baseCls:'',cls:this.headerCls,layout:'column',tools:headerTools,listeners:{beforerender:function(header){if(this.centerTools){delete header.titleCmp.flex;}},scope:this}};if(this.allowExport||this.allowPrint||this.allowRefresh){this.actionContainer=this._createActionContainer();config.tools.push(this.actionContainer);}
return config;},_createActionContainer:function(){var cfg={ownerTaskform:this},props=this.actionConfigs,len=props.length,i=0,prop;for(;i<len;++i){prop=props[i];if(prop in this){cfg[prop]=this[prop];}}
return Ext.create('RP.taskflow.Actions',cfg);},enableRefresh:function(){var btn=this.getRefreshButton();if(btn){btn.enable();}},disableRefresh:function(){var btn=this.getRefreshButton();if(btn){btn.disable();}},getRefreshButton:function(){if(!this.actionContainer||!this.actionContainer.refreshButton){return null;}
return this.actionContainer.refreshButton;},enablePrint:function(){var btn=this.getPrintButton();if(btn){btn.enable();}},disablePrint:function(){var btn=this.getPrintButton();if(btn){btn.disable();}},getPrintButton:function(){if(!this.actionContainer||!this.actionContainer.printButton){return null;}
return this.actionContainer.printButton;},enableExport:function(){var btn=this.getExportButton();if(btn){btn.enable();}},disableExport:function(){var btn=this.getExportButton();if(btn){btn.disable();}},getExportButton:function(){if(!this.actionContainer||!this.actionContainer.exportButton){return null;}
return this.actionContainer.exportButton;},_maybeEnableFullScreen:function(){if(this.fullScreen){this.on('activate',this._onFullScreenActivate,this);this.on('deactivate',this._onFullScreenDeactivate,this);}},_onFullScreenActivate:function(){RP.getTaskflowFrame().getWidgetContainer().hide();},_onFullScreenDeactivate:function(){RP.getTaskflowFrame().getWidgetContainer().show();}});RP.iimplement(RP.taskflow.BaseTaskForm,RP.interfaces.ITaskForm);RP.core.ComponentMgr.register("rptaskform","RP.taskflow.BaseTaskForm",[]);
Ext.define("RP.taskflow.BaseTaskflowWidgetWithPanel",{extend:"RP.taskflow.BaseTaskflowWidget",dockedItems:[{xtype:'component',dock:'right',cls:'rp-widget-panel-center-right'},{xtype:'component',dock:'left',cls:'rp-widget-panel-center-left'}],bodyCls:'rp-taskflow-prototype-basetaskflow-widget-with-panel-widget-body',initComponent:function(){var config=this.initialConfig;config.defaults=Ext.applyIf(config.defaults||{},{border:false,width:180});config.hasPanel=true;config.extraCls=(config.extraCls?config.extraCls+" ":"")+"rp-widget-with-panel";config.items=config.panel;this.bbar={xtype:"component",html:['<div class="rp-widget-panel-bottom-left">','<div class="rp-widget-panel-bottom-right">','<div class="rp-widget-panel-bottom-center"></div>','</div>','</div>'].join("")};this.callParent();}});
Ext.define("RP.taskflow.ExternalAppWidget",{extend:"RP.taskflow.BaseTaskflowWidget",createTaskForm:function(){this.taskForm=new RP.taskflow.ExternalAppTaskForm({url:this.url,title:this.frameTitle,itemId:this._getTaskFormItemId()});}});RP.registerWidget({appId:"stash",description:"External app widget",xtype:"external-app",classRef:"RP.taskflow.ExternalAppWidget"});
Ext.define("RP.taskflow.Taskflow",{mixins:{observable:"Ext.util.Observable"},constructor:function(config){Ext.apply(this,config);this.mixins.observable.constructor.call(this);this.initialConfig=Ext.apply({},config);this.flowContext=Ext.apply(config.initialContext||{},{});this._context={};this._initialized=false;this._completed=false;this._roster=null;this.addEvents("rpext-init","rpext-initialized","rpext-starting","rpext-task-completed","rpext-completed");if(Ext.isObject(config.listeners)){var l=config.listeners;var scope=l.scope||this;if(l.init){this.addInitListener(Ext.bind(l.init,scope));}
if(l.afterInit){this.addPostInitListener(Ext.bind(l.afterInit,scope));}
if(l.beforeStart){this.addTaskflowStartListener(Ext.bind(l.beforeStart,scope));}
if(l.complete){this.addTaskflowCompletedListener(Ext.bind(l.complete,scope));}}},getTaskflowContext:function(){return this._context;},mergeTaskflowContext:function(context){this._context=RP.mergeProperties(this._context,context);RP.core.PageContext.updateTaskflowContext(context);},getTaskflowUIConfig:function(){return this.initialConfig.uiConfig;},addInitListener:function(cb){this.on("rpext-init",cb);},addPostInitListener:function(cb){this.on("rpext-initialized",cb);},addTaskflowStartListener:function(cb){this.on("rpext-starting",cb);},addTaskCompletedListener:function(cb){this.on("rpext-task-completed",cb);},addTaskflowCompletedListener:function(cb){this.on("rpext-completed",cb);},setRebuildHandler:function(cb){this._rebuildHandler=cb;},rebuild:function(config){this._rebuildHandler(config);},isInitialized:function(){return this._initialized;},isCompleted:function(){return this._completed;},initTaskflow:function(initCompletedFn){this._completed=false;this._roster=new RP.collections.MixedCollection();var evtName="rpext-init";if(Ext.isObject(this.events[evtName])){var count=this.events[evtName].listeners.length;var continueFn=function(){count--;if(count===0){this._signalInitialized(initCompletedFn);}};this.fireEvent(evtName,this,Ext.bind(continueFn,this));}
else{this._signalInitialized(initCompletedFn);}},getTaskflowDescription:function(){if(this.initialConfig.uiConfig){return this.initialConfig.uiConfig.description;}
return null;},setTaskflowDescription:function(desc){this.initialConfig.uiConfig=this.initialConfig.uiConfig||{};this.initialConfig.uiConfig.description=desc;},getDefaultTaskId:function(){return this.initialConfig.defaultTaskId;},getTaskflowRoster:function(tfConfig){return this.initialConfig.roster;},createTaskWidgetConfig:function(taskConfig){if(!taskConfig.id){logger.logDebug("[Taskflow] Roster item missing 'ID' member.");return null;}
var signature=RP.core.ComponentMgr.getSignature(taskConfig.widget.xtype);var tfCtx=this._mapFlowToLocalContext(taskConfig.inParameterMapping,{},signature);var widgetConfig=RP.mergeProperties(taskConfig.widget,tfCtx);this._roster.add(taskConfig.id,{taskContext:this._createTaskMetadata(taskConfig,tfCtx),widgetCfg:widgetConfig,completed:null});return widgetConfig;},getTaskMetadata:function(taskID){return this._roster.get(taskID).taskContext;},startTaskflow:function(tfConfig){this.fireEvent("rpext-starting",this);},updateStatus:function(){if(this._completed){return;}
this._roster.each(function(rosterItem){var taskContext=rosterItem.taskContext;var localContext=RP.mergeProperties(rosterItem.widgetCfg,taskContext.getLocalContext());var signature=RP.core.ComponentMgr.getSignature(localContext.xtype);var taskCfg=taskContext.getConfig();this._mapLocalToFlowContext(taskCfg.outParameterMapping,localContext,signature);},this);var waiter=null;var waitObjs=[];var waitedReturnFn=function(rosterItem){if(Ext.isObject(waiter)){waiter.remove(rosterItem);}
else{Ext.Array.remove(waitObjs,rosterItem);}};this._roster.each(function(rosterItem){var taskContext=rosterItem.taskContext;var localContext=RP.mergeProperties(rosterItem.widgetCfg,taskContext.getLocalContext());var signature=RP.core.ComponentMgr.getSignature(localContext.xtype);var taskCfg=taskContext.getConfig();this._mapFlowToLocalContext(taskCfg.inParameterMapping,taskContext.getLocalContext(),signature);this._mapFlowToLocalContext(taskCfg.inParameterMapping,rosterItem.widgetCfg,signature);this._calculateTaskStatus(rosterItem,waitObjs,waitedReturnFn);},this);var tfCompletedCalcFn=Ext.bind(function(){var taskflowComplete=true;this._roster.each(function(rosterItem){taskflowComplete=taskflowComplete&&rosterItem.completed;},this);if(taskflowComplete){this._completed=true;this.fireEvent("rpext-completed",this);}},this);if(Ext.isEmpty(waitObjs)){tfCompletedCalcFn();}
else{waiter=new RP.util.Waiter({objs:waitObjs,handler:tfCompletedCalcFn});}},isTaskCompleted:function(taskID){var rosterItem=this._roster.get(taskID);return rosterItem.completed;},setTaskCompleted:function(taskID,completedStatus){this._setTaskCompleted(this._roster.get(taskID),completedStatus);this.updateStatus();},getTaskConfig:function(taskID){var rosterItem=this._roster.get(taskID);return rosterItem.taskContext.getConfig();},_createTaskMetadata:function(taskCfg,initialContext){return new RP.taskflow.TaskContext({taskCfg:Ext.apply({},taskCfg),initialContext:initialContext});},_setTaskCompleted:function(rosterItem,completedStatus){var fire=(completedStatus&&!rosterItem.completed);rosterItem.completed=completedStatus;if(fire){this.fireEvent("rpext-task-completed",this,rosterItem.taskContext.getConfig());}},_mapLocalToFlowContext:function(map,localContext,signature){if(map){for(var property in map){var localName=map[property];if(!signature[localName]||signature[localName].direction.search(/out/i)===-1){logger.logDebug("[Taskflow] Parameter "+localName+" doesn't exist");}
this.flowContext[property]=localContext[localName];}}
return this.flowContext;},_mapFlowToLocalContext:function(map,localContext,signature){if(map){for(var property in map){var localName=map[property];if(!signature[localName]||signature[localName].direction.search(/in/i)===-1){logger.logDebug("[Taskflow] Parameter "+localName+" doesn't exist");}
localContext[localName]=this.flowContext[property];}}
return localContext;},_calculateTaskStatus:function(rosterItem,waitObjs,waitedResultFn){var taskContext=rosterItem.taskContext;var taskCfg=taskContext.getConfig();var statusCalculation=taskCfg.statusCalculation;var localContext=RP.mergeProperties(rosterItem.widgetCfg,taskContext.getLocalContext());var statusResultFn=Ext.bind(function(result){this._setTaskCompleted(rosterItem,result);waitedResultFn(rosterItem);},this);if(taskCfg.completeTaskOnClick){return rosterItem.completed;}
else if(!Ext.isDefined(statusCalculation)){this._setTaskCompleted(rosterItem,true);}
else if(Ext.isString(statusCalculation)){logger.logTrace(Ext.String.format("[Taskflow] Performing eval() on '{0}' to set statusCalculation for '{1}'.",statusCalculation,localContext.itemId));statusCalculation=eval(statusCalculation);}
if(Ext.isFunction(statusCalculation)){waitObjs.push(rosterItem);statusCalculation.call({},localContext,this.flowContext,statusResultFn);}},_signalInitialized:function(initCompletedFn){this._initialized=true;initCompletedFn();this.fireEvent("rpext-initialized",this);}});RP.iimplement(RP.taskflow.Taskflow,RP.interfaces.ITaskflow2);
Ext.define("RP.taskflow.BaseTaskFormWithDateMenu",{extend:"RP.taskflow.BaseTaskForm",initComponent:function(){if(!Ext.isDefined(this.dateMenuConfig)){this.dateMenuConfig={};}
this._dateMenu=new RP.form.DirectionalDateField(this.dateMenuConfig);this.plugins=this.plugins||[];this.plugins.push(new RP.panel.plugin.HeaderComponent({item:this._dateMenu}));this.callParent();},getDateMenu:function(){return this._dateMenu;}});
Ext.define("RP.taskflow.ExternalAppTaskForm",{extend:"RP.taskflow.BaseTaskForm",initComponent:function(){var iframe=new Ext.ux.IFrameComponent({url:this.url||"about:blank"});Ext.apply(this,{items:iframe,noHeader:this.title?false:true,layout:"fit"});this.callParent();}});RP.core.ComponentMgr.register("rpexternalapp","RP.taskflow.ExternalAppTaskForm",[]);
Ext.define("RP.taskflow.TaskContext",{mixins:{observable:"Ext.util.Observable"},constructor:function(config){this._taskCfg=config.taskCfg;this._localContext=Ext.apply({},config.initialContext);this.addEvents("statuschanged","localcontextchanged");this.callParent(arguments);},getConfig:function(){return this._taskCfg;},subscribeStatusChange:function(handler){this.on("statuschanged",handler);},unsubscribeStatusChange:function(handler){this.un("statuschanged",handler);},fireStatusChange:function(){this.fireEvent("statuschanged",this);},getLocalContext:function(handler){return this._localContext;}});RP.iimplement(RP.taskflow.TaskContext,RP.interfaces.ITaskContext);
Ext.define("RP.taskflow.TaskflowFrame",{extend:"Ext.panel.Panel",activeWidget:undefined,initComponent:function(){logger.logTrace("[TaskflowFrame] initComponent; itemId: "+this.itemId);this._onAppActivatedFn=Ext.bind(this._onAppActivated,this);this._rebuildTaskflowFn=Ext.bind(this.rebuildTaskflow,this);this._tfAbortHandlerFn=Ext.bind(this._tfAbortHandler,this);this._beforeAppActivatedFn=Ext.bind(this._beforeAppActivatedHandler,this);this._initializeHistory();this._viewContainer=this._createViewContainer();var t=this._createTaskflows();this._rpTaskflowsContainer=this._createTaskflowContainer();Ext.apply(this,{bodyStyle:'border: 0;',itemId:this.itemId||"taskflowFrame",layout:{type:'border',targetCls:'rp-transparent-panel'},items:this._createItems()});this.buildModules(this.modules);this.callParent(arguments);if(t.waiter){t.waiter.resume();}
else{this._addTaskflowContainers(t.taskflows);}
this._customTaskflowViews={};},_createItems:RP.abstractFn,_getViewPanelLayoutConfig:function(){return{type:"card",deferredRender:true};},buildModules:function(modules){var items=[];if(!Ext.isEmpty(modules)){Ext.each(modules,function(module,index){var icon=RP.globals.paths.STATIC+module.icon;if(Ext.isEmpty(module.icon)){logger.logError("[TaskflowFrame] No module icon configured for: "+module.name);icon=Ext.BLANK_IMAGE_URL;}
items.push({title:Ext.String.format('<img src="{0}" /><br/>{1}',icon,RP.getMessage(module.label)),module:module,layout:"anchor",cls:"rp-module-contents-panel",itemId:module.name,items:module.items});if(module.name==RP.globals.CURRENT_MODULE.name){this._rpViewPanel.add(this._createLandingPage(module.landingPage));this._moduleIndex=index;}},this);}
else{this._rpViewPanel.add(this._createLandingPage());}
return items;},activateTaskflow:function(tf,activateDefaultWidget,activatedFn){var tfc=this._getTaskflowContainer(tf);if(Ext.isEmpty(activateDefaultWidget)){activateDefaultWidget=true;}
this._activateTaskflow(tfc,activateDefaultWidget,activatedFn);},rebuildTaskflow:function(tf,title,initialContext){var tfc=this._getTaskflowContainer(tf);if(!tfc){logger.logError("[TaskflowFrame] Cannot find taskflow container");return;}
tfc.resumeEvents();RP.core.PageContext.updateTaskflowContext(initialContext);var expandNewTfc=!tfc.collapsed;var itfc=RP.iget(tfc,RP.interfaces.ITaskflowContainer2);var tfCfg=this._createTaskflowContainerConfig({itemId:tfc.itemId,taskflow:itfc.getTaskflowName(),title:title||tfc.title,isTitleMessageName:tfc.isTitleMessageName||false,initialContext:initialContext});var idx=Ext.Array.indexOf(this._rpTaskflowsContainer.items,tfc);var newTfc=Ext.ComponentMgr.create(tfCfg);this._rpTaskflowsContainer.remove(tfc,true);this._rpTaskflowsContainer.insert(idx,newTfc);if(expandNewTfc){var hash=window.location.hash;this._activateTaskflow(tfc,Ext.isEmpty(hash)||hash===":",Ext.bind(function(taskFlowContainer){this.navigateToURLHash(hash);},this));}
tfc.destroy();tfc._widgetContainer.destroy();},addTaskflow:function(tfc,activateTF,activateDefaultWidget,activatedFn){logger.logInfo("[TaskflowFrame] addTaskflow called with itemId: "+tfc.initialConfig.itemId);if(typeof activateDefaultWidget==="undefined"){activateDefaultWidget=true;}
if(!RP.iget(tfc,RP.interfaces.ITaskflowContainer2)){logger.logDebug("[TaskflowFrame] RP.interfaces.ITaskflowContainer2 interface not implemented.");}
this._setupHandlersForTaskflowContainer(tfc);this._rpTaskflowsContainer.add(tfc);if(activateTF){this._activateTaskflow(tfc,activateDefaultWidget,activatedFn);}},removeTaskflow:function(tfc,deferLayout){logger.logInfo("[TaskflowFrame] removeTaskflow called with itemId: "+tfc.initialConfig.itemId);this._rpTaskflowsContainer.remove(tfc);tfc.destroy();},navigateToURLHash:function(urlHash){logger.logTrace("[TaskflowFrame] navigateToHash() called: "+urlHash);if(this._rpTaskflowsContainer.items.getCount()===0){logger.logTrace("[TaskflowFrame] navigateToHash() - no taskflows, so ignoring...");return;}
Ext.defer(this._activateDefaultWidget,100,this,[urlHash]);},_getTaskflowContainer:function(tf){if(typeof tf==="string"){return this._findTaskflowContainer(function(itfc){return(itfc.getTaskflowName()===tf);});}
else{return this._findTaskflowContainer(function(itfc){return(itfc.getTaskflow()===tf);});}},_findTaskflowContainer:function(matchFn){var tfc=null;this._rpTaskflowsContainer.items.each(function(c){var itfc=RP.iget(c,RP.interfaces.ITaskflowContainer2);if(matchFn(itfc)){tfc=c;return false;}},this);return tfc;},_preprocessTaskflow:function(tfConfig,beginDeferHandler,endDeferHandler){if(typeof tfConfig.itemId==="undefined"){logger.logWarning("[TaskflowFrame] The 'itemId' config attribute for a taskflow is not specified.  Taskflow title: "+tfConfig.title);}
var scheduleCheckFn=RP.taskflow.TaskflowRegistry.get(tfConfig.taskflow).scheduleCheckFn;if(Ext.isString(scheduleCheckFn)){logger.logTrace('[TaskflowFrame] String scheduleCheckFn detected, performing eval.');var evaluatedFn=eval(scheduleCheckFn);if(Ext.isFunction(evaluatedFn)){scheduleCheckFn=evaluatedFn;}
else{logger.logError(Ext.String.format('[TaskflowFrame] Taskflow "{0}" has a String scheduleCheckFn of "{1}" that did not actually evaluate to a function that exists, so it will be processed as normal."',tfConfig.taskflow,scheduleCheckFn));}}
if(Ext.isFunction(scheduleCheckFn)){logger.logTrace("[TaskflowFrame] Checking schedule for taskflow: "+tfConfig.taskflow);beginDeferHandler(tfConfig);var resultFn=Ext.bind(function(result){logger.logTrace("[TaskflowFrame] Schedule check result for taskflow '"+tfConfig.taskflow+"': "+result);Ext.defer(endDeferHandler,1,this,[tfConfig,!!result]);},this);var tfInitContext=RP.util.Object.mergeProperties(tfConfig.initialContext,RP.taskflow.TaskflowRegistry.getInitialContext(tfConfig.taskflow));scheduleCheckFn(resultFn,tfInitContext);}},getModules:function(){return this._modules;},_getModuleTabItemTpl:function(){var tabTemplate=new Ext.Template('<li class="{cls}" id="{id}"><a class="x-tab-strip-close"></a>','<a class="x-tab-right" href="javascript:void(0)"><em class="x-tab-left">','<span class="x-tab-strip-inner"><span class="x-tab-strip-text {iconCls}">{text}</span></span>','</em></a></li>');tabTemplate.disableFormats=true;tabTemplate.compile();return tabTemplate;},_createTaskflowContainer:function(){return Ext.ComponentMgr.create({id:"_rp_taskflow_container",xtype:"panel",style:this.initialConfig.hideAccordion?"padding-top: 12px":"",border:false,header:false,region:"center",layout:{type:this.hideAccordion?"fit":"accordion",animate:false},collapsible:true,initialSize:this.initialConfig.navInitialSize||200,items:[]});},_createTaskflows:function(){var t={taskflows:[]};var beginDeferHandler=Ext.bind((function(tfConfig){if(!t.waiter){t.waiter=new RP.util.Waiter({handler:Ext.bind(this._addTaskflowContainers,this,[t.taskflows])});t.waiter.suspend();}
t.waiter.add(tfConfig);}),this);var endDeferHandler=function(tfConfig,result){if(!result){Ext.Array.remove(t.taskflows,tfConfig);}
t.waiter.remove(tfConfig);};Ext.each(this.initialConfig.taskflows,function(tfConfig){this._preprocessTaskflow(tfConfig,beginDeferHandler,endDeferHandler);t.taskflows.push(tfConfig);},this);return t;},_initializeHistory:function(){logger.logInfo("[TaskflowFrame] Initializing history.");var html=[];html.push('<form id="history-form" class="x-hide-display">');html.push('<input type="hidden" id="x-history-field" />');if(Ext.isIE){html.push('<iframe id="x-history-frame"></iframe>');}
html.push('</form>');Ext.core.DomHelper.insertHtml('beforeEnd',document.body,html.join());Ext.util.History.init();Ext.util.History.on("change",this._handleHistoryChange,this);},_handleHistoryChange:function(token){logger.logTrace("[TaskflowFrame] History change detected, token: "+token);var hash=this._parseHistoryToken(token);if(RP.util.Helpers.isSessionExpired()){var newUrl=RP.core.PageContext.getPageURL(RP.globals.SITEID,RP.core.PageContext.getActiveModuleName(),hash.tfName,hash.taskID,hash.moduleContext,hash.taskflowContext,hash.taskContext);RP.util.Helpers.redirect(newUrl);RP.util.Helpers.reload();return;}
if(RP.util.PageInactivityChecker.isInactive()){RP.util.Helpers.keepSessionAlive();Ext.getCmp("inactivityWarningDialog").destroy();}
if(RP.globals.CURRENT_HASH){var oldModuleCtxStr=Ext.urlEncode(RP.globals.CURRENT_HASH.moduleContext);var newHash=RP.core.PageContext.parseHash(token);if((Ext.urlEncode(newHash.moduleContext)!==oldModuleCtxStr)&&RP.core.PageContext.isRefreshOnModuleContextChange()){RP.event.AppEventManager.fire(RP.upb.AppEvents.ModuleContextChanged);}}
var me=this;var activateWidgetFn=function(itfc,tfc,hash){var widget=itfc.getWidgetByID(hash.taskID);if(!widget){itfc.activateDefaultWidget();return;}
if(hash.taskContext){widget.setTaskContext(hash.taskContext);}
if((this._currentHash!==token)){this.activeWidget=widget;var tfCompleted=itfc.getTaskflow().isCompleted();if(widget&&(widget.getEnabled()||tfCompleted)){widget.raiseWidgetClick();}
else{itfc.activateDefaultWidget();}}};var found=false;var waitObj;RP.globals.CURRENT_HASH=hash;this._rpTaskflowsContainer.items.each(function(c){itfc=RP.iget(c,RP.interfaces.ITaskflowContainer2);if(itfc&&itfc.getTaskflowName()===hash.tfName){if(!itfc.getTaskflow()||!itfc.getTaskflow().isInitialized()){waitObj={itfc:itfc,tfc:c};}
else{found=true;activateWidgetFn.call(me,itfc,c,hash);}
return false;}},this);if(!found&&!waitObj&&this._rpTaskflowsContainer.items.getCount()>0){var c=this._rpTaskflowsContainer.down(' > [activateTasks]');waitObj={itfc:RP.iget(c,RP.interfaces.ITaskflowContainer2),tfc:c};}
if(!found&&waitObj&&this.taskflowsEnabled){var itfc=waitObj.itfc;var tfc=waitObj.tfc;var tfCreateListener=null;logger.logTrace("[TaskflowFrame] Waiting for tfc itemId: "+tfc.initialConfig.itemId);tfc.activateTasks();var postCreationFn=function(listenPostInit){logger.logTrace("[TaskflowFrame] postInit for tfc itemId: "+tfc.initialConfig.itemId);if(tfCreateListener){itfc.removeTaskflowCreationListener(tfCreateListener);}
itfc.getTaskflow().mergeTaskflowContext(hash.taskflowContext);if(listenPostInit){itfc.getTaskflow().addPostInitListener(Ext.bind(function(tf){activateWidgetFn.call(me,itfc,tfc,hash);},this));}};var tf=itfc.getTaskflow();if(tf){var itf=RP.iget(tf,RP.interfaces.ITaskflow2);if(itf.isInitialized()){postCreationFn(false);activateWidgetFn.call(me,itfc,tfc,hash);}
else{postCreationFn(true);}}
else{if(!tfCreateListener){tfCreateListener=function(){postCreationFn(true);};}
itfc.addTaskflowCreationListener(tfCreateListener);}}},_parseHistoryToken:function(token){logger.logTrace("[TaskflowFrame] Parsing history token: "+token);return RP.core.PageContext.parseHash(token);},_activateTaskflow:function(tfc,activateDefaultWidget,activatedFn){logger.logTrace("[TaskflowFrame] Expanding taskflow container with itemId: "+tfc.initialConfig.itemId);this.taskflowsEnabled=true;tfc.activateTasks();var unhook=false;var tfCreatedFn=function(){var itfc=RP.iget(tfc,RP.interfaces.ITaskflowContainer2);if(activateDefaultWidget){itfc.activateDefaultWidget();}
if(unhook){itfc.removeTaskflowCreationListener(tfCreatedFn);}
if(Ext.isFunction(activatedFn)){activatedFn(tfc);}};var itfc=RP.iget(tfc,RP.interfaces.ITaskflowContainer2);if(itfc.getTaskflow()){tfCreatedFn();}
else{unhook=true;itfc.addTaskflowCreationListener(tfCreatedFn);}},_createTaskflowContainerConfig:function(tfcCfg){var tfcxtype=this.tfContainerXtype||"rptfcontainer";return RP.mergeProperties({xtype:tfcxtype,taskflowFrame:this,widgetContainerXtype:tfcCfg.widgetContainerXtype,taskflowFrameWidgetContainer:this._widgetContainer,listeners:{render:{scope:this,fn:function(){var tfc=this._rpTaskflowsContainer.getComponent(tfcCfg.itemId);this._setupHandlersForTaskflowContainer(tfc);}}}},tfcCfg);},_setupHandlersForTaskflowContainer:function(tfc){var itfc=RP.iget(tfc,RP.interfaces.ITaskflowContainer2);itfc.addTaskflowAbortHandler(this._tfAbortHandlerFn);itfc.addApplicationActivatedHandler(this._onAppActivatedFn);itfc.setRebuildTaskflowHandler(this._rebuildTaskflowFn);itfc.setBeforeAppActivateHandler(this._beforeAppActivatedFn);},_addTaskflowContainers:function(taskflows){var tfcs=[];Ext.each(taskflows,function(tfDef){var tfCfg=this._createTaskflowContainerConfig(tfDef);if(!this.initialConfig.taskflowsEnabled){tfCfg.hidden=true;}
logger.logTrace("[TaskflowFrame] Creating taskflow container with itemId: "+tfDef.itemId+"; tfContainerXtype: "+tfCfg.xtype);tfcs.push(Ext.ComponentManager.create(tfCfg));},this);this._rpTaskflowsContainer.add(tfcs);logger.logTrace("[TaskflowFrame] Taskflow containers added and laid out.");this._activateDefaultWidget(window.location.hash);if(!(this.initialConfig.taskflowsEnabled&&tfcs.length>0)){this._rpViewPanel.getLayout().setActiveItem(this._rpViewPanel.items.first());this._rpViewPanel.show();}},_onAppActivated:function(tfc,taskForm){if(!this._hasBeenActivated){this._hasBeenActivated=true;this._rpViewPanel.show();}
logger.logTrace("[TaskflowFrame] _onAppActivated; tfc itemId: "+tfc.initialConfig.itemId+"; taskForm itemId: "+taskForm.itemId);var itfc;var layout=this._rpViewPanel.getLayout();var activeItem=layout.activeItem;var hasOldActiveTaskForm=false;if(activeItem){if(Ext.isDefined(RP.iget(activeItem,RP.interfaces.ITaskForm))){hasOldActiveTaskForm=true;}}
if(tfc!==this._activeTFC){if(this._activeTFC){itfc=RP.iget(this._activeTFC,RP.interfaces.ITaskflowContainer2);itfc.onDeactivated();}
this._activeTFC=tfc;}
if(taskForm.xtype){taskForm=RP.core.ComponentMgr.create(taskForm.xtype,taskForm);}
if(hasOldActiveTaskForm&&activeItem){RP.iget(activeItem,RP.interfaces.ITaskForm).onDeactivate();}
layout.setActiveItem(taskForm);activeItem=layout.activeItem;var itf=RP.iget(activeItem,RP.interfaces.ITaskForm);itf.onActivate();var newHash=itf.getUrlHash();if(newHash){Ext.History.add(newHash,true);}
this._currentHash=newHash||"";itfc=RP.iget(tfc,RP.interfaces.ITaskflowContainer2);var taskId=itfc.getActiveWidget().getTaskId();var taskCfg=itfc.getTaskflow().getTaskMetadata(taskId).getConfig();RP.globals.CURRENT_TASK=Ext.apply({},{appId:taskCfg.appId,taskId:taskCfg.id,taskConfig:taskCfg,taskForm:itfc.getActiveWidget().taskForm});if(this._helpRPContainer&&this._helpRPContainer.isVisible()){this._helpRPContainer.hide();}},_activateDefaultWidget:function(hash){if(hash){var loadFn=function(urlHash){Ext.History.fireEvent("change",urlHash);};if(typeof hash==="string"&&hash.charAt(0)==='#'){hash=hash.slice(1);}
Ext.defer(loadFn,10,this,[hash]);}
else{var tfc=this._rpTaskflowsContainer.items.first();if(tfc){var fn=function(){tfc.activateTasks();var itfc=RP.iget(tfc,RP.interfaces.ITaskflowContainer2);itfc.activateDefaultWidget();};if(tfc.rendered){fn();}
else{tfc.on("render",fn,this);}}}},_tfAbortHandler:function(tfContainer){logger.logTrace("[TaskflowFrame] Aborting taskflow container with itemId: "+tfContainer.initialConfig.itemId);if(this._rpTaskflowsContainer.items.getCount()>1){var idx=this._rpTaskflowsContainer.items.indexOf(tfContainer);this._rpTaskflowsContainer.getLayout().setActiveItem((idx===0)?1:0);this._rpTaskflowsContainer.remove(tfContainer);Ext.History.fireEvent("change",window.location.hash);}
else{if(this.initialConfig.blankForm){this._rpViewPanel.getLayout().setActiveItem(this.initialConfig.blankForm);}}},_beforeAppActivatedHandler:function(resultFn){var layout=this._rpViewPanel.getLayout();var activeItem=layout.activeItem;var tf=RP.iget(activeItem,RP.interfaces.ITaskForm);if(Ext.isDefined(tf)){tf.onBeforeDeactivate(resultFn);}
else{resultFn(true);}},_createLandingPage:function(landingPage){if(!landingPage){var messageId="rp.common.misc.NoTaskflows";var titleId="rp.common.misc.NoTaskflowsTitle";if(this.initialConfig.modules.length===0){messageId="rp.common.misc.NotAuthorized";titleId="rp.common.misc.NotAuthorizedTitle";}
landingPage={xtype:"panel",itemId:"landingPage",layout:{type:"vbox",align:"center"},title:RP.getMessage(titleId),items:[{xtype:"box",flex:0.5},{xtype:"panel",bodyCfg:{cls:"rp-taskflow-blank-form-text",align:"center"},border:false,layout:"fit",itemId:"landingPageText",html:RP.getMessage(messageId)},{xtype:"button",itemId:"continueButton",cls:"rp-taskflow-blank-form-button",text:RP.getMessage("rp.common.login.ContinueButton"),flex:0,autoWidth:false,scale:"medium",listeners:{click:RP.util.Helpers.logout}},{xtype:"box",flex:0.5}]};}
return Ext.ComponentMgr.create(landingPage);},_createViewContainer:function(){var viewPanel;this._rpViewPanel=viewPanel=this._createViewPanel();var viewContainer=Ext.create('RP.taskflow.prototype.ViewContainer',{navRegion:RP.globals.NAV_REGION,itemId:"viewContainer",region:'center',viewPanel:viewPanel});this._widgetContainer=viewContainer.getWidgetContainer();return viewContainer;},_createViewPanel:function(){return new Ext.panel.Panel({itemId:"_rp_view_panel",hidden:true,layout:this._getViewPanelLayoutConfig(),style:'zIndex: 0; background-color: white',bodyCls:"rp-ttf-app",bodyStyle:'border: none;',border:false});},getActiveTaskform:function(){return this._rpViewPanel.getLayout().getActiveItem();},getWidgetContainer:function(){return this._widgetContainer;},getRPHelpContainer:function(){if(!this._helpRPContainer){this._helpRPContainer=Ext.create('RP.help.Container',{alignComponent:this._rpViewPanel});}
return this._helpRPContainer;}});RP.core.ComponentMgr.register("rptfframe","RP.taskflow.TaskflowFrame",[]);
Ext.ns("RP.taskflow");RP.taskflow.TaskflowRegistry=function(){var defs={};var initialContexts={};var appendScriptURLs={};var appendCssURLs={};function set(def){logger.logTrace("[TaskflowRegistry] Adding to registry: "+def.name);if(def.cssUrls){RP.util.CSSLoader.load(def.cssUrls,RP.globals.paths.STATIC);}
var tfDef=Ext.copyTo({},def,["name","title","isTitleMessageName","tasks","listeners","uiConfig","desc","defaultTaskId","scheduleCheckFn","scriptUrls","widgetContainerXtype"]);defs[def.name]=tfDef;}
function get(name,throwOnError){var def=defs[name];if(Ext.isEmpty(def)){logger.logError("Taskflow definition with name '"+name+"' not registered!");if(throwOnError){RP.throwError("Taskflow definition with name '"+name+"' not registered!");}
return undefined;}
return def;}
function createTaskflow(def,initialContext,successFn,errorFn){var roster=[];var stashLibs=[];var scriptUrls=[];var cssUrls=[];logger.logTrace("[TaskflowRegistry] createTaskflow name: "+def.name);Ext.each(def.tasks,function(t){var taskDef=RP.getTask(t.appId,t.taskId);if(Ext.isDefined(taskDef.title)){if(t.widgetCfg){t.widgetCfg={};}
t.widgetCfg={title:taskDef.title};}
logger.logTrace("[TaskflowRegistry] Adding task. appId: "+t.appId+"; widget xtype: "+taskDef.widgetXtype);roster.push({appId:t.appId,id:t.id,widget:RP.getWidgetXtype(t.appId,taskDef.widgetXtype,RP.util.Object.mergeProperties(taskDef.widgetCfg,t.widgetCfg)),statusCalculation:t.statusCalculation,inParameterMapping:t.inParameterMapping?Ext.apply({},t.inParameterMapping):undefined,outParameterMapping:t.outParameterMapping?Ext.apply({},t.outParameterMapping):undefined,dependencies:t.dependencies?t.dependencies.concat():undefined,helpUrl:taskDef.helpUrl,helpMapperFn:taskDef.helpMapperFn,completeTaskOnClick:t.completeTaskOnClick});if(Ext.isArray(taskDef.stashLibs)){stashLibs=stashLibs.concat(taskDef.stashLibs);}else if(Ext.isDefined(taskDef.stashLibs)){stashLibs.push(taskDef.stashLibs);}
if(Ext.isArray(taskDef.cssUrls)){cssUrls=cssUrls.concat(taskDef.cssUrls);}else if(Ext.isDefined(taskDef.cssUrls)){cssUrls.push(taskDef.cssUrls);}
if(Ext.isArray(taskDef.scriptUrls)){scriptUrls=scriptUrls.concat(taskDef.scriptUrls);}else if(Ext.isDefined(taskDef.scriptUrls)){scriptUrls.push(taskDef.scriptUrls);}});if(appendCssURLs[def.name]){cssUrls=cssUrls.concat(appendCssURLs[def.name]);}
if(appendScriptURLs[def.name]){scriptUrls=scriptUrls.concat(appendScriptURLs[def.name]);}
var loadSuccessFn=function(){logger.logTrace("[TaskflowRegistry] Finished downloading tasks script files (if any)...");if(def.listeners){Ext.iterate(def.listeners,function(key,value){if(Ext.isString(value)){logger.logTrace(Ext.String.format("[TaskflowRegistry] Performing eval() on '{0}' to set event listener for '{1}'.",value,key));def.listeners[key]=eval(value);}});}
successFn(new RP.taskflow.Taskflow({name:def.name,initialContext:initialContext,defaultTaskId:def.defaultTaskId,roster:roster,listeners:def.listeners,uiConfig:def.uiConfig}));};var loadErrorFn=function(){logger.logError("[RP.taskflow.TaskflowRegistry] Aborting creation of taskflow '"+def.name+"'because script file failed to download...");errorFn();};Ext.each(stashLibs,function(sl){RP.util.ScriptLoader.loadStashLibrary(sl.name,sl.version);logger.logTrace("[TaskflowRegistry] Added loading of stash lib to queue: "+sl.name);});if(cssUrls.length>0){RP.util.CSSLoader.load(cssUrls,true);logger.logTrace("[TaskflowRegistry] Added downloading of CSS file(s) to queue");}
if(scriptUrls.length>0){RP.util.ScriptLoader.load(scriptUrls);logger.logTrace("[TaskflowRegistry] Added loading of script file(s) to queue");}
RP.util.ScriptLoader.onReady(function(){logger.logTrace("[TaskflowRegistry] AT THIS POINT, SCRIPT LOADING HAS FINISHED.");loadSuccessFn();});}
function setInitContext(tfName,initialContext){initialContexts[tfName]=Ext.apply({},initialContext);}
function getInitContext(tfName){return initialContexts[tfName];}
function appendURLs(tfName,dict,urls){var d=dict[tfName];if(!d){d=[];dict[tfName]=d;}
if(!Ext.isArray(urls)){urls=[urls];}
Ext.each(urls,function(url){logger.logTrace("[TaskflowRegistry] Appending to taskflow '"+tfName+"': "+url);d.push(url);});}
return{register:function(def){if(Ext.isArray(def)){Ext.each(def,function(d){set(d);});}else{set(def);}},get:function(name){return get(name,false);},getAll:function(){var tfDefs=[];Ext.iterate(defs,function(name,tfDef){tfDefs.push(Ext.apply({},tfDef));});return tfDefs;},create:function(name,initialContext,successFn,errorFn){var def=get(name,true);var tfInitContext=RP.util.Object.mergeProperties(initialContext,getInitContext(name));createTaskflow(def,tfInitContext,successFn,errorFn);},setInitialContext:function(name,initialContext){setInitContext(name,initialContext);},getInitialContext:function(name){return getInitContext(name);},appendScript:function(name,urls){appendURLs(name,appendScriptURLs,urls);},appendCSS:function(name,urls){appendURLs(name,appendCssURLs,urls);}};}();RP.registerTaskflow=RP.taskflow.TaskflowRegistry.register;RP.createTaskflow=RP.taskflow.TaskflowRegistry.create;
Ext.define("RP.taskflow.widgets.WidgetWithState",{extend:"RP.taskflow.BaseTaskflowWidget",widgetStates:{FAILED:"failed",NORMAL:"normal",SUCCESSFUL:"successful",WARNING:"warning",WORKING:"working"},vantageCls:"rp-vantage-status",statusImageHTML:'<img width="19" height="19" src="{0}" class="{1}">',initComponent:function(){if(!this.widgetState){this.showNormal();}
this.initialConfig.extraCls=(this.initialConfig.extraCls?this.initialConfig.extraCls+" ":"")+"rp-widget-with-state";this.createVantageStatus();this.callParent();},isFailed:function(){return this.widgetState===this.widgetStates.FAILED;},isNormal:function(){return this.widgetState===this.widgetStates.NORMAL;},isSuccessful:function(){return this.widgetState===this.widgetStates.SUCCESSFUL;},isWarning:function(){return this.widgetState===this.widgetStates.WARNING;},isWorking:function(){return this.widgetState===this.widgetStates.WORKING;},showFailed:function(){this.widgetState=this.widgetStates.FAILED;this.backgroundCls="rp-widget-failed-status";this.imgCls="rp-widget-failed";this.applyIconClasses();},showNormal:function(){this.widgetState=this.widgetStates.NORMAL;this.backgroundCls="";this.imgCls="";this.applyIconClasses();},showSuccessful:function(){this.widgetState=this.widgetStates.SUCCESSFUL;this.backgroundCls="rp-widget-success-status";this.imgCls="rp-widget-checked";this.applyIconClasses();},showWarning:function(){this.widgetState=this.widgetStates.WARNING;this.backgroundCls="";this.imgCls="rp-widget-warning";this.applyIconClasses();},showWorking:function(){this.widgetState=this.widgetStates.WORKING;this.backgroundCls="";this.imgCls="rp-widget-loading";this.applyIconClasses();},createVantageStatus:function(){if(!this.vantageStatus){this.vantageStatus=this.vantageStatusWrapper=Ext.create("Ext.Component",{cls:'rp-prototype-widget-vantage-middle',height:21,padding:'0 7.5',minWidth:17,html:Ext.String.format(this.statusImageHTML,Ext.BLANK_IMAGE_URL,this.imgCls)});if(this.header){if(!this.header.isComponent){this.updateHeader();}
this.header.insert(1,this.vantageStatusWrapper);}}},getStatusContainer:function(){return this.vantageStatus;},removeVantageStatus:function(){if(this.rendered&&this.header.isComponent&&this.vantageStatus){this.header.remove(this.vantageStatus);delete this.vantageStatus;}},applyIconClasses:function(){if(!this.header||this.isDestroyed){return;}
if(this.widgetState===this.widgetStates.NORMAL){this.addCls(this.hyperlinkCls);this.removeVantageStatus();}
else{this.removeCls(this.hyperlinkCls);this.removeVantageStatus();this.createVantageStatus();}
this.removeCls(this.lastBackgroundCls);this.addCls(this.backgroundCls);this.lastBackgroundCls=this.backgroundCls;},onPostRender:function(){this.callParent(arguments);this.applyIconClasses();}});
Ext.define("RP.taskflow.widgets.WidgetWithCount",{extend:"RP.taskflow.widgets.WidgetWithState",countCls:'rp-vantage-count',_borderOffset:2,displayCount:function(count){this._count=count;if(count===0){this.showSuccessful();}
else{this.showNormal();if(!this.header||!this.header.isComponent){return;}
var statusCls=!Ext.isEmpty(count)&&count.toString().length<=3?"":"rp-vantage-sum-small";this.createVantageStatus();this.removeCls(this.hyperlinkCls);this.vantageStatus.update(Ext.DomHelper.markup({style:'line-height:'+(this.vantageStatus.height-this._borderOffset)+'px;',cls:this.countCls+" "+statusCls,html:count||""}));}},getCount:function(){return this._count;},updateHeader:function(){this.callParent();this.header.on('afterrender',this._onHeaderRender,this);},_onHeaderRender:function(){if(this.widgetState===this.widgetStates.NORMAL){this.displayCount(this._count);}}});RP.taskflow.BaseTaskflowWidgetWithCount=RP.taskflow.widgets.WidgetWithCount;(function(){var proto=RP.taskflow.widgets.WidgetWithCount.prototype;Ext.apply(proto,{renderCount:proto.displayCount,writeLine:proto.displayCount});})();
Ext.ns("RP.taskflow");RP.taskflow.TaskRegistry=function()
{var defsByApp={};var scriptsByApp={};var cssByApp={};var properties=["appId","taskId","widgetXtype","widgetCfg","stashLibs","scriptUrls","cssUrls","tags","desc","helpUrl","helpMapperFn","title"];function setDef(def){logger.logTrace("[TaskRegistry] Adding to registry. appId: "+def.appId+"; widge xtype: "+def.widgetXtype);var tDef=Ext.copyTo({},def,properties);var appTasks=defsByApp[def.appId];if(Ext.isEmpty(appTasks)){appTasks={};defsByApp[def.appId]=appTasks;}
appTasks[def.taskId]=tDef;}
function getDef(appId,taskId,throwOnError){var defs=defsByApp[appId];var scriptUrls=[];var cssUrls=[];if(Ext.isEmpty(defs)){if(throwOnError){RP.throwError("No tasks with appId '"+appId+"' have been registered!");}
return undefined;}
var def=Ext.copyTo({},defs[taskId],properties);if(Ext.isEmpty(def)){if(throwOnError){RP.throwError("No tasks with appId '"+appId+"' and taskId '"+taskId+"' registered!");}
return undefined;}
if(!Ext.isEmpty(scriptsByApp[appId])&&!Ext.isEmpty(scriptsByApp[appId][taskId])){def.scriptUrls=def.scriptUrls.concat(scriptsByApp[appId][taskId]);}
if(!Ext.isEmpty(cssByApp[appId])&&!Ext.isEmpty(cssByApp[appId][taskId])){def.cssUrls=def.cssUrls.concat(cssByApp[appId][taskId]);}
return def;}
function appendURLs(appId,taskId,dict,urls){if(!dict[appId]){dict[appId]={};dict[appId][taskId]=[];}
var tasks=dict[appId];var urlArray=tasks[taskId];if(!Ext.isArray(urls)){urls=[urls];}
Ext.each(urls,function(url){logger.logTrace("[TaskRegistry] Appending to task '"+appId+"."+taskId+"': "+url);urlArray.push(url);});}
return{register:function(def){if(Ext.isArray(def)){Ext.each(def,function(d){setDef(d);});}
else{setDef(def);}},get:function(appId,taskId){return getDef(appId,taskId,true);},appendScriptUrls:function(appId,taskId,urls){appendURLs(appId,taskId,scriptsByApp,urls);},appendCSSUrls:function(appId,taskId,urls){appendURLs(appId,taskId,cssByApp,urls);}};}();RP.registerTask=RP.taskflow.TaskRegistry.register;RP.getTask=RP.taskflow.TaskRegistry.get;
Ext.ns("RP.taskflow");RP.taskflow.ModuleRegistry=(function(){var defs={};var set=function(def){logger.logTrace("[ModuleRegistry] Adding to registry: "+def.name);var mdef=def;defs[def.name]=mdef;if(Ext.isArray(mdef.cssUrls)&&mdef.cssUrls.length>0){RP.util.CSSLoader.load(mdef.cssUrls,true);logger.logTrace("[ModuleRegistry] Downloading CSS files for module: "+mdef.name);}};var _get=function(name,throwOnError){var def=defs[name];if(Ext.isEmpty(def)){logger.logError("Module definition with name '"+name+"' not registered!");if(throwOnError){RP.throwError("Module definition with name '"+name+"' not registered!");}
return undefined;}
return def;};return{register:function(def){if(Ext.isArray(def)){Ext.each(def,function(d){set(d);});}else{set(def);}},get:function(name){return _get(name,false);},getAllSorted:function(){var list=[];Ext.each(RP.upb.modules,function(d){list.push(_get(d));});return list;}};})();RP.registerModule=RP.taskflow.ModuleRegistry.register;
Ext.define('RP.qtip.GridTip',{extend:'Ext.tip.ToolTip',alternateClassName:'RP.GridTip',alias:['gridtip','widget.gridtip'],width:500,cls:'rp-gridtip',arrow:true,initComponent:function(){RP.util.DeprecationUtils.logStackTrace("[DEPRECATED] RP.qtip.GridTip is deprecated. Please use RP.ui.ToolTip instead.");Ext.apply(this,{items:this._createPanel(),autoHide:false,trackMouse:false,buttonAlign:'center',closable:true,maxWidth:this.width+1,anchorOffset:this.anchorOffset?this.anchorOffset:(this.width/2-20),anchorToTarget:false});if(this.arrow){this.on('beforeshow',function(){this.anchorEl.setStyle({visibility:'visible'});},this,{single:true});}
this.callParent();},_createPanel:function(){var panel=Ext.create('Ext.panel.Panel',Ext.apply({},this.panelConfig,{items:this.displayedPanel,layout:'fit'}));return panel;}});
Ext.define('RP.picker.Month',{extend:'Ext.container.Container',baseCls:Ext.baseCSSPrefix+'monthpicker',initComponent:function(){this.addEvents('okclick','cancelclick');Ext.apply(this,{items:this._createItems()});this.callParent();},setValue:function(value){this._monthCombo.setValue(value.getMonth());this._yearField.setValue(value.getFullYear());},_onOkClick:function(){this.fireEvent('okclick',this,this.getValue());},getValue:function(){var month=this._monthCombo.getValue();var year=this._yearField.getValue();return[month,year];},isAnythingExpanded:function(){return this._monthCombo.isExpanded||this._yearField.isExpanded;},_createItems:function(){this._monthCombo=this._createMonthCombo();this._yearField=this._createYearField();this._okButton=this._createOkButton();return[this._monthCombo,this._yearField,this._okButton];},_createYearField:function(){var yearField=Ext.create('Ext.form.field.Number',{fieldLabel:RP.getMessage("rp.common.dateranges.year"),hideTrigger:true,requiredIndicator:'',allowBlank:false,keyNavEnabled:false,mouseWheelEnabled:false,labelAlign:'top',minValue:1,maxValue:9999});yearField.on('validitychange',this._onYearFieldValiditychange,this);return yearField;},_onYearFieldValiditychange:function(field,isValid){var enableFn=isValid?'enable':'disable';this._okButton[enableFn]();},_createMonthCombo:function(){return Ext.create('Ext.form.field.ComboBox',{fieldLabel:RP.getMessage("rp.common.dateranges.month"),store:this._createMonthStore(),queryMode:'local',displayField:'name',valueField:'abbr',forceSelection:true,labelAlign:'top'});},_createMonthStore:function(){var months=Ext.create('Ext.data.Store',{fields:['abbr','name'],data:[{"abbr":0,"name":Ext.Date.monthNames[0]},{"abbr":1,"name":Ext.Date.monthNames[1]},{"abbr":2,"name":Ext.Date.monthNames[2]},{"abbr":3,"name":Ext.Date.monthNames[3]},{"abbr":4,"name":Ext.Date.monthNames[4]},{"abbr":5,"name":Ext.Date.monthNames[5]},{"abbr":6,"name":Ext.Date.monthNames[6]},{"abbr":7,"name":Ext.Date.monthNames[7]},{"abbr":8,"name":Ext.Date.monthNames[8]},{"abbr":9,"name":Ext.Date.monthNames[9]},{"abbr":10,"name":Ext.Date.monthNames[10]},{"abbr":11,"name":Ext.Date.monthNames[11]}]});return months;},_createOkButton:function(){return new Ext.button.Button({margin:'5 0 0 0',handler:this._onOkClick,scope:this,text:RP.getMessage('rp.common.misc.ok')});}});
Ext.QuickTips.init();Ext.define("RP.login.LoginForm",{extend:"Ext.container.Viewport",authenticatedStatus:0,passwordExpiredStatus:1201,initComponent:function(){var errorHidden=!this._hasError();var formPanel={header:false,cls:"loginFormPanel",xtype:"form",id:"loginForm",hideBorders:true,fieldDefaults:{labelAlign:"right",labelWidth:300,labelPad:20},layoutConfig:{labelSeparator:":"},defaultType:"textfield",items:[{xtype:"box",id:"loginLogo"},{xtype:"box",cls:"login_ProdName",html:RP.getMessage("rp.common.login.FormTitle")},{fieldLabel:RP.getMessage("rp.common.login.Username"),itemId:"userName",inputId:"userName",autoCreate:{tag:"input",type:"text",autocomplete:"on"},width:450},{fieldLabel:RP.getMessage("rp.common.login.Password"),itemId:"password",inputId:"password",inputType:"password",width:450},{xtype:"panel",layout:"fit",height:30,items:[{xtype:"panel",id:"warning",styleHtmlContent:true,styleHtmlCls:"loginErrorMsg",hidden:errorHidden,header:false,html:RP.getMessage("rp.common.login.LoginFailed")}]}],dockedItems:[{xtype:"toolbar",dock:"bottom",ui:"footer",defaults:{minWidth:75},layout:{type:"hbox",align:"center"},items:[{xtype:"tbspacer",width:265},{id:"loginBtn",xtype:'button',text:RP.getMessage("rp.common.login.LoginButton"),handler:this.submit,scope:this}]}]};var html="<br/>";var URLQueryObject=Ext.urlDecode(window.location.search.replace("?",""));var urlBase=Ext.String.format("{0}//{1}{2}",window.location.protocol,window.location.host,window.location.pathname);var currentLocale=Ext.isEmpty(URLQueryObject.locale)?RP.globals.getValue("BASE_LOCALE"):URLQueryObject.locale;Ext.iterate(this.loginLocales,function(key,value){URLQueryObject.locale=key;if(key==currentLocale){html+=Ext.String.format("<span id=\"{0}\">{1}</span>",key,value);}
else{html+=Ext.String.format('<span id=\"{0}\"><a href="{1}">{2}</a></span>',key,urlBase+"?"+Ext.urlEncode(URLQueryObject),value);}});var containerPanel=new Ext.Panel({bodyStyle:"background-color: transparent;",border:false,cls:"loginBGBox",height:414,items:[formPanel,{width:350,cls:"login-locale-links",xtype:"container",html:html}]});Ext.apply(this,{cls:"loginBody",items:[containerPanel]});this.callParent(arguments);},_hasError:function(){var querystring=window.location.search.substring(1);if(querystring){var qsConfig=Ext.urlDecode(querystring);if(qsConfig&&qsConfig.reason){return true;}}
return false;},submit:function(){var results=Ext.getCmp("loginForm").getForm().getValues();if(results.userName&&results.password){this.login(results.userName,results.password);}
else{Ext.getCmp("warning").show();}},login:function(userId,password){logger.logTrace("[Login] Submitting credentials...");var myMask=new Ext.LoadMask(Ext.getBody(),{msg:RP.getMessage("rp.common.misc.PleaseWait")});myMask.show();this._disableFields();var params={loginName:userId,password:password};Ext.Ajax.request({url:this.initialConfig.securityServiceURL,method:"POST",params:params,scope:this,disableExceptionHandling:true,callback:function(options,success,response){var result=Ext.JSON.decode(response.responseText);if(result&&result.status===this.passwordExpiredStatus){Ext.getCmp("loginForm").getComponent("password").reset();myMask.hide();this._enableFields();logger.logTrace("[Login] Displaying ChangePassword dialog.");var changePassword=new RP.ui.ChangePassword({formTitle:RP.getMessage("rp.common.resetpassword.FormTitle"),formIntro:RP.getMessage("rp.common.resetpassword.FormIntro")});changePassword.show();changePassword.on("destroy",function(comp){if(changePassword.success===true){var newPassword=changePassword.getNewPassword();this.login(userId,newPassword);}},this);}
else if(result&&result.status===this.authenticatedStatus){var redirectUrl=this.onAuthenticatedHandler(window.location.href);if(redirectUrl){RP.util.Helpers.redirect(redirectUrl);}
else{RP.core.PageContext.setInitialURL(result.data.siteId,result.data.module);}}
else if(result&&result.status===RP.REFSExceptionCodes.LOGIN_ATTEMPTS_EXCEEDED_EXCEPTION){logger.logError("[Login] "+result.message);myMask.hide();this._enableFields();Ext.MessageBox.show({title:RP.getMessage("rp.common.misc.Error"),msg:RP.getMessage("rp.common.exception.LOGIN_ATTEMPTS_EXCEEDED_EXCEPTION"),icon:Ext.MessageBox.Error,buttons:Ext.MessageBox.OK});}
else{if(result){logger.logFatal("[Login] "+result.message);}else{logger.logFatal("[Login] Received an invalid response from server.");}
myMask.hide();this._enableFields();Ext.getCmp("warning").show();}}});},onAuthenticatedHandler:function(href){var queryString=href.match(/\?(.+)$/);var redirectUrl;if(!Ext.isEmpty(queryString)){var params=Ext.urlDecode(queryString[1]);redirectUrl=params.redirectUrl;}
if(!Ext.isEmpty(redirectUrl)&&!redirectUrl.match(/\/rp\/?$/)){return redirectUrl;}
return undefined;},afterRender:function(){Ext.EventManager.on(document,"keydown",this.keyHandler,this);var task=new Ext.util.DelayedTask(function(){this.down("#userName").focus();},this);task.delay(200);this.callParent(arguments);},beforeDestroy:function(){Ext.EventManager.removeListener(document,"keydown",this.keyHandler);this.callParent(arguments);},keyHandler:function(ev,target,opt){if(Ext.MessageBox.isVisible()){Ext.getCmp("warning").hide();Ext.getCmp("loginForm").getComponent("password").focus(false,500);return;}
if((ev.keyCode===ev.ENTER)&&(target.type!="button")){this.submit();}},_disableFields:function(){this.down("#userName").disable();this.down("#password").disable();},_enableFields:function(){this.down("#userName").enable();this.down("#password").enable();}});
Ext.ns("RP.logout");Ext.define("RP.logout.LogoutForm",{extend:"Ext.Viewport",secondsBeforeRedirect:0,initComponent:function(){var closeURL=RP.globals.getPath("SSO_CLOSE_URL"),text="";if(!Ext.isEmpty(closeURL)){text=Ext.String.format(RP.getMessage("rp.common.logout.Redirect"),closeURL);RP.util.Helpers.redirect(closeURL,this.secondsBeforeRedirect*1000);}
else{text=RP.getMessage("rp.common.logout.SessionEnded");}
Ext.apply(this,{items:{xtype:"box",style:"padding-top: 15px; text-align: center;",html:text}});this.callParent(arguments);}});
Ext.EventManager.on(document,'keydown',function(e){if(e.ctrlKey&&e.shiftKey){if(e.getKey()===76){if(!Ext.getCmp("x-debug-browser")&&!this.disableDiagnosticsWindow){this.debugConsole=new RP.util.DebugConsole.Console();}
else{if(this.debugConsole&&this.debugConsole.isVisible()){if(this.debugConsole.isPinned()){this.debugConsole.unpin();}
this.debugConsole.hide();}
else{this.debugConsole.show();}}
e.stopEvent();}
if(e.getKey()===85){if(this.debugConsole&&this.debugConsole.isVisible()&&this.debugConsole.getCompInspector().isVisible(true)){this.debugConsole.getCompInspector().toggleUiSpy();}
e.stopEvent();}
if(e.getKey()===83){logger.toggleLogToServer();e.stopEvent();}}});Ext.onReady(function(){if(RP.globals&&RP.globals.SERVER_TYPE==="production"){if(RP.upb&&RP.upb.AppEvents){RP.event.AppEventManager.register(RP.upb.AppEvents.Inactive,function(){this.disableDiagnosticsWindow=true;if(Ext.getCmp("x-debug-browser")){Ext.getCmp("x-debug-browser").destroy();}},window.document);RP.event.AppEventManager.register(RP.upb.AppEvents.ActiveAgain,function(){this.disableDiagnosticsWindow=false;},window.document);}}
Ext.apply(Ext,{logf:function(format,arg1,arg2,etc){Ext.log(Ext.String.format.apply(String,arguments));},dump:function(o){if(typeof o=='string'||typeof o=='number'||typeof o=='undefined'||Ext.isDate(o)){Ext.log(o);}
else if(!o){Ext.log("null");}
else if(typeof o!="object"){Ext.log('Unknown return type');}
else if(Ext.isArray(o)){Ext.log('['+o.join(',')+']');}
else{var b=["{\n"];for(var key in o){var to=typeof o[key];if(to!="function"&&to!="object"){b.push(Ext.String.format("  {0}: {1},\n",key,o[key]));}}
var s=b.join("");if(s.length>3){s=s.substr(0,s.length-2);}
Ext.log(s+"\n}");}},_timers:{},time:function(name){name=name||"def";Ext._timers[name]=new Date().getTime();},timeEnd:function(name,printResults){var t=new Date().getTime();name=name||"def";var v=Ext.String.format("{0} ms",t-Ext._timers[name]);Ext._timers[name]=new Date().getTime();if(printResults!==false){Ext.log('Timer '+(name=="def"?v:name+": "+v));}
return v;}});});
Ext.define("RP.util.DebugConsole.Console",{extend:'Ext.Panel',constructor:function(){Ext.apply(this,{id:'x-debug-browser'});this.callParent(arguments);},config:{compInspector:null},initComponent:function(){var console=this.createConsole();this.pinButton=Ext.create('Ext.panel.Tool',{type:'unpin',scope:this,handler:function(){if(this.isPinned()){this.unpin();}else{this.pin();}
RP.getTaskflowFrame().forceComponentLayout();}});this.wasPinned=false;Ext.apply(this,{title:'Console',renderTo:Ext.getBody(),collapsible:true,animCollapse:false,style:'position:absolute;left:0;bottom:0;z-index:101',height:200,layout:'fit',dock:'bottom',resizable:true,resizeHandles:"n",tools:[this.pinButton,{type:'close',scope:this,handler:function(){if(this.isPinned()){this.unpin();}
this.hide();}}],items:console});this.callParent();Ext.EventManager.onWindowResize(this.handleResize,this);this.on('resize',this.onConsoleResize,this);this.on('collapse',this.onConsoleCollapse,this);this.on('expand',this.onConsoleExpand,this);this.on('destroy',this.onConsoleResize,this);console.on('tabchange',this.onClick,this);this.on('collapse',this.stopUiSpy,this);this.handleResize();},isPinned:function(){return RP.getTaskflowFrame().getDockedComponent('x-debug-browser')===this;},pin:function(){RP.getTaskflowFrame().insertDocked(0,this);this.pinButton.setType('pin');},unpin:function(){RP.getTaskflowFrame().removeDocked(this,false);Ext.getBody().appendChild(this.getEl());this.getEl().alignTo(RP.getTaskflowFrame().el,'bl-bl');this.setWidth(RP.getTaskflowFrame().getEl().getViewSize().width);this.pinButton.setType('unpin');},forceWidth:function(){var b=RP.getTaskflowFrame().getEl();var size=b.getViewSize();this.setWidth(size.width);},onConsoleResize:function(){if(!this.isPinned()&&this.rendered){this.getEl().alignTo(RP.getTaskflowFrame().getEl(),'bl-bl');}
this.forceWidth();RP.getTaskflowFrame().forceComponentLayout();},onConsoleCollapse:function(){this.wasPinned=this.isPinned();if(!this.wasPinned){this.pin();}
this.pinButton.disable();},onConsoleExpand:function(){if(!this.wasPinned){this.unpin();}
this.pinButton.enable();},createConsole:function(){this.setCompInspector(new RP.util.DebugConsole.ComponentInspector());var logViewer=new RP.util.DebugConsole.LogViewer();var stopWatch=new RP.util.DebugConsole.StopWatchesPanel();var layoutGuide=new RP.util.DebugConsole.LayoutGuide();var items=[{title:'Log Viewer',layout:'fit',items:[logViewer]},{title:'Component Inspector',layout:'fit',items:[this.getCompInspector()]},{title:'Stop Watch',layout:'fit',items:[stopWatch]}];var listeners;if(Ext.isDefined(RP.globals.getValue("SERVER_TYPE"))&&RP.globals.getValue("SERVER_TYPE").toUpperCase()!=="PRODUCTION"){items.push({title:'Layout Guide',layout:'fit',items:[layoutGuide]});listeners={tabchange:function(owner,newCard){if(newCard.getComponent(layoutGuide)){layoutGuide.refreshStore();}}};}
var tabPanel=Ext.createWidget('tabpanel',{activeTab:0,border:false,tabPosition:'bottom',items:items,listeners:listeners});return tabPanel;},handleResize:function(){var b=Ext.getBody();var size=b.getViewSize();if(size.height<b.dom.scrollHeight){size.width-=18;}
this.setWidth(size.width);this.onConsoleResize();},onClick:function(){if(!this.getCompInspector().isVisible(true)){this.getCompInspector().enableUiSpy();}},stopUiSpy:function(){this.getCompInspector().disableUiSpy();}});
Ext.define("RP.util.DebugConsole.ComponentInspector",{extend:"Ext.tree.Panel",region:'center',pathToStartNode:["rpViewport","_rp_center_panel [ container ]","taskflowFrame","viewContainer","_rp_view_panel [ panel ]"],uiSpyButton:null,uiSpyShowInTreeCheckbox:null,uiSpyOutlineComponent:null,uiSpyUnderComponent:null,uiSpyOnFirstComponent:false,uiSpyNoItemIdWarning:"No item id!",uiSpyOKColor:"#00FF00",uiSpyNoItemIdColor:"#FFFF00",config:{uiSpy:false},initComponent:function(){this.uiSpyButton=new Ext.button.Button();this.uiSpyButton.setText("UI Spy");this.uiSpyButton.on('click',this.toggleUiSpy,this);this.uiSpyShowInTreeCheckbox=Ext.create('Ext.form.field.Checkbox',{fieldLabel:'Show result in tree',value:false,disabled:true,labelStyle:{'vertical-align':'super'}});this.uiSpyOutlineComponent=Ext.create('Ext.Component',{itemId:"uiSpyBorderCmp",floating:true,style:{"background-color":this.uiSpyOKColor,"opacity":"0.4","filter":"alpha(opacity=40)","pointer-events":"none"},visible:false});this.bbar=this.createBottomBar();Ext.apply(this,{fields:[{name:'text',type:'string'},{name:'component'}],layout:'fit',rootVisible:true,root:{text:'Ext Components',component:Ext.ComponentManager.all,leaf:false},viewConfig:{loadMask:false}});this.callParent();this.buildBranch(Ext.ComponentManager.all.getValues(),this.getRootNode(),true);this.on('itemclick',this.onClick,this);this.on('beforeitemexpand',this.onBeforeExpandNode,this);this.startNode=this.expandToNode(this.getRootNode(),0);Ext.EventManager.on(document,'click',this.uiSpyClick,this);Ext.EventManager.on(document,"mousemove",this.uiSpyMouseMove,this);},getClosestExtComponent:function(element){var genIdRegExp=new RegExp("-[0-9]{4}");var genIdExtraStuffRegExp=new RegExp("-[0-9]{4}.");target=element;targetId=target.id;targetCmp=Ext.getCmp(targetId);while(target&&(!targetCmp||!(targetCmp.itemId||!genIdExtraStuffRegExp.test(targetCmp.id)))){target=target.parent();if(target){targetId=target.id;targetCmp=Ext.getCmp(targetId);}}
if(targetCmp&&!targetCmp.itemId&&genIdRegExp.test(targetCmp.id)&&!genIdExtraStuffRegExp.test(targetCmp.id)){this.uiSpyOutlineComponent.show();this.uiSpyOutlineComponent.getEl().applyStyles("background-color:"+this.uiSpyNoItemIdColor);}
else{this.uiSpyOutlineComponent.show();this.uiSpyOutlineComponent.getEl().applyStyles("background-color:"+this.uiSpyOKColor);}
return targetCmp;},createBottomBar:function(){return{xtype:"rptoolbar",itemId:"optionsBar",left:{items:[{text:'Refresh',handler:this.refresh,scope:this},this.uiSpyButton,this.uiSpyShowInTreeCheckbox]},center:{flex:2,items:[{xtype:'label',text:'Component Path: '},{xtype:'textfield',itemId:'componentPath',selectOnFocus:true},{xtype:'button',itemId:'validateButton',text:'Validate Component Path',scope:this,handler:this.validateComponentPath}]},right:{items:[{xtype:'label',text:'JavaScript Path: '},{xtype:'textfield',itemId:'extPath',selectOnFocus:true}]}};},createNode:function(node,child){var hasChildren=(child.items&&child.items.length>0)||(child.getDockedItems&&child.getDockedItems().length>0);return node.appendChild({text:child.getItemId()+(child.getXType()?' [ '+child.getXType()+' ]':''),component:child,leaf:!hasChildren});},buildBranch:function(items,node,isRoot){items=items.items||items;Ext.each(items,function(child){if(child.id!==this.id){if(!child.ownerCt||(child.ownerCt&&child.ownerCt.id!==this.id)){if((isRoot&&!child.ownerCt)||!isRoot){this.createNode(node,child);}}}},this);},onClick:function(tree,node){if(node.data.component.el){node.data.component.el.frame("#ff0000",1,{duration:1000});}
var componentPath=this.getComponentPathFromTreeNode(node);this.getDockedComponent("optionsBar").down('#componentPath').setValue(componentPath);var scriptPath;try{scriptPath=RP.util.DebugConsole.Path.parse(componentPath);}
catch(exception){scriptPath=exception.message;}
this.getDockedComponent("optionsBar").down('#extPath').setValue(scriptPath);},onBeforeExpandNode:function(node){node.data.loading=true;if(!node.data.leaf&&node.parentNode!==null){var component=node.data.component;var items=component.items;this.buildBranch(items,node,false);if(Ext.isDefined(component.dockedItems)){this.buildBranch(component.dockedItems,node,false);}}
node.data.loading=false;},validateComponentPath:function(){var path=this.getDockedItems("[dock=bottom]")[0].down("#componentPath").getValue();var component=undefined;var scriptPath;try{scriptPath=RP.util.DebugConsole.Path.parse(path);component=eval(scriptPath);}
catch(exception){component=undefined;}
if(!(component instanceof Ext.Component)){this.showInvalidComponentBox("Invalid Component Path","The path you entered does not return a component");}
else{this.getDockedItems("[dock=bottom]")[0].down('#extPath').setValue(scriptPath);if(component.el!==undefined){component.el.frame("#ff0000",1,{duration:1000});}}},refresh:function(){var root=this.getRootNode();while(root.firstChild){root.removeChild(root.firstChild);}
this.buildBranch(Ext.ComponentManager.all.getValues(),root,true);this.startNode=this.expandToNode(this.getRootNode(),0);this.selectPath(this.startNode.getPath("text"),"text");this.onClick(this,this.startNode);},getComponentPath:function(component){var genIdRegExp=new RegExp("-[0-9]{4}");var componentPath="";var uiSpyOnFirstComponentLocal=this.uiSpyOnFirstComponent;this.uiSpyOnFirstComponent=false;if(!component){componentPath="";}
else if(!component.up()){var returnString="";if(component instanceof Ext.window.Window){returnString+="window=";}
returnString+=component.getItemId();componentPath=returnString;}
else if(!(component instanceof Ext.AbstractComponent)||(Ext.isDefined(component.initialConfig.id)&&!genIdRegExp.test(component.initialConfig.id))){componentPath=component.id;}
else if(component.itemId){componentPath=this.getComponentPath(component.up())+'/'+component.getItemId();}
else if(Ext.isDefined(component.dock)){var dockedItems=component.ownerCt.getDockedItems("[dock="+component.dock+"]");var i;for(i=0;i<dockedItems.length;i++){if(dockedItems[i].getId()===component.getId()){break;}}
componentPath=this.getComponentPath(component.up())+"/.getDockedItems('[dock="+component.dock+"]')["+i+"]";}
else{if(uiSpyOnFirstComponentLocal){componentPath=this.uiSpyNoItemIdWarning;}
else{var parentPath=this.getComponentPath(component.up());if(parentPath.substr(parentPath.length-1)==="*"){componentPath=parentPath;}
else{componentPath=parentPath+'/*';}}}
return componentPath;},getComponentPathFromTreeNode:function(treeNode){var component=treeNode.data.component;if(component instanceof Ext.Component){return this.getComponentPath(component);}else{return"";}},showInvalidComponentBox:function(title,message){var msgBox=Ext.MessageBox.show({title:title,msg:message,buttons:false,icon:Ext.MessageBox.INFO,closable:false});var task=new Ext.util.DelayedTask(function(){msgBox.hide();});task.delay(1000);},expandToNode:function(node,pathIndex){if(node){node.expand();}
if(Ext.isEmpty(node)||node.data.text===this.pathToStartNode[this.pathToStartNode.length-1]){return node;}
var nextNode=node.findChild("text",this.pathToStartNode[pathIndex]);return this.expandToNode(nextNode,++pathIndex);},toggleUiSpy:function(){if(this.getUiSpy()){this.disableUiSpy();}else{this.enableUiSpy();}},enableUiSpy:function(){this.setUiSpy(true);this.uiSpyButton.toggle(this.getUiSpy());this.uiSpyShowInTreeCheckbox.enable();},disableUiSpy:function(){this.setUiSpy(false);if(this.uiSpyButton){this.uiSpyButton.toggle(this.getUiSpy());}
if(this.uiSpyShowInTreeCheckbox&&this.uiSpyShowInTreeCheckbox.isVisible(true)){this.uiSpyShowInTreeCheckbox.disable();}
this.uiSpyOutlineComponent.hide();},getCorrespondingTreeNode:function(component){var rootNode=this.getRootNode();var returnNode=rootNode.findChildBy(function(node){if(this.getComponentFromTreeNode(node)===component){return true;}else{node.expand();return false;}},this,true);if(returnNode){return returnNode;}else{return rootNode;}},getComponentFromTreeNode:function(treeNode){return treeNode.get("component");},uiSpyClick:function(e){if(this.isVisible(true)&&this.uiSpy){e.stopEvent();if(this.uiSpyUnderComponent&&this.uiSpyUnderComponent.getItemId()&&!this.uiSpyUnderComponent.isDescendantOf(Ext.getCmp("x-debug-browser"))&&(this.uiSpyUnderComponent!==Ext.getCmp("x-debug-browser"))&&this.uiSpyOutlineComponent.isVisible(true)){this.uiSpyOnFirstComponent=true;componentPath=this.getComponentPath(this.uiSpyUnderComponent);this.getDockedComponent("optionsBar").down('#componentPath').setValue(componentPath);var scriptPath;try{if(componentPath===this.uiSpyNoItemIdWarning){scriptPath=this.uiSpyNoItemIdWarning;}else{scriptPath=RP.util.DebugConsole.Path.parse(componentPath);}}
catch(exception){scriptPath=exception.message;}
this.getDockedComponent("optionsBar").down('#extPath').setValue(scriptPath);if(this.uiSpyShowInTreeCheckbox.getValue()){correspondingNode=this.getCorrespondingTreeNode(this.uiSpyUnderComponent);this.getSelectionModel().select([correspondingNode]);}}}},uiSpyMouseMove:function(e){if(!this.isVisible(true)){this.disableUiSpy();}else if(this.uiSpy){this.uiSpyOutlineComponent.hide();var el=document.elementFromPoint(e.getPageX(),e.getPageY());if(el){el=Ext.get(el);targetCmp=this.getClosestExtComponent(el);if(targetCmp&&!targetCmp.isDescendantOf(Ext.getCmp("x-debug-browser"))&&(targetCmp!==Ext.getCmp("x-debug-browser"))){this.uiSpyUnderComponent=targetCmp;this.uiSpyOutlineComponent.setSize(targetCmp.getWidth(),targetCmp.getHeight());this.uiSpyOutlineComponent.showAt([targetCmp.getBox().x,targetCmp.getBox().y]);}else{this.uiSpyOutlineComponent.hide();}}}}});
Ext.define('RP.util.DebugConsole.LayoutGuide',{extend:'Ext.grid.Panel',layoutGuideCls:'rp-layout-guide',layoutGuideOverCls:'rp-layout-guide-over',initComponent:function(){Ext.apply(this,{bbar:this.buildBottomBar(),store:this.buildStore(),columns:this.buildColumns(),selModel:{allowDeselect:true,mode:'SINGLE'},listeners:{itemmouseenter:this.onMouseOverComponent,itemmouseleave:this.onMouseLeaveComponent,selectionchange:this.onSelectionChange,scope:this}});this.callParent(arguments);},buildBottomBar:function(){this.selectorField=Ext.ComponentManager.create({xtype:'textfield',fieldLabel:'Component Selector',labelWidth:110,width:300,emptyText:'container'});this.xoffsetField=Ext.ComponentManager.create({xtype:'numberfield',fieldLabel:'X Offset',labelWidth:60,value:0,width:125});this.yoffsetField=Ext.ComponentManager.create({xtype:'numberfield',fieldLabel:'Y Offset',labelWidth:60,value:0,width:125});return[this.selectorField,{xtype:'button',text:'Refresh',handler:this.refreshStore,scope:this},'-',this.xoffsetField,this.yoffsetField,{xtype:'button',text:'Reset Offsets',handler:this.resetOffsets,scope:this}];},buildStore:function(){return Ext.create('Ext.data.Store',{fields:['itemId','id','area','title'],proxy:{type:'memory',data:this.getComponents(),reader:{type:'json'}},sorters:[{property:'area',direction:'DESC'},{property:'title',direction:'ASC'},{property:'itemId',direction:'ASC'},{property:'id',direction:'ASC'}]});},buildColumns:function(){return[{dataIndex:'title',text:'Title',width:200},{dataIndex:'itemId',text:'Item Id',width:200},{dataIndex:'id',text:'Id',width:100},{dataIndex:'area',text:'Area (pixels)',align:'right',width:100,renderer:function(value){return value+' px';}}];},refreshStore:function(){this.store.loadData(this.getComponents());},resetOffsets:function(){this.xoffsetField.setValue(0);this.yoffsetField.setValue(0);},getComponents:function(){var root=RP.globals.CURRENT_TASK?RP.globals.CURRENT_TASK.taskForm:(RP.getTaskflowFrame?RP.getTaskflowFrame():null);if(root){return this.processComponents([root].concat(root.query(this.selectorField.getValue()||'container')));}
else{return[];}},processComponents:function(components){return Ext.Array.map(components,function(c){return{itemId:c.itemId,id:c.id,title:c.title||'**UNTITLED**',area:c.rendered?c.getHeight()*c.getWidth():0};});},onSelectionChange:function(selModel,selected){var cmp;if(this.lastSelected){cmp=Ext.getCmp(this.lastSelected.get('id'));this.unmask(cmp,this.self.LAYOUT_GUIDE,this.layoutGuideCls);}
this.lastSelected=selected=selected[0];if(selected){cmp=Ext.getCmp(this.lastSelected.get('id'));this.mask(cmp,this.self.LAYOUT_GUIDE,this.layoutGuideCls);}},onMouseOverComponent:function(view,record,item,index,e,opts){var cmp=Ext.getCmp(record.get('id'));this.mask(cmp,this.self.COMPONENT_BORDER,this.layoutGuideOverCls);},onMouseLeaveComponent:function(view,record,item,index,e,opts){var cmp=Ext.getCmp(record.get('id'));this.unmask(cmp,this.self.COMPONENT_BORDER);},mask:function(cmp,maskName,cls){var el=cmp.el,dom,mask,xoff=0,yoff=0,setExpression,dh=Ext.DomHelper,data;if(!el){return;}
data=(el.$cache||el.getCache()).data;dom=el.dom;setExpression=dom.style.setExpression;if(data[maskName]){return;}
if(maskName===this.self.LAYOUT_GUIDE){xoff=this.xoffsetField.getValue()||0;yoff=this.yoffsetField.getValue()||0;}
if(!(/^body/i.test(dom.tagName)&&el.getStyle('position')=='static')){el.addCls('x-masked-relative');}
mask=dh.append(dom,{cls:cls,style:Ext.String.format('left:{0}px;top:{1}px;',xoff,yoff)},true);data[maskName]=mask;el.addCls('x-masked');mask.setDisplayed(true);if(!Ext.supports.IncludePaddingInWidthCalculation&&setExpression){mask.dom.style.setExpression('width','this.parentNode.clientWidth + "px"');}
if(!Ext.supports.IncludePaddingInHeightCalculation&&setExpression){mask.dom.style.setExpression('height','this.parentNode.'+(dom==DOC.body?'scrollHeight':'offsetHeight')+' + "px"');}
else if(Ext.isIE&&!(Ext.isIE7&&Ext.isStrict)&&me.getStyle('height')=='auto'){mask.setSize(undefined,elHeight||me.getHeight());}
return mask;},unmask:function(cmp,maskName,name){var el=cmp.el,data,dom,mask;if(!el){return;}
data=(el.$cache||el.getCache()).data;dom=el.dom;mask=data[maskName];if(mask){if(mask.dom.style.clearExpression){mask.dom.style.clearExpression('width');mask.dom.style.clearExpression('height');}
mask.remove();delete data[maskName];if(!data[this.self.LAYOUT_GUIDE]&&!data[this.self.COMPONENT_BORDER]&&!data.maskEl){el.removeCls(['x-masked','x-masked-relative']);}}},statics:{LAYOUT_GUIDE:'layoutGuide',COMPONENT_BORDER:'cmpBorder'}});
Ext.define("RP.util.DebugConsole.LogViewer",{extend:"RP.ui.Panel",initComponent:function(){var tpl=new Ext.XTemplate('<tpl for=".">','<div class="rp-log {cls}">{message}</div>','</tpl>');this.pressedButtons=['TRACE','DEBUG','WARNING','INFO','ERROR','FATAL'];var loggerStore=logger.getStore();Ext.apply(this,{itemId:'logsTab',frame:false,autoScroll:true,bbar:this.createBottomToolbar(),items:[{xtype:'dataview',itemSelector:"div.rp-log",itemId:'logMessagesPanel',store:loggerStore,emptyText:"No log messages to display",tpl:tpl,frame:false,border:false,listeners:{refresh:this.scrollToBottom,scope:this}}]});this.callParent();this.mon(logger,"logtoservertoggled",this.logToServerHandler,this);this.on('afterlayout',this.initializeLoggerState,this,{single:true});},logToServerHandler:function(){var button=this.getLogToServerButton();button.toggle(logger.getIsLogToServer(),true);if(logger.getIsLogToServer()){button.setIconCls('rp-approve-btn');}
else{button.setIconCls('rp-decline-btn');}},createBottomToolbar:function(){var filterButtonTemplate={xtype:'button',pressed:true,iconCls:'rp-approve-btn',enableToggle:true,listeners:{scope:this,toggle:this.onToggle}};return{xtype:"rptoolbar",itemId:"optionsBar",left:{items:[{xtype:'button',itemId:'refresh',text:'Refresh',iconCls:'rp-approve-btn',pressed:true,scope:this,enableToggle:true,toggleHandler:function(button,pressed){this.onToggleRefreshHandler(button,pressed);}},"-",{xtype:'button',itemId:'clear',text:'Clear',scope:this,handler:function(){this.onClear();}}]},center:{flex:2,items:[Ext.apply({text:'<div class="rp-log-t">Trace</div>',itemId:'trace'},filterButtonTemplate),"-",Ext.apply({text:'<div class="rp-log-d">Debug</div>',itemId:'debug'},filterButtonTemplate),"-",Ext.apply({text:'<div class="rp-log-i">Info</div>',itemId:'info'},filterButtonTemplate),"-",Ext.apply({text:'<div class="rp-log-w">Warning</div>',itemId:'warning'},filterButtonTemplate),"-",Ext.apply({text:'<div class="rp-log-e">Error</div>',itemId:'error'},filterButtonTemplate),"-",Ext.apply({text:'<div class="rp-log-f">Fatal</div>',itemId:'fatal'},filterButtonTemplate)]},right:{items:[{xtype:"button",text:"Show Message IDs",itemId:"showMsgBtn",enableToggle:true,hidden:RP.globals.getValue("SERVER_TYPE")==="production",pressed:RP.locale.Dispatch.isMessageKeyEnabled(),listeners:{scope:this,toggle:this.onShowMessageButtonToggle}},{xtype:'button',text:'Log to Server',align:'left',itemId:'logToServer',buttonAlign:'left',enableToggle:true,pressed:logger.getIsLogToServer(),iconCls:this.getLogToServerIcon(),listeners:{toggle:function(button,pressed){if(pressed){button.setIconCls('rp-approve-btn');}
else{button.setIconCls('rp-decline-btn');}
logger.toggleLogToServer();}}}]}};},onShowMessageButtonToggle:function(button,pressed){if(pressed){Ext.util.Cookies.set("rp-showmessages",true);}
else{Ext.util.Cookies.clear("rp-showmessages");}
RP.util.Helpers.reload();},initializeLoggerState:function(){this.updateLoggerFilter();if(logger.getLogToServerURL()){this.getLogToServerButton().enable();}
else{logger.logTrace('[Diagnostic] getLogToServerURL not set');this.getLogToServerButton().disable();}
this.isRefreshEnabled=true;this.scrollToBottom();this.isRefreshEnabled=false;},getLogToServerIcon:function(){var iconCls='rp-decline-btn';if(logger.getIsLogToServer()){iconCls='rp-approve-btn';}
return iconCls;},getLogToServerButton:function(){return this.getDockedComponent("optionsBar").down("#logToServer");},onToggle:function(button,pressed){if(pressed){this.pressedButtons.push(button.itemId.toUpperCase());button.setIconCls('rp-approve-btn');}
else{Ext.Array.remove(this.pressedButtons,button.itemId.toUpperCase());button.setIconCls('rp-decline-btn');}
this.updateLoggerFilter();},onToggleRefreshHandler:function(button,pressed){if(pressed===true){logger.getStore().resumeEvents();this.updateLoggerFilter();button.setIconCls('rp-approve-btn');}
else{logger.getStore().suspendEvents(false);button.setIconCls('rp-decline-btn');}},onClear:function(){if(logger){logger.clearAll();}},updateLoggerFilter:function(){var store=logger.getStore();var previouslySuspended=store.eventsSuspended;store.resumeEvents();logger.filterBy(this.pressedButtons);if(previouslySuspended){store.suspendEvents(false);}}});
Ext.ns("RP.util.DebugConsole");RP.util.DebugConsole.Path=function(){var doParse=function(path){var chunks=path.split("/");pathPieces.push("window.Ext");if(chunks[0].match("^window=.+")){addWindow(chunks[0]);}else{addId(chunks[0]);}
for(var i=1;i<chunks.length;i++){if(chunks[i]==="*"){if(i+1<chunks.length&&chunks[i+1].indexOf("=")===-1){i++;addWildCardItemId(chunks[i]);}
else if(i+1>=chunks.length){throw new Error("Parse Error: Path cannot end with a '*' wildcard.");}}
else if(chunks[i].match("^\\..+")){addLiteral(chunks[i]);}
else if(chunks[i].match("^css=.+")){addCss(chunks[i]);}
else if(chunks[i].match("^xtype=.+")){addXtype(chunks[i]);}
else{addItemId(chunks[i]);}}
return pathString();};var pathString=function(){return pathPieces.join("");};var addWindow=function(window){var value=extractValue(window);pathPieces.push(".WindowManager.getBy(function(w) { return w.itemId == '"+value+"'; })[0]");};var addId=function(id){if(id.charAt(0)!=="."){pathPieces.push(".getCmp('"+id+"')");}
else{pathPieces.push(id);}};var addItemId=function(itemId){pathPieces.push(".getComponent('"+itemId+"')");};var addLiteral=function(literal){pathPieces.push(literal);};var addCss=function(cssSelector){cssSelector=extractValue(cssSelector);var pathSoFar=pathString();var cssString=pathSoFar+".el.child('"+cssSelector+"').id";pathPieces=[];pathPieces.push("window.Ext.getCmp("+cssString+")");};var addWildCardItemId=function(itemId){pathPieces.push(".down('[itemId=\""+itemId+"\"]')");};var addXtype=function(xtype){xtype=extractValue(xtype);pathPieces.push(".down('."+xtype+"')");};var extractValue=function(typeValuePair){return typeValuePair.substring(typeValuePair.indexOf("=")+1);};var pathPieces=[];return{parse:function(path){pathPieces=[];return doParse(path);}};}();
Ext.ns("RP.util.DebugConsole");Ext.define("RP.util.DebugConsole.StopWatchesPanel",{extend:"Ext.panel.Panel",initComponent:function(){Ext.apply(this,{itemId:'stopWatchesTab',frame:false,bbar:new RP.ui.Toolbar(this.buildBottomBarSettings()),layout:'fit',items:[{xtype:'panel',itemId:'stopWatchesMessagesPanel',id:'stopwatch_out',frame:false,border:false}]});this.callParent(arguments);this.on('afterlayout',function(){this.updateStopwatch();},this);},buildBottomBarSettings:function(){return{left:{items:["-",{xtype:'button',itemId:'refresh',text:'Refresh',iconCls:'rp-decline-btn',scope:this,enableToggle:true,toggleHandler:function(button,pressed){this.onToggleRefreshHandler(button,pressed);}},"-",{xtype:'button',itemId:'clear',text:'Clear',scope:this,handler:function(){this.onClear();}},"-"]}};},onToggleRefreshHandler:function(button,pressed){if(pressed===true){this.updateStopwatch();RP.util.Stopwatch.addListener(Ext.bind(this.updateStopwatch,this,[true],false));button.setIconCls('rp-approve-btn');}
else{this.updateStopwatch();RP.util.Stopwatch.removeListener(Ext.bind(this.updateStopwatch,this,[true],false));button.setIconCls('rp-decline-btn');}},onClear:function(){if(RP.util.Stopwatch){RP.util.Stopwatch.clearAll();Ext.get('stopwatch_out').update('');}},updateStopwatch:function(){if(RP.util.Stopwatch){RP.util.Stopwatch.report('stopwatch_out');}}});
Ext.define('RP.util.date.RangeBuilder',{singleton:true,now:function(){return new Date();},today:function(){return Ext.Date.clearTime(new Date());},offsetToday:function(offset){return RP.Date.addDays(this.today(),offset);},weekStart:function(){var today=this.today(),days=today.getDay()*-1;return RP.Date.addDays(today,days);},monthStart:function(){var today=this.today(),days=(today.getDate()-1)*-1;return RP.Date.addDays(today,days);},yearStart:function(){var today=this.today(),days=Ext.Date.getDayOfYear(today)*-1;return RP.Date.addDays(today,days);},offsetWeekStart:function(offset){var start=this.weekStart();return RP.Date.addWeeks(start,offset);},offsetMonthStart:function(offset){var start=this.monthStart();return RP.Date.addMonths(start,offset);},offsetYearStart:function(offset){var start=this.yearStart();return RP.Date.addYears(start,offset);},constructor:function(){this.ranges={singleDay:Ext.bind(this.buildSingleDayRange,this),today:Ext.Function.pass(this.buildDayRange,[1,0],this),yesterday:Ext.Function.pass(this.buildDayRange,[1,-1],this),tomorrow:Ext.Function.pass(this.buildDayRange,[1,1],this),nextXMinutes:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addMinutes,RP.Date],true),nextXHours:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addHours,RP.Date],true),nextXDays:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addDays,RP.Date],true),nextXWeeks:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addWeeks,RP.Date],true),nextXMonths:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addMonths,RP.Date],true),nextXYears:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addYears,RP.Date],true),lastXMinutes:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addMinutes,RP.Date,-1],true),lastXHours:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addHours,RP.Date,-1],true),lastXDays:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addDays,RP.Date,-1],true),lastXWeeks:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addWeeks,RP.Date,-1],true),lastXMonths:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addMonths,RP.Date,-1],true),lastXYears:Ext.Function.bind(this.buildNowBasedRange,this,[RP.Date.addYears,RP.Date,-1],true),lastWeek:Ext.Function.pass(this.buildWeekRange,[1,0,-1],this),thisWeek:Ext.Function.pass(this.buildWeekRange,[1,0],this),nextWeek:Ext.Function.pass(this.buildWeekRange,[1,1],this),lastMonth:Ext.Function.pass(this.buildMonthRange,[1,0,-1],this),thisMonth:Ext.Function.pass(this.buildMonthRange,[1,0],this),nextMonth:Ext.Function.pass(this.buildMonthRange,[1,1],this),lastYear:Ext.Function.pass(this.buildYearRange,[1,0,-1],this),thisYear:Ext.Function.pass(this.buildYearRange,[1,0],this),nextYear:Ext.Function.pass(this.buildYearRange,[1,1],this),sunday:Ext.Function.pass(this.buildWeekDayRange,[0,0],this),monday:Ext.Function.pass(this.buildWeekDayRange,[1,0],this),tuesday:Ext.Function.pass(this.buildWeekDayRange,[2,0],this),wednesday:Ext.Function.pass(this.buildWeekDayRange,[3,0],this),thursday:Ext.Function.pass(this.buildWeekDayRange,[4,0],this),friday:Ext.Function.pass(this.buildWeekDayRange,[5,0],this),saturday:Ext.Function.pass(this.buildWeekDayRange,[6,0],this),thisSunday:Ext.Function.pass(this.buildWeekDayRange,[0,0],this),thisMonday:Ext.Function.pass(this.buildWeekDayRange,[1,0],this),thisTuesday:Ext.Function.pass(this.buildWeekDayRange,[2,0],this),thisWednesday:Ext.Function.pass(this.buildWeekDayRange,[3,0],this),thisThursday:Ext.Function.pass(this.buildWeekDayRange,[4,0],this),thisFriday:Ext.Function.pass(this.buildWeekDayRange,[5,0],this),thisSaturday:Ext.Function.pass(this.buildWeekDayRange,[6,0],this),nextSunday:Ext.Function.pass(this.buildWeekDayRange,[0,1],this),nextMonday:Ext.Function.pass(this.buildWeekDayRange,[1,1],this),nextTuesday:Ext.Function.pass(this.buildWeekDayRange,[2,1],this),nextWednesday:Ext.Function.pass(this.buildWeekDayRange,[3,1],this),nextThursday:Ext.Function.pass(this.buildWeekDayRange,[4,1],this),nextFriday:Ext.Function.pass(this.buildWeekDayRange,[5,1],this),nextSaturday:Ext.Function.pass(this.buildWeekDayRange,[6,1],this),lastSunday:Ext.Function.pass(this.buildWeekDayRange,[0,-1],this),lastMonday:Ext.Function.pass(this.buildWeekDayRange,[1,-1],this),lastTuesday:Ext.Function.pass(this.buildWeekDayRange,[2,-1],this),lastWednesday:Ext.Function.pass(this.buildWeekDayRange,[3,-1],this),lastThursday:Ext.Function.pass(this.buildWeekDayRange,[4,-1],this),lastFriday:Ext.Function.pass(this.buildWeekDayRange,[5,-1],this),lastSaturday:Ext.Function.pass(this.buildWeekDayRange,[6,-1],this)};this.callParent(arguments);},buildNowBasedRange:function(period,addFn,addFnScope,multiplier){return this.buildDateRange(period,this.now(),addFn,addFnScope,multiplier);},buildDayRange:function(period,offset,multiplier){return this.buildDateRange(period,this.offsetToday(offset),RP.Date.addDays,RP.Date,multiplier);},buildWeekRange:function(period,offset,multiplier){return this.buildDateRange(period,this.offsetWeekStart(offset),RP.Date.addWeeks,RP.Date,multiplier);},buildMonthRange:function(period,offset,multiplier){return this.buildDateRange(period,this.offsetMonthStart(offset),RP.Date.addMonths,RP.Date,multiplier);},buildYearRange:function(period,offset,multiplier){return this.buildDateRange(period,this.offsetYearStart(offset),RP.Date.addYears,RP.Date,multiplier);},buildWeekDayRange:function(day,offset){var startOfWeek=this.offsetWeekStart(offset);return this.buildDateRange(1,RP.Date.addDays(startOfWeek,day),RP.Date.addDays,RP.Date);},buildSingleDayRange:function(start){return this.buildDateRange(1,start,RP.Date.addDays,RP.Date);},buildDateRange:function(period,start,addFn,addFnScope,multiplier){multiplier=multiplier||1;var end=addFn.apply(addFnScope,[start,multiplier*period]),tmp;if(start>end){tmp=start;start=end;end=tmp;}
return{startDate:start,endDate:end};},mergeRanges:function(startRange,endRange){if(startRange.startDate>endRange.endDate){return{startDate:endRange.startDate,endDate:startRange.endDate};}
else{return{startDate:startRange.startDate,endDate:endRange.endDate};}}});
Ext.define('RP.util.date.RangeParser',{singleton:true,supportedDateFormats:['m/d/Y','m/d/y','m/d/','m/d','m-d-Y','m-d-y','m-d-','m-d','n/j/Y','n/j/y','n/j/','n/j','n-j-Y','n-j-y','n-j-','n-j','Y-m-d','Y-n-j','F j Y','F j','F','M j Y','M j','M'],partialToFullFormats:{'m/d/':'m/d/Y','m-d-':'m-d-Y','n/j/':'n/j/Y','n-j-':'n-j-Y','m/d':'m/d/Y','m-d':'m-d-Y','n/j':'n/j/Y','n-j':'n-j-Y','F j':'F j Y','M j':'M j Y','F':'F j Y','M':'M j Y'},regexToFormat:{'^m/':['m/d/Y','m/d/y','m/d','m/d/','m/','m'],'^m-':['m-d-y','m-d-Y','m-d','m-d-','m-','m'],'^n/':['n/j/Y','n/j/y','n/j','n/j/','n/','n'],'^n-':['n-j-y','n-j-Y','n-j','n-j-','n-','n'],'^Y-m':['Y-m-d','Y-m','Y'],'^Y-n':['Y-n-j','Y-n','Y'],'^F':['F j Y','F j','F'],'^M':['M j Y','M j','M']},basicRangeStrings:['thisWeek','thisMonth','thisYear','lastWeek','lastMonth','lastYear','nextWeek','nextMonth','nextYear'],singleDayStrings:['today','tomorrow','yesterday','sunday','monday','tuesday','wednesday','thursday','friday','saturday','thisSunday','thisMonday','thisTuesday','thisWednesday','thisThursday','thisFriday','thisSaturday','lastSunday','lastMonday','lastTuesday','lastWednesday','lastThursday','lastFriday','lastSaturday','nextSunday','nextMonday','nextTuesday','nextWednesday','nextThursday','nextFriday','nextSaturday'],advancedRangeStrings:['nextXMinutes','nextXHours','nextXDays','nextXWeeks','nextXMonths','nextXYears','lastXMinutes','lastXHours','lastXDays','lastXWeeks','lastXMonths','lastXYears'],defaultDateFormat:'m/d/Y',getTranslations:function(){if(!this.translations){this.translations=this.translateStrings();}
return this.translations;},translateStrings:function(){var translations=this.translateDateStrings(),msgPath='rp.common.dateranges.rangeIndicators',rangeIndicators=RP.getMessage(msgPath);if(msgPath===rangeIndicators){rangeIndicators=['-'];}
else{rangeIndicators=rangeIndicators.split(',');}
translations.rangeIndicators=Ext.Array.map(rangeIndicators,function(ind){ind=Ext.String.format(' {0} ',ind.trim());var partials=[],len=ind.length;for(;len>1;--len){partials.push(ind.slice(0,len));}
return partials;});return translations;},translateDateStrings:function(){var translate=function(rangeStrings){var results={};Ext.Array.each(rangeStrings,function(rangeName){var msgPath='rp.common.dateranges.'+rangeName,translation=RP.getMessage(msgPath);if(translation!==msgPath){results[translation]=rangeName;}});return results;},basicRanges=translate(this.basicRangeStrings),singleDayRanges=translate(this.singleDayStrings),advancedRanges=translate(this.advancedRangeStrings);return{basicRanges:basicRanges,singleDayRanges:singleDayRanges,advancedRanges:this.processAdvancedRanges(advancedRanges)};},processAdvancedRanges:function(ranges){var processed={},regex=/\d+/;Ext.Object.each(ranges,function(translation,rangeName){var parts=translation.trim().split('{0}');if(!parts[0]){parts[0]=regex;}
else if(!parts[1]){parts[1]=regex;}
else{parts=[parts[0],regex,parts[1]];}
if(Ext.Array.every(parts,function(p){return p;})){processed[rangeName]={parts:parts,fullString:translation};}});return processed;},suggestRangeText:function(text){return Ext.Array.map(this.parseRange(text),function(result){return result.text;});},parseDate:function(text,forceFormat){var matches,date,dates,matchingFmt,fullFmt;defaultFormat=this.defaultDateFormat;formats=forceFormat?Ext.Array.from(forceFormat):[defaultFormat].concat(this.supportedDateFormats);text=text.trim();Ext.Array.some(formats,function(fmt){date=Ext.Date.parse(text,fmt);if(date){matchingFmt=fmt;fullFmt=this.partialToFullFormats[fmt]||fmt;return true;}},this);if(date){matches=[{text:Ext.Date.format(date,fullFmt),dateRange:RP.util.date.RangeBuilder.ranges.singleDay(date),format:fullFmt}];}
else{dates=this.parseRangeString(text);if(dates){matches=(matches||[]).concat(dates);}}
return matches;},parseRangeString:function(text){var rangeMatches=[],translations=this.getTranslations(),parseSimpleRanges=function(translation,rangeName){if(translation.slice(0,text.length)===text){rangeMatches.push({text:translation,dateRange:RP.util.date.RangeBuilder.ranges[rangeName]()});}};text=text.trim();Ext.Object.each(translations.singleDayRanges,parseSimpleRanges);Ext.Object.each(translations.basicRanges,parseSimpleRanges);rangeMatches=rangeMatches.concat(this.parseAdvancedRange(text));return rangeMatches.length?rangeMatches:null;},parseAdvancedRange:function(text){var matches=[];text=text.trim();Ext.Object.each(this.getTranslations().advancedRanges,function(rangeName,rangeData){var rangeText=text.slice(0),translation=rangeData.fullString,parts=rangeData.parts,period=null,textLen,i,partial,partialLen;for(i=0;i<parts.length;++i){partial=parts[i];textLen=rangeText.length;if(Ext.isString(partial)){partialLen=partial.length;if(textLen>partialLen){if(rangeText.match('^'+partial)){rangeText=rangeText.slice(partialLen);}
else{return true;}}
else{if(rangeText===partial.slice(0,textLen)&&period!==null){matches.push(this._buildAdvancedRangeMatch(rangeName,translation,period));}
return true;}}
else{period=rangeText.match(partial);if(period){period=period[0];rangeText=rangeText.slice(period.length);if(rangeText.length===0){matches.push(this._buildAdvancedRangeMatch(rangeName,translation,period));}}
else{return true;}}}},this);return matches;},parseRange:function(text){text=text.trim();var results=this.parseDate(text),rangeText={};if(Ext.isEmpty(results)){results=this.parseDateRange(text);}
return Ext.Array.filter(results||[],function(result){var range=result.dateRange,keep=range.startDate<range.endDate&&!rangeText[result.text];rangeText[result.text]=true;return keep;});},parseDateRange:function(text){text=text.trim();var rangeIndicators=this.getTranslations().rangeIndicators,matches=[];Ext.Array.each(rangeIndicators,function(indicatorArray){var chunks,firstHalf,secondHalf,firstResults;Ext.Array.each(indicatorArray,function(indicator){chunks=text.split(indicator);if(chunks.length!==2){return true;}
firstHalf=chunks[0];secondHalf=chunks[1];firstResults=this.parseDate(firstHalf);if(!firstResults||Ext.isEmpty(firstResults)){return false;}
Ext.Array.each(firstResults,function(leftObj){var leftText=leftObj.text,leftRange=leftObj.dateRange,startDate=leftRange.startDate,fullFormat=leftObj.format||this.defaultDateFormat,formats,secondResults;if(Ext.isEmpty(secondHalf)){matches.push({text:leftText+indicatorArray[0]+
Ext.Date.format(leftRange.endDate,fullFormat),dateRange:{startDate:startDate,endDate:RP.Date.addDays(startDate,1)},format:fullFormat});}
else{formats=leftObj.format?this.getMatchingFormats(leftObj.format):null;secondResults=this.parseDate(secondHalf,formats);if(!secondResults||Ext.isEmpty(secondResults)){return false;}
Ext.Array.each(secondResults,function(rightObj){var rightRange=rightObj.dateRange;if(RP.Date.compare(rightRange.startDate,leftRange.startDate)!==0||RP.Date.compare(rightRange.endDate,leftRange.endDate)!==0){matches.push({text:leftText+indicatorArray[0]+rightObj.text,dateRange:{startDate:startDate,endDate:rightRange.endDate},format:rightObj.format||leftObj.format});}},this);}},this);},this);},this);return matches;},_buildAdvancedRangeMatch:function(rangeName,translation,period){return{text:Ext.String.format(translation,period),dateRange:RP.util.date.RangeBuilder.ranges[rangeName](period)};},getMatchingFormats:function(fmt){var matchingFormats;Ext.Object.each(this.regexToFormat,function(regex,formats){if(fmt.match(regex)){matchingFormats=formats;return false;}},this);return[this.defaultDateFormat].concat(matchingFormats);},parseRanges:function(text){text=text.trim();var chunks=text.split(/\s+/),sliceLen,considering,range,results=[];while(chunks.length>0){sliceLen=chunks.length;while(sliceLen>0){considering=chunks.slice(0,sliceLen).join(' ');range=this.isExactRange(considering);if(range){results.push(range);chunks=chunks.slice(sliceLen);break;}
else{--sliceLen;if(!sliceLen){results.push(chunks.shift());}}}}
return results;},isExactRange:function(text){text=text.trim();var ranges=this.parseRange(text);if(ranges.length!==1){return false;}
return ranges[0].text===text?ranges[0]:false;}});
Ext.define('RP.taskflow.widgetContainer.Empty',{extend:'Ext.Component',alias:'widget.rp-empty-widget-container',width:0});
Ext.define('RP.taskflow.button.Button',{extend:'Ext.button.Button',_cls:'rp-taskform-button',cls:'',textAlign:'left',paddingOffset:0,initComponent:function(){this.callParent();this.addCls(this._cls);if(this.menu){this.menu.addCls(this._cls);this.menu.showSeparator=false;this.menu.on('boxready',this._onBoxReady,this);}},_onBoxReady:function(){var menu=this.menu,buttonWidth=this.getWidth(),menuWidth=menu.getWidth();if(menuWidth<=buttonWidth){menu.addCls('rp-btn-larger-menu');menu.items.first().setWidth(buttonWidth-this.paddingOffset);}}});
RP.locale.Dispatch.waitForMessageLoaded('rp.common.ext.blankTextOne',function(){if(Ext.data.Types){var thousandSeparator='';if(RP.Formatting.Numbers.getThousandSeparator()===',')
{thousandSeparator=RP.Formatting.Numbers.getThousandSeparator();}
Ext.data.Types.stripRe=new RegExp(Ext.String.format("[\\{0}{1}%]",RP.Formatting.Currencies.getCurrencySymbol(),thousandSeparator),"g");}
if(Ext.Date){Ext.Date.monthNames=RP.Formatting.Dates.getMonthNames();Ext.Date.getShortMonthName=function(month){return RP.Formatting.Dates.getShortMonthNames()[month];};Ext.Date.monthNumbers={Jan:0,Feb:1,Mar:2,Apr:3,May:4,Jun:5,Jul:6,Aug:7,Sep:8,Oct:9,Nov:10,Dec:11};Ext.Date.getMonthNumber=function(name){return Ext.Date.monthNumbers[name.substring(0,1).toUpperCase()+name.substring(1,3).toLowerCase()];};Ext.Date.dayNames=RP.Formatting.Dates.getDayNames();Ext.Date.getShortDayName=function(day){return RP.Formatting.Dates.getShortDayNames()[day];};Ext.Date.parseCodes.S.s=RP.getMessage("rp.common.ext.ordinalNumber");}
if(Ext.MessageBox){Ext.MessageBox.buttonText={ok:RP.getMessage("rp.common.ext.ok"),cancel:RP.getMessage("rp.common.ext.cancel"),yes:RP.getMessage("rp.common.ext.yes"),no:RP.getMessage("rp.common.ext.no")};}
if(Ext.util.Format){Ext.apply(Ext.util.Format,{thousandSeparator:RP.Formatting.Numbers.getThousandSeparator(),decimalSeparator:RP.Formatting.Numbers.getDecimalSeparator(),currencySign:RP.Formatting.Currencies.getCurrencySymbol(),dateFormat:RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.Medium),date:function(value,format){if(!value){return"";}
if(!Ext.isDate(value)){value=new Date(Date.parse(value));}
return RP.Date.dateFormat(value,(format||RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.Medium)));}});}
if(Ext.grid.PropertyColumnModel){Ext.apply(Ext.grid.PropertyColumnModel.prototype,{nameText:RP.getMessage("rp.common.ext.nameText"),valueText:RP.getMessage("rp.common.ext.valueText"),dateFormat:RP.Formatting.Dates.getExtShortDatePattern(),falseText:RP.getMessage("rp.common.ext.falseText")});}
if(Ext.grid.BooleanColumn){Ext.apply(Ext.grid.BooleanColumn.prototype,{trueText:RP.getMessage("rp.common.ext.trueText"),falseText:RP.getMessage("rp.common.ext.falseText"),undefinedText:'&#160;'});}
if(Ext.grid.NumberColumn){Ext.apply(Ext.grid.NumberColumn.prototype,{format:Ext.String.format("0{0}000{1}00",RP.Formatting.Numbers.getThousandSeparator(),RP.Formatting.Numbers.getDecimalSeparator())});}
if(Ext.grid.DateColumn){Ext.apply(Ext.grid.DateColumn.prototype,{format:RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.Medium)});}
if(Ext.Updater){Ext.Updater.defaults.indicatorText='<div class="loading-indicator">'+RP.getMessage("rp.common.ext.loadingText")+'</div>';}
if(Ext.view.View){Ext.view.View.prototype.emptyText="";}
if(Ext.grid.Panel){Ext.grid.Panel.prototype.ddText=RP.getMessage("rp.common.ext.ddText");}
if(Ext.LoadMask){Ext.LoadMask.prototype.msg=RP.getMessage("rp.common.ext.loadingText");}
if(Ext.layout.BorderLayout&&Ext.layout.BorderLayout.SplitRegion){Ext.apply(Ext.layout.BorderLayout.SplitRegion.prototype,{splitTip:RP.getMessage("rp.common.ext.splitTip"),collapsibleSplitTip:RP.getMessage("rp.common.ext.collapsibleSplitTip")});}
if(Ext.form.field.Time){Ext.apply(Ext.form.field.Time.prototype,{minText:RP.getMessage("rp.common.ext.minTimeText"),maxText:RP.getMessage("rp.common.ext.maxTimeText"),invalidText:RP.getMessage("rp.common.ext.invalidTimeText"),format:RP.Formatting.Times.getExtPattern(RP.core.Formats.Time.Short),altFormats:"g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H"});}
if(Ext.picker.Date){Ext.apply(Ext.picker.Date.prototype,{todayText:RP.getMessage("rp.common.ext.todayText"),minText:RP.getMessage("rp.common.ext.minDateText"),maxText:RP.getMessage("rp.common.ext.maxDateText"),disabledDaysText:"",disabledDatesText:"",monthNames:Ext.Date.monthNames,dayNames:Ext.Date.dayNames,nextText:RP.getMessage("rp.common.ext.nextMonthText"),prevText:RP.getMessage("rp.common.ext.prevMonthText"),monthYearText:RP.getMessage("rp.common.ext.monthYearText"),todayTip:RP.getMessage("rp.common.ext.todayTip"),ariaTitleDateFormat:RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.FullDateWithoutDayName),format:RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.Medium),longDayFormat:RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.FullDateWithoutDayName),startDay:RP.Formatting.Dates.getWeekStartDay()});}
if(Ext.picker.Month){Ext.apply(Ext.picker.Month.prototype,{okText:"&#160;OK&#160;",cancelText:RP.getMessage("rp.common.ext.cancel")});}
if(Ext.toolbar.Paging){Ext.apply(Ext.PagingToolbar.prototype,{beforePageText:RP.getMessage("rp.common.ext.beforePageText"),afterPageText:RP.getMessage("rp.common.ext.afterPageText"),firstText:RP.getMessage("rp.common.ext.firstPageText"),prevText:RP.getMessage("rp.common.ext.prevPageText"),nextText:RP.getMessage("rp.common.ext.nextPageText"),lastText:RP.getMessage("rp.common.ext.lastPageText"),refreshText:RP.getMessage("rp.common.ext.refreshText"),displayMsg:RP.getMessage("rp.common.ext.displayMsg"),emptyMsg:RP.getMessage("rp.common.ext.emptyMsg")});}
if(Ext.form.Basic){Ext.form.Basic.prototype.waitTitle=RP.getMessage("rp.common.ext.waitTitle");}
if(Ext.form.field.Base){Ext.form.field.Base.prototype.invalidText=RP.getMessage("rp.common.ext.invalidFieldText");}
if(Ext.form.field.Text){Ext.apply(Ext.form.field.Text.prototype,{minLengthText:RP.getMessage("rp.common.ext.minLengthText"),maxLengthText:RP.getMessage("rp.common.ext.maxLengthText"),blankText:RP.getMessage("rp.common.ext.blankText"),regexText:"",emptyText:null});}
if(Ext.form.field.Number){Ext.apply(Ext.form.field.Number.prototype,{decimalSeparator:RP.Formatting.Numbers.getDecimalSeparator(),decimalPrecision:2,minText:RP.getMessage("rp.common.ext.minValText"),maxText:RP.getMessage("rp.common.ext.maxValText"),nanText:RP.getMessage("rp.common.ext.nanValText")});}
if(Ext.form.field.Date){Ext.apply(Ext.form.field.Date.prototype,{disabledDaysText:RP.getMessage("rp.common.ext.disabledText"),disabledDatesText:RP.getMessage("rp.common.ext.disabledText"),minText:RP.getMessage("rp.common.ext.minDateText"),maxText:RP.getMessage("rp.common.ext.maxDateText"),invalidText:RP.getMessage("rp.common.ext.invalidDateText"),format:RP.Formatting.Dates.getExtPattern(RP.core.Formats.Date.Medium),altFormats:RP.Formatting.Dates.createAltString()});}
if(Ext.form.field.ComboBox){Ext.apply(Ext.form.field.ComboBox.prototype,{loadingText:RP.getMessage("rp.common.ext.loadingText"),valueNotFoundText:undefined});}
if(Ext.form.field.VTypes){Ext.apply(Ext.form.field.VTypes,{emailText:RP.getMessage("rp.common.ext.emailText"),urlText:RP.getMessage("rp.common.ext.urlText"),alphaText:RP.getMessage("rp.common.ext.alphaText"),alphanumText:RP.getMessage("rp.common.ext.alphanumText")});}
if(Ext.form.field.HtmlEditor){Ext.apply(Ext.form.field.HtmlEditor.prototype,{createLinkText:RP.getMessage("rp.common.ext.createLinkText"),buttonTips:{bold:{title:RP.getMessage("rp.common.ext.boldTitle"),text:RP.getMessage("rp.common.ext.boldText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},italic:{title:RP.getMessage("rp.common.ext.italicTitle"),text:RP.getMessage("rp.common.ext.italicText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},underline:{title:RP.getMessage("rp.common.ext.underlineTitle"),text:RP.getMessage("rp.common.ext.underlineText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},increasefontsize:{title:RP.getMessage("rp.common.ext.growTitle"),text:RP.getMessage("rp.common.ext.growText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},decreasefontsize:{title:RP.getMessage("rp.common.ext.shrinkTitle"),text:RP.getMessage("rp.common.ext.shrinkText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},backcolor:{title:RP.getMessage("rp.common.ext.highlightTitle"),text:RP.getMessage("rp.common.ext.highlightText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},forecolor:{title:RP.getMessage("rp.common.ext.fontColorTitle"),text:RP.getMessage("rp.common.ext.fontColorText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},justifyleft:{title:RP.getMessage("rp.common.ext.leftTitle"),text:RP.getMessage("rp.common.ext.leftText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},justifycenter:{title:RP.getMessage("rp.common.ext.centerTitle"),text:RP.getMessage("rp.common.ext.centerText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},justifyright:{title:RP.getMessage("rp.common.ext.rightTitle"),text:RP.getMessage("rp.common.ext.rightText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},insertunorderedlist:{title:RP.getMessage("rp.common.ext.bulletTitle"),text:RP.getMessage("rp.common.ext.bulletText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},insertorderedlist:{title:RP.getMessage("rp.common.ext.numberedTitle"),text:RP.getMessage("rp.common.ext.numberedText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},createlink:{title:RP.getMessage("rp.common.ext.hyperLinkTitle"),text:RP.getMessage("rp.common.ext.hyperLinkText"),cls:Ext.baseCSSPrefix+'html-editor-tip'},sourceedit:{title:RP.getMessage("rp.common.ext.sourceTitle"),text:RP.getMessage("rp.common.ext.sourceText"),cls:Ext.baseCSSPrefix+'html-editor-tip'}}});}
if(Ext.grid.header.Container){Ext.apply(Ext.grid.header.Container.prototype,{sortAscText:RP.getMessage("rp.common.ext.sortAscText"),sortDescText:RP.getMessage("rp.common.ext.sortDescText"),columnsText:RP.getMessage("rp.common.ext.columnsText")});}
if(Ext.grid.GroupingFeature){Ext.apply(Ext.grid.GroupingFeature.prototype,{emptyGroupText:RP.getMessage("rp.common.ext.emptyGroupText"),groupByText:RP.getMessage("rp.common.ext.groupByText"),showGroupsText:RP.getMessage("rp.common.ext.showGroupsText")});}
if(Ext.form.CheckboxGroup){Ext.apply(Ext.form.CheckboxGroup.prototype,{blankText:RP.getMessage("rp.common.ext.blankTextAtLeast")});}
if(Ext.form.RadioGroup){Ext.apply(Ext.form.RadioGroup.prototype,{blankText:RP.getMessage("rp.common.ext.blankTextOne")});}});
Ext.define("RP.upb.prototype.Viewport",{extend:"Ext.container.Viewport",northHeight:54,initComponent:function(){var centerPanel=this.createCenterPanel(),northPanel=this.createNorthPanel();Ext.apply(this,{cls:(RP.globals.NAV_REGION==='east'?'rp-viewport-nav-east':'rp-viewport-nav-west'),layout:{type:'border',targetCls:' '},items:[northPanel,centerPanel]});this.callParent(arguments);},createCenterPanel:function(){return Ext.create("Ext.container.Container",{itemId:"_rp_center_panel",region:'center',layout:{type:'fit',targetCls:''},items:this._createCenterItems()});},createNorthPanel:function(){return{region:'north',height:this.northHeight,modules:this.modules,id:"_rp_header_panel",xtype:'rpPrototypeHeaderContainer'};},_createCenterItems:function(){var taskflowFrame=Ext.create('RP.taskflow.prototype.TaskflowFrame',{itemId:this.taskflowFrameItemId,taskflows:this.taskflows,taskflowsEnabled:this.taskflowsEnabled,modules:this.modules});return taskflowFrame;}});
Ext.define('RP.upb.prototype.HeaderContainer',{extend:'Ext.container.Container',alias:'widget.rpPrototypeHeaderContainer',cls:'rp-header-prototype',buttonCls:'rp-header-menu-btn',searchbarWidth:406,initComponent:function(){Ext.apply(this,{layout:{type:'hbox',align:'middle'},defaults:{margin:'0 10'},items:this._createItems()});this.on('afterrender',this._afterHeaderRender,this);this.callParent();},addHeaderComponent:function(component){this.insert(3,component);},_afterHeaderRender:function(headerCt){headerCt.el.unselectable();},_createItems:function(){this.searchBar=this._createSearchBar();var items=[this._createRpLogoContainer(),this.searchBar,{xtype:'component',flex:1},this._createUserButton(),this._createSiteButton()];return this._mayberReorderForNavRegion(items);},_mayberReorderForNavRegion:function(arr){if(RP.globals.NAV_REGION==='east'){arr.reverse();}
return arr;},_createRpLogoContainer:function(){return Ext.create('Ext.container.Container',{height:this.height,layout:{type:'hbox',align:'stretch'},margin:'0',width:RP.taskflow.prototype.TaskflowFrame.prototype.modulesWidth,items:this._createRpLogoContainerItems()});},_createRpLogoContainerItems:function(){var logo=Ext.create('Ext.container.Container',{flex:1,items:[{xtype:'component',cls:'rp-redprairie-logo'}]}),spacer={xtype:'component',width:16},items=[spacer,logo];return this._mayberReorderForNavRegion(items);},_createSearchBar:function(){RP.search.BooleanParser.requestTranslations();return Ext.create('RP.search.field.ComboBox',{itemId:'searchBar',hidden:!this._isSearchable(),baseCls:'rp-search-combo-box',clearOnSearch:true,fieldCls:'rp-header-search-form-field',margin:'0',triggerCls:'rp-search-btn',triggerWrapCls:'rp-search-btn-triggerWrap',width:this.searchbarWidth,focusWidth:false,listeners:{search:this._onSearch,requestsearchapi:this._showSearchAPI,scope:this}});},_isSearchable:function(){return Ext.Array.some(this.modules,function(module){return module.searchable;});},_showSearchAPI:function(){var taskflowFrame=RP.upb.PageBootstrapper.getTaskflowFrame();if(!this.searchAPIPanel){this.searchAPIPanel=Ext.create('RP.upb.prototype.SearchAPIPanel',{});taskflowFrame._rpViewPanel.add(this.searchAPIPanel);}
var activeTaskform=taskflowFrame.getActiveTaskform();if(activeTaskform!==this.searchPanel&&activeTaskform!==this.searchAPIPanel){this.searchAPIPanel.previousViewItem=activeTaskform;}else if(activeTaskform===this.searchPanel){this.searchAPIPanel.previousViewItem=this.searchPanel.previousViewItem;}
taskflowFrame._rpViewPanel.getLayout().setActiveItem(this.searchAPIPanel);},_onSearch:function(combo,records){var searchValue,category;if(records&&records[0]&&records[0].store.model.$className==='RP.search.model.SearchHistory'){searchValue=records[0].get('query');category=records[0].get('category');}else{searchValue=combo.getValue();if(records&&records[0]){category=records[0].get('categoryType');}}
if(Ext.isEmpty(searchValue)||searchValue.length<3){this.searchBar.focus();return;}
var taskflowFrame=RP.upb.PageBootstrapper.getTaskflowFrame();if(!this.searchPanel){this.searchPanel=Ext.create('RP.upb.prototype.SearchResultPanel');this.searchPanel.on('requestsearchapi',this._showSearchAPI,this);taskflowFrame._rpViewPanel.add(this.searchPanel);}
this.searchBar._onComboBlur();this.searchPanel.searchCombo.focus(false,10);this.searchPanel.search(category,searchValue,true);var activeTaskform=taskflowFrame.getActiveTaskform();if(activeTaskform!==this.searchPanel&&activeTaskform!==this.searchAPIPanel){this.searchPanel.previousViewItem=activeTaskform;}else if(activeTaskform===this.searchAPIPanel){this.searchPanel.previousViewItem=this.searchAPIPanel.previousViewItem;}
taskflowFrame._rpViewPanel.getLayout().setActiveItem(this.searchPanel);},_createUserButton:function(){var userButtonText=RP.globals.DISLAY_USER_FULLNAME?RP.globals.USER_FULL_NAME:RP.globals.USERNAME,btn;btn=this._createButton({itemId:'user-button',text:userButtonText,menu:this._createUserMenu()});return btn;},_createSiteButton:function(){var sites=RP.core.ApplicationSites.getAllSiteIds(),handler,cls;if(sites.length>1){handler=this._onSelectSiteClick;}
else{cls=this.buttonCls+' rp-btn-no-pointer';}
return this._createButton({itemId:'site-button',text:RP.globals.SITEID,handler:handler,cls:cls,scope:this});},_createButton:function(cfg){var config=Ext.applyIf(cfg,{height:23,cls:this.buttonCls,minWidth:75,menuAlign:'tl-bl'});return Ext.create('RP.taskflow.button.Button',config);},_createUserMenu:function(){var items=[{text:RP.getMessage('rp.common.changepassword.FormTitle'),listeners:{scope:this,click:this._onChangePasswordClick},plain:true},{id:'_rpExitLink',text:RP.upb.PageBootstrapper.isNativeLogin()===false?RP.getMessage("rp.common.misc.Close"):RP.getMessage("rp.common.misc.Logout"),listeners:{scope:this,click:this._onExitClick},plain:true}];return Ext.create('Ext.menu.Menu',{minWidth:0,items:items,lastChildCls:'rp-last-child'});},_onChangePasswordClick:function(){if(!this.changePasswordWindow){this.changePasswordWindow=Ext.create('RP.ui.ChangePassword',{closeAction:'hide'});}
this.changePasswordWindow.show();},_onExitClick:function(){RP.util.Helpers.logout();},_onSelectSiteClick:function(){if(!this.changeSiteWindow){this.changeSiteWindow=new RP.upb.ChangeSiteWindow();}
this.changeSiteWindow.show();}});
Ext.define('RP.upb.prototype.SearchAPIPanel',{extend:'Ext.panel.Panel',alias:'widget.rpPrototypeSearchAPIPanel',initComponent:function(){this.buildAPIGrid();Ext.apply(this,{margin:RP.taskflow.BaseTaskForm.prototype.marginString,bodyStyle:'border-width: 0px;',cls:'rp-search-api',border:false,items:[this.searchAPIGrid],layout:'fit',dockedItems:[{xtype:'toolbar',dock:'top',height:36,cls:'rp-search-api-header',items:[Ext.create('Ext.container.Container',{html:RP.getMessage('rp.common.search.HelpTitle'),cls:'rp-search-api-title'}),'->',{html:'',cls:'rp-search-results-close-btn rp-close-x-btn',listeners:{click:{element:'el',fn:this._onCloseClick},scope:this}}]}],header:false});this.callParent();this.on('deactivate',this._onSearchAPIDeactivate,this);this.on('activate',this._onSearchAPIActivate,this);},_onSearchAPIDeactivate:function(oldCard,newCard){RP.upb.PageBootstrapper.getTaskflowFrame().getWidgetContainer().show();},_onSearchAPIActivate:function(){RP.upb.PageBootstrapper.getTaskflowFrame().getWidgetContainer().hide();},buildAPIGrid:function(){if(this.searchAPIGrid===undefined){this.searchAPIStore=Ext.create('Ext.data.Store',{model:'RP.search.model.SearchAPIField',sorters:[{property:'fieldLabel',direction:'ASC'}],autoLoad:true});this.searchAPIGrid=Ext.create('Ext.grid.Panel',{store:this.searchAPIStore,columns:[{text:RP.getMessage('rp.common.search.Type'),dataIndex:'fieldLabel',width:200},{text:RP.getMessage('rp.common.search.Resources'),xtype:'templatecolumn',tpl:'<tpl for="resources"><div>{resourceLabel}</div></tpl>',width:200},{text:RP.getMessage('rp.common.search.Description'),dataIndex:'fieldDescription',flex:1,renderer:function columnWrap(val){return'<div style="white-space:normal;">'+val+'</div>';}},{text:RP.getMessage('rp.common.search.Example'),dataIndex:'fieldExample',width:200,renderer:function columnWrap(val){return'<div style="white-space:normal;">'+val+'</div>';}}],dockedItems:[{xtype:'toolbar',dock:'top',height:36,items:['->',{xtype:'textfield',emptyText:RP.getMessage('rp.common.search.Filter'),margin:'0 8 0 0',listeners:{change:this.onChangeFilterStore,scope:this}}]}]});}},onChangeFilterStore:function(field,newValue){var tempFilterTokens=[];if(newValue){tempFilterTokens=newValue.split(" ");}
var filterTokens=[];Ext.each(tempFilterTokens,function(token){if(!Ext.isEmpty(token)&&token.length>2){filterTokens.push(token.toLowerCase());}},this);if(filterTokens.length===0){this.searchAPIStore.clearFilter(true);this.searchAPIGrid.getView().refresh();return;}
var records=this.searchAPIStore.snapshot===undefined?this.searchAPIStore.getRange():this.searchAPIStore.snapshot.items;var matches=false;Ext.each(records,function(record){var score=0;Ext.each(record.fields.keys,function(key){var value=record.get(key);if(Ext.isString(value)){Ext.each(filterTokens,function(token){if(value.toLowerCase().indexOf(token)>=0){score++;matches=true;}},this);}},this);if(score>0){console.log(new Date()+" - "+score);}
record.set('__filter_score',score);record.set('__filter_match',score>0);},this);this.searchAPIStore.clearFilter(true);this.searchAPIStore.filter('__filter_match',true);this.searchAPIStore.sort('__filter_score','DESC');},_onCloseClick:function(){var taskflowFrame=RP.upb.PageBootstrapper.getTaskflowFrame(),viewPanelLayout=taskflowFrame._rpViewPanel.getLayout();taskflowFrame.getWidgetContainer().show();viewPanelLayout.setActiveItem(this.previousViewItem||this._rpViewPanel.items.first());}});
Ext.define('RP.upb.prototype.SearchResultPanel',{extend:'Ext.panel.Panel',alias:'widget.rpPrototypeSearchResultPanel',categoryCls:'rp-search-category',checkboxCls:'rp-search-checkbox',dataviewCls:'rp-search-dataview',headerCls:'rp-search-category-header',rowCls:'rp-search-category-row',initComponent:function(){this.addEvents('requestsearchapi');this.searchResultStore=Ext.create('Ext.data.Store',{model:'RP.search.model.SearchCategory',sorters:[{property:'categoryType',direction:'ASC'}],autoLoad:false,listeners:{load:this.onSearchResultLoad,scope:this}});Ext.apply(this,{margin:RP.taskflow.BaseTaskForm.prototype.marginString,bodyStyle:'border-width: 0px;',cls:'rp-search',itemId:'search-result-panel',border:false,items:[this.buildResultsPanel()],layout:'fit'});this.callParent();this.on('deactivate',this._onSearchResultDeactivate,this);this.on('activate',this._onSearchResultActivate,this);},_onSearchResultDeactivate:function(oldCard,newCard){RP.upb.PageBootstrapper.getTaskflowFrame().getWidgetContainer().show();},_onSearchResultActivate:function(){RP.upb.PageBootstrapper.getTaskflowFrame().getWidgetContainer().hide();},_buildNavButton:function(){return Ext.create('Ext.button.Button',{disabled:true,minWidth:80,textAlign:'left',menu:{listeners:{scope:this,click:function(menu,item,e,eOpts){if(item instanceof Ext.menu.Item){if(item.moduleName){this._flowToApplication(item.moduleName,item.taskflowName,item.taskId,item.moduleContext,item.taskflowContext,item.taskContext);}
else{var rowEls=this.resultsView.getEl().select('.'+this.resultsView.selectedRowCls),record=this.resultsView.getSelectionModel().getSelection()[0],rowIdx,data;if(record){Ext.suspendLayouts();Ext.Array.each(rowEls.elements,function(row,index){if(Ext.fly(row).hasCls(this.rowCls)){rowIdx=row.getAttribute('data-index');data=record.get('data')[rowIdx];this._addDetailsTab(item,data);}},this);Ext.resumeLayouts(true);this.resultsPanel.setActiveTab(this.resultsPanel.items.getCount()-1);}}}},show:this._onNavMenuShow}},text:RP.getMessage('rp.common.misc.Open'),width:60});},_onNavMenuShow:function(menu){var navItems=menu.items.getRange();Ext.Array.each(navItems,function(item,index){var visFn=!this._isNavItemValidForSelections(this._getSelectedRowItems(),item.validation)?'hide':'show';item[visFn]();},this);},_getSelectedRowItems:function(){var rowNodes=this.resultsView.getEl().select('.'+this.resultsView.selectedRowCls).elements,selectedRecord=this.resultsView.getSelectionModel().getSelection()[0],rows=[];Ext.Array.each(rowNodes,function(node){if(!Ext.fly(node).hasCls(this.headerCls)){rows.push(selectedRecord.get('data')[node.getAttribute('data-index')]);}},this);return rows;},_isNavItemValidForSelections:function(selectedRowRecords,validations){var isValid=true;Ext.Array.each(selectedRowRecords,function(row){Ext.Array.each(validations,function(validation){if((validation.equals&&validation.equals.indexOf(row[validation.variablePath])===-1)||(validation.notEquals&&validation.notEquals.indexOf(row[validation.variablePath])>=0)){isValid=false;return false;}},this);if(!isValid){return false;}},this);return isValid;},_addDetailsTab:function(item,rowData){var newNavButton=Ext.create('Ext.button.Button',{menu:{listeners:{scope:this,click:function(menu,item,e,eOpts){if(item instanceof Ext.menu.Item){if(item.moduleName){this._flowToApplication(item.moduleName,item.taskflowName,item.taskId,item.moduleContext,item.taskflowContext,item.taskContext);}}}}},text:RP.getMessage('rp.common.misc.Open'),width:60});this.insertNavItems(newNavButton,item.rec,false);var tabId=rowData[item.rec.get('idField')],newTab=this.resultsPanel.items.findBy(function(item,key){return item.itemId===tabId;},this);if(newTab){this.resultsPanel.setActiveTab(newTab);return;}
newTab=Ext.create('Ext.panel.Panel',{closable:true,itemId:tabId,title:tabId,tpl:item.rec.get('detailsTemplate'),dockedItems:[{xtype:'toolbar',dock:'bottom',items:[newNavButton]}]});newTab.on('activate',this._onTabActivate,this,{single:true,detailsUrl:item.rec.get('detailsUrl')});this.resultsPanel.add(newTab);},_onTabActivate:function(newCard,oldCard,eOpts){if(!Ext.isEmpty(eOpts.detailsUrl)){Ext.Ajax.request({method:'GET',url:eOpts.detailsUrl,success:function(response){newCard.update(newCard.tpl.apply(response.responseObject.data[0]));}});}
else{logger.logDebug('Global search details page not loaded - No detailsUrl provided.');}},_onCloseClick:function(){var taskflowFrame=RP.upb.PageBootstrapper.getTaskflowFrame(),viewPanelLayout=taskflowFrame._rpViewPanel.getLayout();taskflowFrame.getWidgetContainer().show();viewPanelLayout.setActiveItem(this.previousViewItem||this._rpViewPanel.items.first());},buildResultsPanel:function(){this.searchCombo=Ext.create('RP.search.field.ComboBox',{itemId:'search-result-list-combo',cls:'search-results-search-combo',emptyText:RP.getMessage("rp.common.misc.Search"),hideTrigger:false,matchFieldWidth:true,triggerCls:'',width:300,height:24,margin:'8 0 0 8',listeners:{scope:this,search:this._onSearchComboSearch,expand:this._onSearchComboExpand}});this.resultCountContainer=Ext.create('Ext.container.Container',{html:'',margin:'0 0 0 8',width:173});this._resultsNavButton=this._buildNavButton();this.resultsPanel=Ext.create('Ext.tab.Panel',{itemId:'search-result-tabs',items:[{title:RP.getMessage('rp.common.misc.Search'),itemId:'search-result-list',xtype:'panel',autoScroll:true,cls:'search-result-list',items:this.buildResultsDataView(),dockedItems:[{xtype:'toolbar',dock:'top',cls:'rp-inset-toolbar',itemId:'search-result-list-header',height:32,items:[this.resultCountContainer,'->',{xtype:'container',cls:'rp-search-api-help',margin:'0 8 0 0',html:RP.getMessage("rp.common.search.HelpText"),listeners:{click:{element:'el',fn:function(){this.fireEvent('requestsearchapi',this,undefined);}},scope:this}}]},{xtype:'toolbar',dock:'bottom',height:56,padding:'18 0 0 0',items:[this._resultsNavButton]}],tabConfig:{hidden:true}}],dockedItems:[{xtype:'toolbar',dock:'top',itemId:'search-result-list-toolbar',cls:'rp-toolbar-header',height:36,items:[this.searchCombo]}],layout:'fit',header:false});this.resultsPanel.on('afterrender',this._afterResultsPanelRender,this,{single:true});return this.resultsPanel;},_afterResultsPanelRender:function(tabPanel){var tabbar=tabPanel.getTabBar(),barLayout=tabbar.getLayout();barLayout.overflowHandler.handleOverflow=Ext.bind(this.handleTabBarOverflow,this);this.mainTab=tabbar.body.createChild({cls:'rp-search-results-header-tab',html:RP.getMessage('rp.common.misc.Search')},tabbar.body.child('.'+Ext.baseCSSPrefix+'box-scroller-left'));this.mainTab.on('click',function(){this.resultsPanel.setActiveTab(0);},this);this.closeButton=tabbar.body.createChild({cls:'rp-search-results-close-btn rp-close-x-btn'},tabbar.body.child('.'+Ext.baseCSSPrefix+'box-scroller-right'));this.closeButton.on('click',this._onCloseClick,this);barLayout.availableSpaceOffset=this.mainTab.getWidth()+this.closeButton.getWidth();this.resultsView.getEl().up('.x-panel-body').on('scroll',function(e,t,eOpts){if(Ext.isIE){return;}
var extEl=Ext.get(t.id);var scroll=extEl.getScroll();if(scroll.top>0){extEl.addCls('scrolled-vertical');}else{extEl.removeCls('scrolled-vertical');}
if(scroll.left>0){extEl.addCls('scrolled-horizontal');}else{extEl.removeCls('scrolled-horizontal');}},this);},handleTabBarOverflow:function(){var layout=this.resultsPanel.getTabBar().getLayout(),result=Ext.getClass(layout.overflowHandler).prototype.handleOverflow.apply(layout.overflowHandler,arguments);result.reservedSpace+=this.mainTab.getWidth()+this.closeButton.getWidth();return result;},_onSearchComboSearch:function(combo,records){var category;if(records&&records[0]&&records[0].data){category=records[0].data.categoryType;if(category===undefined){category=this.previousCategory;}}else{category=this.previousCategory;}
this._doSearch(category,combo.getValue());},_onSearchComboExpand:function(){if(this.skipSearchDropdown===true){this.skipSearchDropdown=undefined;this.searchCombo.collapse();}},buildResultsDataView:function(){var me=this,selectedRowCls='rp-search-category-row-selected',selectChangeFn=Ext.bind(me._onSelectionModelChange,me);me.resultsView=Ext.create('Ext.view.View',{itemId:'searchResultDataView',store:this.searchResultStore,itemSelector:'.rp-selectable-search-result',autoScroll:true,cls:this.dataviewCls,selectedRowCls:selectedRowCls,selModel:{selectedRowCls:selectedRowCls,listeners:{selectionchange:selectChangeFn}},_areRowsSelected:Ext.bind(me._areRowsSelected,me),_selectRows:Ext.bind(me._selectRows,me),_flowToApplication:Ext.bind(me._flowToApplication,me),processItemEvent:me._processDataViewItemEvent,updateIndexes:function(startIndex,endIndex){var ns=this.all.elements,records=this.store.getRange(),i;startIndex=startIndex||0;endIndex=endIndex||((endIndex===0)?0:(ns.length-1));for(i=startIndex;i<=endIndex;i++){var idx=Ext.fly(ns[i]).up('.rp-search-category').getAttribute('data-index');ns[i].viewIndex=i;ns[i].viewRecordId=records[idx].internalId;if(!ns[i].boundView){ns[i].boundView=this.id;}}},tpl:me._buildResultsTemplate(),listeners:{afterrender:function(){this.el.on('click',me.onCategoryMoreClick,me,{delegate:'.rp-search-category-more-link'});},beforeselect:function(){if(this.resultsView.cancelSelect===true){delete this.resultsView.cancelSelect;return false;}},refresh:function(){this.searchResultStore.each(function(category){var plugins=category.get('plugins');if(plugins){var categoryData=category.get('data');}},this);},scope:me}});return me.resultsView;},_buildResultsTemplate:function(){return Ext.create('Ext.XTemplate','<tpl for=".">'+'<table class="rp-search-category {[xindex === xcount ? "last" : ""]}" data-index="{[xindex - 1]}">'+'<tr class="rp-search-category-header rp-selectable-search-result">'+'<tpl for="data">'+'<tpl if="xindex == 1">'+'<td class="{[this._getCheckboxCls(parent.categoryType, parent.supportMultiSelect)]}"></td>'+'<td class="rp-search-header-content" colspan="2">{[this.applyDataTemplate(parent.headerTemplate, parent)]}</td>'+'</tpl>'+'</tpl>'+'</tr>'+'<tpl for="data">'+'<tr class="rp-selectable-search-result rp-search-category-row {[xindex === xcount ? "last" : ""]}" data-index="{[xindex - 1]}">'+'<td class="{[this._getCheckboxCls(parent.categoryType, parent.supportMultiSelect)]}"></td>'+'<td class="rp-search-category-data-content-cell span10">{[this.applyDataTemplate(parent.bodyTemplate, parent.data[xindex - 1])]}</td>'+'<td class="right-spacer"></td>'+'</tr>'+'</tpl>'+'</table>'+'<tpl if="totalCount &gt; resultCount">'+'<div class="rp-search-category-more-link" data-index="{[xindex]}">{totalCount} results found in {[values.categoryLabel.toLowerCase()]}</div>'+'</tpl>'+'</tpl>',{applyDataTemplate:function(template,data){var dataTemplate=Ext.create('Ext.XTemplate',template,{_format:this._format,formatCurrency:this.formatCurrency,formatDate:this.formatDate,formatDateTime:this.formatDateTime,formatPercentage:this.formatPercentage,formatTime:this.formatTime,formatDefaultNumber:this.formatDefaultNumber});return dataTemplate.apply(data);},_getCheckboxCls:function(categoryType,isMultiSelectSupported){var cls='rp-search-checkbox';if(isMultiSelectSupported===false||categoryType==='module'){cls+=' rp-search-checkbox-hidden';}
return cls;},_format:function(type,value,format){if(value===undefined){return;}
try{switch(type){case'currency':return RP.core.Format.formatCurrency(value,format||RP.core.Formats.Currency.Default);case'date':return RP.Date.formatDate(value,format||RP.core.Formats.Date.Medium);case'datetime':return RP.Date.formatDate(value,format||RP.core.Formats.Date.Long);case'percent':return RP.core.Format.formatPercentage(value,format||RP.core.Formats.Percent.MediumPrecision);case'time':if(!Ext.isDate(value)){value=new Date(value);}
return RP.Date.formatTime(value,format||RP.core.Formats.Time.Short);}}
catch(error){}},formatCurrency:function(currency){return this._format('currency',currency);},formatDate:function(date){return this._format('date',date);},formatDateTime:function(dateTime){return this._format('datetime',dateTime);},formatPercentage:function(percent){return this._format('percent',percent);},formatTime:function(time){return this._format('time',time);},formatDefaultNumber:function(number){return RP.core.Format.formatNumber(number,RP.core.Formats.Number.Default);}});},_onSelectionModelChange:function(selModel,records){var selectedRecord=records[0];this._resultsNavButton.menu.removeAll();if(records.length===0||selectedRecord.get('categoryType')==='module'){this._resultsNavButton.disable();return;}
this._resultsNavButton.enable();this.insertNavItems(this._resultsNavButton,selectedRecord,!Ext.isEmpty(records));var visFn=selectedRecord&&!Ext.isEmpty(selectedRecord.get('detailsTemplate'))&&!Ext.isEmpty(selectedRecord.get('detailsUrl'))?'show':'hide';this._resultsNavButton.menu.findItem('detailsItem')[visFn]();},insertNavItems:function(btn,record,includeDetailsItem){var flows=record.get('flow');Ext.Array.each(flows,function(item,index){btn.menu.add(Ext.create('Ext.menu.Item',Ext.apply({moduleContext:item.moduleContext,taskContext:item.taskContext,taskflowContext:item.taskflowContext,text:item.taskLabel},item)));},this);if(includeDetailsItem){btn.menu.add(Ext.create('Ext.menu.Item',{itemId:'detailsItem',text:RP.getMessage('rp.common.misc.SearchDetailsMenuItem'),rec:record}));}},_processDataViewItemEvent:function(record,item,index,e){if(e.type=="mousedown"&&e.button===0){var selectedRecords=this.getSelectionModel().getSelection();if(!Ext.isEmpty(selectedRecords)&&selectedRecords[0]!==record&&this._areRowsSelected()&&record.get('categoryType')!=='module'){this.cancelSelect=true;Ext.Msg.show({title:RP.getMessage('rp.common.misc.ChangeSearchCategoryTitle'),msg:RP.getMessage('rp.common.misc.ChangeSearchCategory'),buttons:Ext.Msg.OKCANCEL,fn:function(buttonId,text,obj){if(buttonId==='ok'){this._selectRows(record,item,index,e,true);delete this.cancelSelect;this.select(record);}},icon:Ext.MessageBox.QUESTION,scope:this});}
else{this._selectRows(record,item,index,e,false);}}},_areRowsSelected:function(){var rows=this.resultsView.getEl().select('.'+this.resultsView.selectedRowCls);return rows.elements.length>0;},_selectRows:function(record,item,index,e,deselectAll){var itemEl=Ext.get(item),categoryTable=itemEl.up('.'+this.categoryCls),checkbox=itemEl.down('.'+this.checkboxCls),rows,styleFn,allRowsChecked=true,view=this.resultsView,isMultiSelectable=record.get('supportMultiSelect');if(deselectAll&&view.getSelectionModel().getSelection()[0]){this._deselectItems(itemEl,view);}
if(record.get('categoryType')==='module'){return;}
if(itemEl.hasCls(this.headerCls)){if(isMultiSelectable!==false&&e.within(checkbox)){rows=categoryTable.select('.'+this.rowCls);styleFn=itemEl.hasCls(view.selectedRowCls)?'removeCls':'addCls';itemEl[styleFn](view.selectedRowCls);Ext.Array.each(rows.elements,function(row,index){Ext.fly(row)[styleFn](view.selectedRowCls);},this);}}
else{rows=itemEl.parent().select('.'+this.rowCls);if(isMultiSelectable!==false&&e.within(checkbox)){var headerEl=categoryTable.down('.'+this.headerCls);styleFn=itemEl.hasCls(view.selectedRowCls)?'removeCls':'addCls';itemEl[styleFn](view.selectedRowCls);if(styleFn==='addCls'){Ext.Array.each(rows.elements,function(row,index){if(!Ext.fly(row).hasCls(view.selectedRowCls)){allRowsChecked=false;return false;}},this);if(allRowsChecked){headerEl.addCls(view.selectedRowCls);}}
else{headerEl.removeCls(view.selectedRowCls);}}
else{Ext.Array.each(rows.elements,function(row,index){styleFn=(row===item)?'addCls':'removeCls';Ext.fly(row)[styleFn](view.selectedRowCls);},this);}}},_deselectItems:function(item,view){var dataViewEl=item.up('.'+this.dataviewCls),categoryEl=item.up('.'+this.categoryCls),allRows=dataViewEl.select('.'+this.rowCls),allHeaders=dataViewEl.select('.'+this.headerCls),categoryRows=categoryEl.select('.'+this.rowCls),categoryHeader=categoryEl.down('.'+this.headerCls);Ext.Array.each(allRows.elements,function(row,index){if(categoryRows.elements.indexOf(row)===-1){Ext.fly(row).removeCls(view.selectedRowCls);}},this);Ext.Array.each(allHeaders.elements,function(row,index){if(row!==categoryHeader){Ext.fly(row).removeCls(view.selectedRowCls);}},this);},search:function(category,query,limit){if(!Ext.isEmpty(query)){this.skipSearchDropdown=true;}
var comboValue=this.searchCombo.getValue();if(comboValue!==query){this.searchCombo.setRawValue(query);}
this._doSearch(category,query,limit);},_doSearch:function(category,query,limit){this.previousCategory=category;this.previousQuery=query;if(limit!==undefined){this.previousLimit=limit;}else if(limit!==false){limit=this.previousLimit;}
this.setSearchResultTitle(query);this.lastParams={query:RP.search.StringParser.parseSearchString(query),rawQuery:query,category:category,queryLimit:limit};this.searchResultStore.load({params:this.lastParams});this.resultsPanel.setActiveTab(0);},onSearchResultLoad:function(store,groupers,eOpts){var query=this.lastParams.rawQuery,category=this.lastParams.category,count=0;store.data.each(function(item,index,self){count+=item.data.totalCount;},this);Ext.each(RP.search.field.ComboBox.searchHistory,function(data){if(data.query===query&&data.category===category){data.totalCount=count;}});this.setSearchResultTitle(query,count,store.count());this.searchCombo.focus(false);},setSearchResultTitle:function(query,queryResultCount,categoryCount){var inMsg=RP.getMessage('rp.common.misc.in'),resultMsg=RP.getMessage('rp.common.search.Result'),resultsMsg=RP.getMessage('rp.common.search.Results'),categoryMsg=RP.getMessage('rp.common.search.Category'),categoriesMsg=RP.getMessage('rp.common.search.Categories');var titleString=' ';if(queryResultCount!==undefined){titleString=queryResultCount+' ';titleString+=queryResultCount===1?resultMsg:resultsMsg;if(categoryCount!==undefined){titleString+=' '+inMsg+' '+categoryCount+' ';titleString+=categoryCount===1?categoryMsg:categoriesMsg;}}
this.resultCountContainer.update('<div class="query-result-count">'+titleString+'</div>');},onCategoryMoreClick:function(event,element,eOpts){var categoryIndex=element.getAttribute('data-index'),categoryRow=this.searchResultStore.getAt(categoryIndex).data,category=categoryRow.categoryType,query=this.lastParams.rawQuery;this.search(category,query,false);},_flowToApplication:function(moduleName,taskflowName,taskId,moduleContext,taskflowContext,taskContext){var pageContext=RP.core.PageContext,url=pageContext.getPageURL(RP.globals.getValue("SITEID"),moduleName,taskflowName,taskId,moduleContext,taskflowContext,taskContext);RP.util.Helpers.redirect(url);}});
Ext.define('RP.upb.prototype.ChatMenu',{extend:'Ext.menu.Menu',alias:'widget.rpPrototypeHeaderChatMenu',chatMenuCls:'rp-header-chatmenu',chatTextCls:'rp-chat-header-text',chatHeaderCls:'rp-chat-header',chatBtnCls:'rp-new-btn',chatBtnIconCls:'rp-new-btn-icon',menuTitle:"Messages",useCheckboxes:false,initComponent:function(){Ext.apply(this,{bodyCls:this.chatMenuCls,items:this._createItems(),width:285,defaults:{width:'100%',height:70}});this.callParent();},_createItems:function(){if(this.items){this.items.unshift(this._createHeader());}
return this.items;},_createHeaderToolbar:function(){return Ext.create('Ext.toolbar.Toolbar',{items:[{xtype:'label',text:this.menuTitle,cls:this.chatTextCls},{xtype:'tbfill'},{xtype:'button',baseCls:this.chatBtnCls,iconCls:this.chatBtnIconCls,text:RP.getMessage("rp.common.misc.NewBtn"),textAlign:'left',margin:'3px 3px 0 0',handler:this._newBtnClickHandler,scope:this}],baseCls:this.chatHeaderCls,height:'100%'});},_newBtnClickHandler:function(){var newMessage=Ext.create('RP.upb.prototype.ChatMessage',{showCheckbox:this.useCheckboxes});this.add(newMessage);},_createHeader:function(){return Ext.create('Ext.panel.Panel',{height:35,dock:"top",tbar:this._createHeaderToolbar()});}});
Ext.define('RP.upb.prototype.ChatMessage',{extend:'Ext.panel.Panel',alias:'widget.rpPrototypeHeaderChatMessage',senderName:"Default Name",message:"Default Message",orderNumber:0,time:0,showOrderNumber:false,messageTimeCls:'rp-header-timecontainer-text',messageCls:'rp-header-chatmessage',messageTextCls:'rp-header-chatmessage-text',checkboxBtnCls:'rp-chatmessage-checkbox-btn',checkboxBtnPressedCls:'rp-chatmessage-checkbox-btn-pressed',ordnumBtnCls:'rp-chatmenu-ordnum-btn',arrowCls:'rp-chatmessage-icon',showCheckbox:false,initComponent:function(){Ext.apply(this,{baseCls:this.messageCls,items:this._createContainers(),defaults:{padding:'4px 0px 0px 8px'},layout:'column',autoScroll:false});this.callParent();},_createContainers:function(){var objects=[this._createNameContainer(),this._createTimeContainer(),this._createMessageContainer(),this._createArrowContainer()];if(this.showCheckbox){objects.unshift(this._createCheckboxContainer());}
return objects;},_createNameContainer:function(){this.nameContainer=Ext.create('Ext.container.Container',{height:20,columnWidth:0.85,layout:'fit',items:[{xtype:'label',text:this.senderName,cls:this.messageTextCls}]});return this.nameContainer;},_createCheckboxContainer:function(){this.checkBoxContainer=Ext.create('Ext.container.Container',{dock:'left',height:70,buttonAlign:'center',items:[{xtype:'container',height:20},{xtype:'button',cls:this.checkboxBtnCls,pressedCls:this.checkboxBtnPressedCls,hoverCls:this.checkboxBtnCls,height:15,width:15,enableToggle:true}]});return this.checkBoxContainer;},_createMessageContainer:function(){var shortenedMessage=this.message;var threshold=140;if(shortenedMessage.length>threshold){shortenedMessage=shortenedMessage.substring(0,threshold)+"...";}
this.messageContainer=Ext.create('Ext.container.Container',{height:50,width:'100%',columnWidth:0.97,items:[{xtype:'label',text:shortenedMessage}]});if(this.showOrderNumber){this.messageContainer.add(this._createOrdnumButton());}
return this.messageContainer;},_createOrdnumButton:function(){this.ordnumButton=Ext.create('Ext.button.Button',{text:'ORD'+this.orderNumber,cls:this.ordnumBtnCls,height:16});return this.ordnumButton;},_createTimeContainer:function(){this.timeContainer=Ext.create('Ext.container.Container',{html:''+this.time,cls:this.messageTimeCls,style:{margin:'0 3px 0 0'},columnWidth:0.15,height:20});return this.timeContainer;},_createArrowContainer:function(){this.arrowContainer=Ext.create('Ext.container.Container',{cls:this.arrowCls,height:50,columnWidth:0.03});return this.arrowContainer;},getMessage:function(){return this.message;},setMessage:function(message){this.message=message;},getTime:function(){return this.time;},getSender:function(){return this.senderName;},_shortenMessage:function(message){}});
RP.stash.api.endLoadLib();
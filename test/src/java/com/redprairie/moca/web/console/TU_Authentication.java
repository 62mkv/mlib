/*
 *  $URL$
 *  $Author$
 *  $Date$
 *  
 *  $Copyright-Start$
 *
 *  Copyright (c) 2014
 *  RedPrairie Corporation
 *  All Rights Reserved
 *
 *  This software is furnished under a corporate license for use on a
 *  single computer system and can be copied (with inclusion of the
 *  above copyright) only for use on such a system.
 *
 *  The information in this document is subject to change without notice
 *  and should not be construed as a commitment by RedPrairie Corporation.
 *
 *  RedPrairie Corporation assumes no responsibility for the use of the
 *  software described in this document on equipment which has not been
 *  supplied or approved by RedPrairie Corporation.
 *
 *  $Copyright-End$
 */

package com.redprairie.moca.web.console;

import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import com.redprairie.moca.MocaArgument;
import com.redprairie.moca.MocaContext;
import com.redprairie.moca.MocaException;
import com.redprairie.moca.MocaRegistry;
import com.redprairie.moca.MocaType;
import com.redprairie.moca.SimpleResults;
import com.redprairie.moca.client.LoginFailedException;
import com.redprairie.moca.server.ServerUtils;
import com.redprairie.moca.server.exec.ServerContext;
import com.redprairie.moca.util.AbstractMocaTestCase;
import com.redprairie.moca.web.console.Authentication.RequestType;

public class TU_Authentication extends AbstractMocaTestCase {
    
    @Override
    public void mocaSetUp() {
        MockitoAnnotations.initMocks(this);
        Mockito.when(_mockServerContext.getComponentContext()).thenReturn(_mockMocaContext);
        Mockito.when(_mockMocaContext.newResults()).thenReturn(new SimpleResults());
        Mockito.when(_mockMocaContext.getArgs()).thenReturn(new MocaArgument[0]);
        
        // Setup the admin registry settings via overrides
        Mockito.when(_mockMocaContext.getDbType()).thenReturn("ORACLE");
        ServerUtils.globalContext().overrideConfigurationElement(MocaRegistry.REGKEY_SECURITY_ADMIN_USER, TEST_INTERNAL_USER);
        ServerUtils.globalContext().overrideConfigurationElement(MocaRegistry.REGKEY_SECURITY_ADMIN_PASSWORD, TEST_HASHED_PASSWORD);
    }
    
    // Tests the regular authentication code path which calls the "login user" command.
    // Validate that this code path actually occurs if the user provided is NOT the admin-user
    public void testAuthenticateRegularUser() throws MocaException {
        SimpleResults res = new SimpleResults();
        res.addColumn("session_key", MocaType.STRING);
        res.addRow();
        res.setStringValue("session_key", "12345");
        // Mock out the call on the context to "login user" to just return our session key, we'll validate this code path then this way
        Mockito.when(_mockMocaContext.executeCommand(Mockito.eq(Authentication.LOGIN_USER_COMMAND), Matchers.<MocaArgument>anyVararg())).thenReturn(res);
        String sessionId = Authentication.login(RequestType.CONSOLE, _mockServerContext, "SUPER", "SUPER");
        assertEquals("12345", sessionId); 
    }
    
    // Tests that internal authentication occurs when the user provided is the "admin-user" that is specified in the registry
    // This also tests the hash validation occurs correctly, the registry is value is overridden here to be the hashed
    // equivalent of the String "admin-password" which we pass into the login method.
    public void testAuthenticateInternalUser() throws MocaException {
        String sessionId = Authentication.login(RequestType.CONSOLE, _mockServerContext, "admin-user-configured", "admin-password");
        assertNotNull(sessionId);
    }
    
    // Tests that when using the internal authentication by specifying the "admin-user" that if the given pass doesn't hash
    // down to the hashed password in the registry a LoginFailedException should occur.
    public void testAuthenticateInternalUserBadPass() throws MocaException {
        try {
            String sessionKey = Authentication.login(RequestType.CONSOLE, _mockServerContext, TEST_INTERNAL_USER, "badpass");
            fail("The login should have failed due to an invalid password. Generated session key: " + sessionKey);
        }
        catch (LoginFailedException expected) { 
            // this is expected due to a bad password
        }
    }

    
    @Mock
    private ServerContext _mockServerContext;
    
    @Mock
    private MocaContext _mockMocaContext;
    
    private static final String TEST_INTERNAL_USER = "admin-user-configured";
    // This is the hash of the String "admin-password" generated by mpasswd
    private static final String TEST_HASHED_PASSWORD = "|H|ECLXPL68J343QA61RO61UVQNR79OF3";
}
